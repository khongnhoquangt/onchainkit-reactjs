'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const ansiEscapes = require('ansi-escapes');
const ansiRegex = require('ansi-regex');
const cliTruncate = require('cli-truncate');
const slice = require('slice-ansi');
const stringWidth = require('string-width');
const strip = require('strip-ansi');
const supportsHyperlinks = require('supports-hyperlinks');
const wrap = require('wrap-ansi');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const ansiEscapes__default = /*#__PURE__*/_interopDefault(ansiEscapes);
const ansiRegex__default = /*#__PURE__*/_interopDefault(ansiRegex);
const cliTruncate__default = /*#__PURE__*/_interopDefault(cliTruncate);
const slice__default = /*#__PURE__*/_interopDefault(slice);
const stringWidth__default = /*#__PURE__*/_interopDefault(stringWidth);
const strip__default = /*#__PURE__*/_interopDefault(strip);
const supportsHyperlinks__default = /*#__PURE__*/_interopDefault(supportsHyperlinks);
const wrap__default = /*#__PURE__*/_interopDefault(wrap);

/** Regular expression for matching ANSI escape codes. */
const ANSI_REGEX = ansiRegex__default.default();

/**
 * Can be used to wrap a piece of text with a visual annotation _(iTerm only)_. If a terminal doe
 * not support annotations, it will pass the text through.
 *
 * ```ts
 * import { annotate } from '@boost/terminal';
 *
 * const text = annotate('fileName.js', absFilePath);
 * ```
 */
function annotate(text, annotation) {
  if (supportsHyperlinks__default.default().stdout) {
    return `\u001B]1337;AddAnnotation=${text.length}|${annotation}\u0007${text}`;
  }
  return text;
}

/**
 * Calculate and return the visual width of a string (number of terminal columns required).
 * Based on [string-width](https://www.npmjs.com/package/string-width).
 *
 * ```ts
 * import { calculateWidth } from '@boost/terminal';
 *
 * calculateWidth('Âè§'); // 2
 * ```
 */
function calculateWidth(text) {
  return stringWidth__default.default(text);
}

/**
 * Returns true if the string contains ANSI escape codes.
 * Based on [ansi-regex](https://www.npmjs.com/package/ansi-regex).
 *
 * ```ts
 * import { hasAnsi } from '@boost/terminal';
 *
 * hasAnsi('\u001B[4mTest\u001B[0m'); // true
 * ```
 */
function hasAnsi(value) {
  return ANSI_REGEX.test(value);
}

/**
 * Can be used to wrap a piece of text in an ANSI escape code hyperlink.
 * If a terminal does not support hyperlinks, it will pass the text through.
 *
 * ```ts
 * import { link } from '@boost/terminal';
 *
 * const text = link('Read the manual', 'https://boostlib.dev');
 * ```
 */
function link(text, url) {
  if (supportsHyperlinks__default.default().stdout) {
    return ansiEscapes__default.default.link(text, url);
  }
  return text;
}

/**
 * Slice a string while preserving ANSI escape codes.
 * Based on [slice-ansi](https://www.npmjs.com/package/slice-ansi).
 *
 * ```ts
 * import { sliceAnsi } from '@boost/terminal';
 *
 * const text = sliceAnsi(aStringThatMayContainAnsi, 15, 25);
 * ```
 */
function sliceAnsi(text, start, end) {
  return slice__default.default(text, start, end);
}

/**
 * Strip all ANSI escape codes from the provided string.
 * Based on [strip-ansi](https://www.npmjs.com/package/strip-ansi).
 *
 * ```ts
 * import { stripAnsi } from '@boost/terminal';
 *
 * const text = stripAnsi(aStringThatContainsAnsi);
 * ```
 */
function stripAnsi(text) {
  return strip__default.default(text);
}
/**
 * Truncate a string to a desired terminal width while preserving ANSI escape codes,
 * Unicode surrogate pairs, and fullwidth characters.
 * Based on [cli-truncate](https://www.npmjs.com/package/cli-truncate).
 *
 * ```ts
 * import { truncate } from '@boost/terminal';
 *
 * const text = truncate(aStringThatMayContainAnsi, 10, { position: 'middle' });
 * ```
 */
function truncate(text, width, options) {
  return cliTruncate__default.default(text, width, options);
}
/**
 * Wrap a string that contains ANSI escape codes to a desired terminal width.
 * Based on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi).
 *
 * ```ts
 * import { wrapAnsi } from '@boost/terminal';
 *
 * const text = wrapAnsi(aStringThatContainsAnsi, 20);
 * ```
 */
function wrapAnsi(text, width, options) {
  return wrap__default.default(text, width, options);
}
exports.ANSI_REGEX = ANSI_REGEX;
exports.annotate = annotate;
exports.calculateWidth = calculateWidth;
exports.hasAnsi = hasAnsi;
exports.link = link;
exports.sliceAnsi = sliceAnsi;
exports.stripAnsi = stripAnsi;
exports.truncate = truncate;
exports.wrapAnsi = wrapAnsi;
//# sourceMappingURL=text.cjs.map
