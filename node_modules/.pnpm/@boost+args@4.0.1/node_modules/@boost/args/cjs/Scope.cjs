'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const castValue = require('./helpers/castValue.cjs');
const formatValue = require('./helpers/formatValue.cjs');
class Scope {
  constructor(name, config) {
    this.config = void 0;
    this.name = void 0;
    this.negated = false;
    this.unknown = false;
    this.value = void 0;
    this.name = name;
    if (config) {
      this.config = config;
    } else {
      this.config = {
        description: '',
        type: 'string'
      };
      this.unknown = true;
    }
  }
  get flag() {
    return this.config.type === 'boolean';
  }
  get finalValue() {
    return formatValue.formatValue(castValue.castValue(this.value, this.config.type), this.config.format);
  }
  captureValue(value, commit) {
    const config = this.config;

    // Update the scope with this new value
    if (config.multiple) {
      this.value.push(value);
    } else {
      this.value = value;
    }

    // Commit scope when a single value is set,
    // or when a multiple arity is met.
    if (!config.multiple || config.arity && Array.isArray(this.value) && this.value.length >= config.arity) {
      commit();
    }
  }
}
exports.Scope = Scope;
//# sourceMappingURL=Scope.cjs.map
