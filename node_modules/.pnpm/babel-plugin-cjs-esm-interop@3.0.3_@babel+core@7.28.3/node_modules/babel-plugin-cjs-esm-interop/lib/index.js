'use strict';

const paths = require('node:path');
const core = require('@babel/core');
const helperModuleImports = require('@babel/helper-module-imports');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const paths__default = /*#__PURE__*/_interopDefault(paths);

/* eslint-disable complexity */

// function isEsmFile(file: string) {
// 	return /\.(ts|tsx|mjs)$/.test(file);
// }
function isPathDirname(path) {
  // dirname(foo)
  if (path.isCallExpression() && path.get('callee').isIdentifier({
    name: 'dirname'
  })) {
    return true;
  }

  // path.dirname(foo)
  return Boolean(path.isCallExpression() && path.get('callee').isMemberExpression() && path.get('callee.object').isIdentifier() && path.get('callee.property').isIdentifier({
    name: 'dirname'
  }));
}
function isProcessEnv(path) {
  // process.env
  return Boolean(path.isMemberExpression() && path.get('object').isMemberExpression() && path.get('object.object').isIdentifier({
    name: 'process'
  }) && path.get('object.property').isIdentifier({
    name: 'env'
  }));
}
function isValidNodeGlobal(path, name) {
  if (!path.isIdentifier({
    name
  })) {
    return false;
  }
  const parentPath = path.parentPath;

  // const __dirname = ...
  if (parentPath?.isVariableDeclarator() && parentPath.get('id').isIdentifier({
    name
  })) {
    return false;
  }
  return true;
}
function getFormat(state) {
  return state.opts?.format ?? 'mjs';
}
function wrapWithFileProto(path, id, importFactory) {
  if (path.parentPath?.isNewExpression() && path.parentPath?.get('callee').isIdentifier({
    name: 'URL'
  })) {
    return core.types.callExpression(core.types.memberExpression(core.types.identifier(importFactory()), core.types.identifier('pathToFileURL')), [core.types.identifier(id)]);
  }
  return core.types.identifier(id);
}
function cjsEsmInterop() {
  return {
    visitor: {
      CallExpression(path, state) {
        // // `require()` not allowed in esm files
        // // https://nodejs.org/api/esm.html#esm_no_require_exports_or_module_exports
        // if (getFormat(state) === 'mjs' && path.get('callee').isIdentifier({ name: 'require' })) {
        // 	throw new Error(
        // 		`Found a \`require()\` call in non-module file "${paths.basename(
        // 			state.filename,
        // 		)}". Use dynamic \`import()\` instead.`,
        // 	);
        // }

        // `require.resolve()` not allowed in esm files
        // https://nodejs.org/api/esm.html#esm_no_require_resolve
        if (getFormat(state) === 'mjs' && path.get('callee').isMemberExpression() && path.get('callee.object').isIdentifier({
          name: 'require'
        }) && path.get('callee.property').isIdentifier({
          name: 'resolve'
        })) {
          throw new Error(`Found a \`require.resolve()\` call in non-module file "${paths__default.default.basename(state.filename)}". Use the \`resolve\` npm package instead.`);
        }
      },
      Identifier(path, state) {
        // __filename -> import.meta.url
        // https://nodejs.org/api/esm.html#esm_no_filename_or_dirname
        if (getFormat(state) === 'mjs' && isValidNodeGlobal(path, '__filename')) {
          path.replaceWith(core.types.memberExpression(core.types.metaProperty(core.types.identifier('import'), core.types.identifier('meta')), core.types.identifier('url')));
        }

        // __dirname -> path.dirname(import.meta.url)
        // https://nodejs.org/api/esm.html#esm_no_filename_or_dirname
        if (getFormat(state) === 'mjs' && isValidNodeGlobal(path, '__dirname')) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call
          this.pathImport ??= helperModuleImports.addDefault(path, 'path', {
            nameHint: '_path'
          });
          const call = core.types.callExpression(core.types.memberExpression(core.types.identifier(this.pathImport.name), core.types.identifier('dirname')), [core.types.memberExpression(core.types.metaProperty(core.types.identifier('import'), core.types.identifier('meta')), core.types.identifier('url'))]);
          path.replaceWith(call);
        }

        // `NODE_PATH` is not allowed in esm files
        // https://nodejs.org/api/esm.html#esm_no_node_path
        if (getFormat(state) === 'mjs' && path.isIdentifier({
          name: 'NODE_PATH'
        }) && isProcessEnv(path.parentPath)) {
          throw new Error('Environment variable `process.env.NODE_PATH` is not available in modules.');
        }
      },
      MemberExpression(path, state) {
        // const isEsm = isEsmFile(state.filename);
        // const file = paths.basename(state.filename);

        // // `exports.<name>` not allowed in esm files
        // // https://nodejs.org/api/esm.html#esm_no_require_exports_or_module_exports
        // if (
        // 	isEsm &&
        // 	getFormat(state) === 'mjs' &&
        // 	path.get('object').isIdentifier({ name: 'exports' }) &&
        // 	path.get('property').isIdentifier()
        // ) {
        // 	console.log(state, this);
        // 	const { name } = path.node.property as t.Identifier;

        // 	throw new Error(
        // 		`Found an \`exports.${name} =\` expression in non-module file "${file}". Use \`export const ${name} =\` instead.`,
        // 	);
        // }

        // // `module.exports` not allowed in esm files
        // // https://nodejs.org/api/esm.html#esm_no_require_exports_or_module_exports
        // if (
        // 	isEsm &&
        // 	getFormat(state) === 'mjs' &&
        // 	path.get('object').isIdentifier({ name: 'module' }) &&
        // 	path.get('property').isIdentifier({ name: 'exports' })
        // ) {
        // 	console.log(state, this);
        // 	throw new Error(
        // 		`Found a \`module.exports =\` expression in non-module file "${file}". Use \`export default\` instead.`,
        // 	);
        // }

        // import.meta.url -> __filename
        // path.dirname(import.meta.url) -> __dirname
        // https://nodejs.org/api/esm.html#esm_no_filename_or_dirname
        if (getFormat(state) === 'cjs' && path.get('object').isMetaProperty() && path.get('object.meta').isIdentifier({
          name: 'import'
        }) && path.get('object.property').isIdentifier({
          name: 'meta'
        }) && path.get('property').isIdentifier({
          name: 'url'
        })) {
          const addUrlImport = () => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            this.urlImport ??= helperModuleImports.addDefault(path, 'url', {
              nameHint: '_url'
            });
            return this.urlImport.name;
          };
          if (isPathDirname(path.parentPath)) {
            path.parentPath.replaceWith(wrapWithFileProto(path.parentPath, '__dirname', addUrlImport));
          } else {
            path.replaceWith(wrapWithFileProto(path, '__filename', addUrlImport));
          }
        }

        // `require.extensions` is not allowed in esm files
        // https://nodejs.org/api/esm.html#esm_no_require_extensions
        if (getFormat(state) === 'mjs' && path.get('object').isIdentifier({
          name: 'require'
        }) && path.get('property').isIdentifier({
          name: 'extensions'
        })) {
          throw new Error('API `require.extensions` is not available in modules.');
        }

        // `require.cache` is not allowed in esm files
        // https://nodejs.org/api/esm.html#esm_no_require_cache
        if (getFormat(state) === 'mjs' && path.get('object').isIdentifier({
          name: 'require'
        }) && path.get('property').isIdentifier({
          name: 'cache'
        })) {
          throw new Error('API `require.cache` is not available in modules.');
        }

        // `require.resolve` is not allowed in esm files
        // https://nodejs.org/api/esm.html#esm_no_require_resolve
        if (getFormat(state) === 'mjs' && path.get('object').isIdentifier({
          name: 'require'
        }) && path.get('property').isIdentifier({
          name: 'resolve'
        })) {
          throw new Error(`Found a \`require.resolve()\` call in non-module file "${paths__default.default.basename(state.filename)}". Use the \`resolve\` npm package instead.`);
        }
      }
    }
  };
}
module.exports = cjsEsmInterop;
//# sourceMappingURL=index.js.map
