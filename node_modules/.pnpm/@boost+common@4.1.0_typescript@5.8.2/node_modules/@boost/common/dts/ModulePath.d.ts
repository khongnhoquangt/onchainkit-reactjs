import { ModuleID, Pathable, PortablePath } from './types';
/**
 * An immutable class for operating on Node.js module IDs, names, and paths.
 */
export declare class ModulePath implements Pathable {
    protected internalPath: string;
    protected isNormalized: boolean;
    constructor(...parts: PortablePath[]);
    /**
     * Create and return a new `ModulePath` instance.
     */
    static create(id: PortablePath): ModulePath;
    /**
     * Convert a module path-like value to a formatted module path string.
     */
    static path(part: PortablePath): ModuleID;
    /**
     * Append path parts to the end of the current path
     * and return a new `ModulePath` instance.
     */
    append(...parts: PortablePath[]): ModulePath;
    /**
     * Return true if the module is scoped within a private namespace
     * (starts with @).
     *
     */
    hasScope(): boolean;
    /**
     * Return the module name without any trailing import paths,
     * or optionally without the private scope.
     */
    name(withoutScope?: boolean): string;
    /**
     * Return the current module path as a normalized string.
     */
    path(): ModuleID;
    /**
     * Return the private scope with leading @, or null if not defined.
     */
    scope(): string | null;
    toJSON(): ModuleID;
    toString(): ModuleID;
}
//# sourceMappingURL=ModulePath.d.ts.map