import { FilePath, Pathable, PortablePath } from './types';
/**
 * An immutable class for operating on file system paths.
 * Will normalize path separators based on the operating system,
 * "/" on Linux/MacOS, and "\\" on Windows.
 */
export declare class Path implements Pathable {
    static DELIMITER: string;
    static SEP: string;
    protected internalPath: string;
    protected isNormalized: boolean;
    constructor(...parts: PortablePath[]);
    /**
     * Create and return a new `Path` instance.
     */
    static create(filePath: PortablePath): Path;
    /**
     * Convert a path-like value to a formatted path string.
     */
    static path(part: PortablePath): FilePath;
    /**
     * Like `create()` but also resolves the path against a working directory.
     */
    static resolve(filePath: PortablePath, cwd?: PortablePath): Path;
    /**
     * Append path parts to the end of the current path
     * and return a new `Path` instance.
     */
    append(...parts: PortablePath[]): Path;
    /**
     * Returns true if both paths are equal using strict equality.
     */
    equals(filePath: PortablePath): boolean;
    /**
     * Return the extension (if applicable) with or without leading period.
     */
    ext(withoutPeriod?: boolean): string;
    /**
     * Return true if the current path exists.
     */
    exists(): boolean;
    /**
     * Return true if the current path is absolute.
     */
    isAbsolute(): boolean;
    /**
     * Return true if the current path is a folder.
     */
    isDirectory(): boolean;
    /**
     * Return true if the current path is a file.
     */
    isFile(): boolean;
    /**
     * Return the file name (with optional extension) or folder name.
     */
    name(withoutExtension?: boolean): string;
    /**
     * Return the parent folder as a new `Path` instance.
     */
    parent(): Path;
    /**
     * Return the current path as a normalized string.
     */
    path(): FilePath;
    /**
     * Prepend path parts to the beginning of the current path
     * and return a new `Path` instance.
     */
    prepend(...parts: PortablePath[]): Path;
    /**
     * Returns a canonical path by resolving directories and symlinks.
     */
    realPath(): FilePath;
    /**
     * Return a new relative `Path` instance from the current
     * "from" path to the defined "to" path.
     */
    relativeTo(to: PortablePath): Path;
    /**
     * Return a new `Path` instance where the current path is accurately
     * resolved against the defined working directory.
     */
    resolve(cwd?: PortablePath): Path;
    toJSON(): FilePath;
    toString(): FilePath;
}
//# sourceMappingURL=Path.d.ts.map