import { ModuleResolver, Pathable, PortablePath, ResolvedLookup } from './types';
export declare class PathResolver {
    private lookups;
    private resolver;
    constructor(resolver?: ModuleResolver);
    static defaultResolver(path: string, startDir?: string): Promise<string>;
    /**
     * Return a list of all lookup paths.
     */
    getLookupPaths(): string[];
    /**
     * Add a file system path to look for, resolved against the defined current
     * working directory (or `process.cwd()` otherwise).
     */
    lookupFilePath(filePath: PortablePath, cwd?: PortablePath): this;
    /**
     * Add a file system path with a list of possible extensions to look for,
     * resolved against the defined current working directory (or `process.cwd()` otherwise).
     */
    lookupFilePathWithExts(filePath: PortablePath, exts: string[], cwd?: PortablePath): this;
    /**
     * Add a Node.js module, either by name or relative path, to look for.
     */
    lookupNodeModule(moduleId: PortablePath): this;
    /**
     * Given a list of lookups, attempt to find the first real/existing path and
     * return a resolved absolute path. If a file system path, will check using `fs.exists`.
     * If a node module path, will check using the provided resolver.
     */
    resolve(startDir?: PortablePath): Promise<ResolvedLookup>;
    /**
     * Like `resolve()` but only returns the resolved file path.
     */
    resolvePath(): Promise<Pathable>;
}
//# sourceMappingURL=PathResolver.d.ts.map