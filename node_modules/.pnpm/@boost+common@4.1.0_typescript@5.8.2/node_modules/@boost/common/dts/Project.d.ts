import { Path } from './Path';
import { PackageStructure, PortablePath, WorkspaceMetadata, WorkspacePackage } from './types';
export interface ProjectSearchOptions {
    relative?: boolean;
}
export declare class Project {
    readonly root: Path;
    constructor(root?: PortablePath);
    /**
     * Normalize a glob pattern or path for use on POSIX and Windows machines.
     * @link https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows
     */
    static normalizeGlob(pattern: string): string;
    /**
     * Create a workspace metadata object composed of absolute file paths.
     */
    createWorkspaceMetadata(jsonPath: PortablePath): WorkspaceMetadata;
    /**
     * Return the contents of the root `package.json`.
     */
    getPackage<T extends PackageStructure>(): T;
    /**
     * Return a list of all workspace globs as they are configured
     * in `package.json` or `lerna.json`. Glob patterns will _always_
     * use forward slashes, regardless of OS.
     */
    getWorkspaceGlobs(options?: ProjectSearchOptions): string[];
    /**
     * Return all `package.json`s across all workspaces and their packages.
     * Once loaded, append workspace path metadata.
     */
    getWorkspacePackages<T extends PackageStructure>(): WorkspacePackage<T>[];
    /**
     * Return a list of all workspace package paths, resolved against the file system.
     * Absolute file paths are returned unless the `relative` option is true.
     */
    getWorkspacePackagePaths(options?: ProjectSearchOptions): Path[];
}
//# sourceMappingURL=Project.d.ts.map