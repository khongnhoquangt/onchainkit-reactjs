'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const path = require('path');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const path__default = /*#__PURE__*/_interopDefault(path);

/**
 * An immutable class for operating on Node.js module IDs, names, and paths.
 */
class ModulePath {
  constructor(...parts) {
    this.internalPath = '';
    this.isNormalized = false;
    this.internalPath = path__default.default.join(...parts.map(String));
  }

  /**
   * Create and return a new `ModulePath` instance.
   */
  static create(id) {
    return new ModulePath(id);
  }

  /**
   * Convert a module path-like value to a formatted module path string.
   */
  static path(part) {
    return new ModulePath(part).path();
  }

  /**
   * Append path parts to the end of the current path
   * and return a new `ModulePath` instance.
   */
  append(...parts) {
    return new ModulePath(this.internalPath, ...parts);
  }

  /**
   * Return true if the module is scoped within a private namespace
   * (starts with @).
   *
   */
  hasScope() {
    return this.internalPath.startsWith('@');
  }

  /**
   * Return the module name without any trailing import paths,
   * or optionally without the private scope.
   */
  name(withoutScope = false) {
    const parts = this.path().split('/');
    if (this.hasScope() && withoutScope) {
      return parts[1];
    }
    return parts.slice(0, this.hasScope() ? 2 : 1).join('/');
  }

  /**
   * Return the current module path as a normalized string.
   */
  path() {
    if (!this.isNormalized) {
      this.isNormalized = true;
      this.internalPath = path__default.default.normalize(this.internalPath)
      // Node modules must always use forward slashes
      .replace(/\\/g, '/');
    }
    return this.internalPath;
  }

  /**
   * Return the private scope with leading @, or null if not defined.
   */
  scope() {
    if (!this.hasScope()) {
      return null;
    }
    return this.path().slice(0, this.path().indexOf('/'));
  }
  toJSON() {
    return this.path();
  }
  toString() {
    return this.path();
  }
}
exports.ModulePath = ModulePath;
//# sourceMappingURL=ModulePath.cjs.map
