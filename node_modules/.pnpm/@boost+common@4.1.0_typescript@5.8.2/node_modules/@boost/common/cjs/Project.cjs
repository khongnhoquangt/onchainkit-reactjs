'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.cjs');
const glob = require('fast-glob');
const decorators = require('@boost/decorators');
const CommonError = require('./CommonError.cjs');
const Path = require('./Path.cjs');
const json = require('./serializers/json.cjs');
const yaml = require('./serializers/yaml.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const glob__default = /*#__PURE__*/_interopDefault(glob);
var _dec, _dec2, _dec3, _class;
let Project = (_dec = decorators.Memoize(), _dec2 = decorators.Memoize(), _dec3 = decorators.Memoize(), (_class = class Project {
  constructor(root = process.cwd()) {
    this.root = void 0;
    this.root = Path.Path.create(root);
  }

  /**
   * Normalize a glob pattern or path for use on POSIX and Windows machines.
   * @link https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows
   */
  static normalizeGlob(pattern) {
    return pattern.replace(/\\/g, '/');
  }

  /**
   * Create a workspace metadata object composed of absolute file paths.
   */
  createWorkspaceMetadata(jsonPath) {
    const metadata = {};
    const filePath = Path.Path.create(jsonPath);
    const pkgPath = filePath.parent();
    const wsPath = pkgPath.parent();
    metadata.jsonPath = filePath;
    metadata.packagePath = pkgPath;
    metadata.packageName = pkgPath.name();
    metadata.workspacePath = wsPath;
    metadata.workspaceName = wsPath.name();
    return metadata;
  }

  /**
   * Return the contents of the root `package.json`.
   */
  getPackage() {
    const pkgPath = this.root.append('package.json');
    if (!pkgPath.exists()) {
      throw new CommonError.CommonError('PROJECT_NO_PACKAGE');
    }
    return json.load(pkgPath);
  }

  /**
   * Return a list of all workspace globs as they are configured
   * in `package.json` or `lerna.json`. Glob patterns will _always_
   * use forward slashes, regardless of OS.
   */
  getWorkspaceGlobs(options = {}) {
    const pkgPath = this.root.append('package.json');
    const lernaPath = this.root.append('lerna.json');
    const pnpmPath = this.root.append('pnpm-workspace.yaml');
    const workspacePaths = [];

    // Yarn
    if (pkgPath.exists()) {
      const pkg = json.load(pkgPath);
      if (pkg.workspaces) {
        if (Array.isArray(pkg.workspaces)) {
          workspacePaths.push(...pkg.workspaces);
        } else if (Array.isArray(pkg.workspaces.packages)) {
          workspacePaths.push(...pkg.workspaces.packages);
        }
      }
    }

    // Lerna
    if (workspacePaths.length === 0 && lernaPath.exists()) {
      const lerna = json.load(lernaPath);
      if (Array.isArray(lerna.packages)) {
        workspacePaths.push(...lerna.packages);
      }
    }

    // PNPM
    if (workspacePaths.length === 0 && pnpmPath.exists()) {
      const pnpm = yaml.load(pnpmPath);
      if (Array.isArray(pnpm.packages)) {
        workspacePaths.push(...pnpm.packages);
      }
    }
    return workspacePaths.map(workspace => {
      const path = options.relative ? new Path.Path(workspace).path() : this.root.append(workspace).path();
      return Project.normalizeGlob(path);
    });
  }

  /**
   * Return all `package.json`s across all workspaces and their packages.
   * Once loaded, append workspace path metadata.
   */
  getWorkspacePackages() {
    return glob__default.default.sync(this.getWorkspaceGlobs({
      relative: true
    }), {
      absolute: true,
      cwd: this.root.path(),
      onlyDirectories: true
    }).map(pkgPath => {
      const filePath = new Path.Path(pkgPath, 'package.json');
      return {
        metadata: this.createWorkspaceMetadata(filePath),
        package: json.load(filePath)
      };
    });
  }

  /**
   * Return a list of all workspace package paths, resolved against the file system.
   * Absolute file paths are returned unless the `relative` option is true.
   */
  getWorkspacePackagePaths(options = {}) {
    return glob__default.default.sync(this.getWorkspaceGlobs({
      relative: true
    }), {
      absolute: !options.relative,
      cwd: this.root.path(),
      onlyDirectories: true,
      onlyFiles: false
    }).map(Path.Path.create);
  }
}, (_rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "getWorkspaceGlobs", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "getWorkspaceGlobs"), _class.prototype), _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "getWorkspacePackages", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "getWorkspacePackages"), _class.prototype), _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "getWorkspacePackagePaths", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "getWorkspacePackagePaths"), _class.prototype)), _class));
exports.Project = Project;
//# sourceMappingURL=Project.cjs.map
