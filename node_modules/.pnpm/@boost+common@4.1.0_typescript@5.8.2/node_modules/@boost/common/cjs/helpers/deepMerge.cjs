'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const isObject = require('./isObject.cjs');
function merge(prev, next) {
  const base = prev;
  Object.entries(next).forEach(([key, value]) => {
    const prevValue = base[key];
    if (isObject.isObject(prevValue) && isObject.isObject(value)) {
      base[key] = merge(_objectSpread({}, prevValue), value);
    } else if (Array.isArray(prevValue) && Array.isArray(value)) {
      base[key] = merge([...prevValue], value);
    } else {
      base[key] = value;
    }
  });
  return base;
}

/**
 * Can be used to recursively merge objects and arrays, where values on the
 * right-hand side will overwrite values on the left-hand based on the key
 * or index respectively. Furthermore, if the 2nd argument is not provided,
 * it will simply clone the base value.
 *
 * ```ts
 * import { deepMerge } from '@boost/common';
 *
 * const obj = deepMerge({ foo: 123, bar: 'abc' }, { foo: 456, baz: true });
 *
 * // -> { foo: 456, bar: 'abc', baz: true }
 * ```
 */
function deepMerge(base, other) {
  const next = Array.isArray(base) ? merge([], base) : merge({}, base);
  if (other) {
    merge(next, other);
  }
  return next;
}
exports.deepMerge = deepMerge;
//# sourceMappingURL=deepMerge.cjs.map
