'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const prettyMs = require('pretty-ms');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const prettyMs__default = /*#__PURE__*/_interopDefault(prettyMs);

/**
 * Can be used to format a UNIX timestamp in milliseconds into a shorthand human readable format.
 * Wraps the [pretty-ms](https://www.npmjs.com/package/pretty-ms) package to handle infinite
 * numbers, zeros, and more.
 *
 * ```ts
 * import { formatMs } from '@boost/common';
 *
 * formatMs(1337000000); // 15d 11h 23m 20s
 * ```
 */
function formatMs(ms, options) {
  if (!Number.isFinite(ms) || ms === 0) {
    return '0s';
  }
  return prettyMs__default.default(ms, _objectSpread({
    keepDecimalsOnWholeSeconds: true
  }, options));
}
exports.formatMs = formatMs;
//# sourceMappingURL=formatMs.cjs.map
