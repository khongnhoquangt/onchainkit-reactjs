function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Bundled with Packemon: https://packemon.dev
// Platform: node, Support: stable, Format: mjs

import fs from 'fs';

/* eslint-disable no-magic-numbers */

const COMPILER_OPTIONS = {
  allowJs: true,
  allowSyntheticDefaultImports: true,
  esModuleInterop: true,
  noEmit: true
};
const NODE_VERSION = Number.parseFloat(process.version.slice(1));
function isNodeNext(path) {
  return path.endsWith('.cts') || path.endsWith('.mts');
}
function isTypeScript(path) {
  return path.endsWith('.ts') || path.endsWith('.tsx') || isNodeNext(path);
}
function getModuleFormat(url) {
  if (url.endsWith('.json')) {
    return 'json';
  }
  return NODE_VERSION >= 12 ? 'module' : 'commonjs';
}
function getModuleFromNodeVersion(ts, nodeNext) {
  if (nodeNext) {
    return ts.ModuleKind.NodeNext;
  }
  if (NODE_VERSION >= 18) {
    return ts.ModuleKind.ES2022;
  }
  if (NODE_VERSION >= 16) {
    return ts.ModuleKind.ES2020;
  }
  if (NODE_VERSION >= 12) {
    return ts.ModuleKind.ES2015;
  }
  return ts.ModuleKind.CommonJS;
}
function getTargetFromNodeVersion(ts) {
  if (NODE_VERSION >= 18) {
    return ts.ScriptTarget.ES2022;
  }
  if (NODE_VERSION >= 17) {
    return ts.ScriptTarget.ES2021;
  }
  if (NODE_VERSION >= 16) {
    return ts.ScriptTarget.ES2020;
  }
  if (NODE_VERSION >= 15) {
    return ts.ScriptTarget.ES2019;
  }
  if (NODE_VERSION >= 14) {
    return ts.ScriptTarget.ES2018;
  }
  if (NODE_VERSION >= 13) {
    return ts.ScriptTarget.ES2017;
  }
  if (NODE_VERSION >= 12) {
    return ts.ScriptTarget.ES2016;
  }
  return ts.ScriptTarget.ES5;
}

// https://nodejs.org/api/esm.html#esm_loaders
const FILE_WITH_EXT_PATTERN = /\.[a-z]+$/;
async function loadTypeScript() {
  try {
    return (await import('typescript')).default;
  } catch {
    return null;
  }
}
async function transform(url, source) {
  const ts = await loadTypeScript();
  if (!ts) {
    throw new Error(`\`typescript\` package required for transforming file "${url}".`);
  }
  const nodeNext = isNodeNext(url);
  return ts.transpileModule(String(source), {
    compilerOptions: _objectSpread(_objectSpread({}, COMPILER_OPTIONS), {}, {
      module: getModuleFromNodeVersion(ts, nodeNext),
      moduleResolution: nodeNext ? ts.ModuleResolutionKind.NodeNext : ts.ModuleResolutionKind.NodeJs,
      resolveJsonModule: false,
      target: getTargetFromNodeVersion(ts)
    }),
    fileName: url
  }).outputText;
}
const resolve = async (specifier, context, defaultResolve) => {
  if (isTypeScript(specifier)) {
    return {
      url: new URL(specifier, context.parentURL).href
    };
  }

  // Relative import doesn't have an extension, so attempt to find a TS file
  if (specifier.startsWith('.') && !FILE_WITH_EXT_PATTERN.test(specifier)) {
    for (const ext of ['.ts', '.tsx', '.cts', '.mts']) {
      const url = new URL(specifier + ext, context.parentURL);
      if (fs.existsSync(url)) {
        return {
          url: url.href
        };
      }
    }
  }
  return defaultResolve(specifier, context);
};
const load = async (url, context, defaultLoad) => {
  if (isTypeScript(url)) {
    const format = getModuleFormat(url);
    if (format === 'commonjs') {
      return {
        format
      };
    }
    const _await$defaultLoad = await defaultLoad(url, {
        format
      }),
      rawSource = _await$defaultLoad.source;
    return {
      format,
      source: await transform(url, String(rawSource))
    };
  }
  return defaultLoad(url, context);
};
const typescript = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
  __proto__: null,
  resolve,
  load
}, Symbol.toStringTag, {
  value: 'Module'
}));
export { load as l, resolve as r, typescript as t };
//# sourceMappingURL=bundle-2f129f90.mjs.map
