'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const osLocale = require('os-locale');
const debug = require('./debug.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const osLocale__default = /*#__PURE__*/_interopDefault(osLocale);
class LocaleDetector {
  constructor() {
    this.locale = 'en';
    this.type = 'languageDetector';
  }
  init() {
    // We don't need this but is required by the interface
  }
  cacheUserLanguage(locale) {
    this.locale = locale;
  }
  detect() {
    if (this.locale) {
      debug.debug('Locale "%s" manually provided', this.locale);
      return this.locale;
    }
    return this.detectFromArgv() ?? this.detectFromOS();
  }
  detectFromArgv() {
    const args = process.argv;
    const index = args.indexOf('--locale');
    const nextIndex = index + 1;
    if (index >= 0 && args[nextIndex] && !args[nextIndex].startsWith('-')) {
      const locale = args[nextIndex];
      debug.debug('Locale "%s" detected from --locale option', locale);
      return locale;
    }
    return undefined;
  }
  detectFromOS() {
    const locale = osLocale__default.default.sync().replace(/_/gu, '-');
    debug.debug('Locale "%s" detected from operating system', locale);
    return locale;
  }
}
exports.LocaleDetector = LocaleDetector;
//# sourceMappingURL=LocaleDetector.cjs.map
