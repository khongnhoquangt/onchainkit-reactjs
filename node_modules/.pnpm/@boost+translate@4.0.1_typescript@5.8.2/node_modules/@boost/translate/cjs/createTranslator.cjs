'use strict';

const _excluded = ["interpolation", "locale"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const i18next = require('i18next');
const common = require('@boost/common');
const debug = require('./debug.cjs');
const FileBackend = require('./FileBackend.cjs');
const LocaleDetector = require('./LocaleDetector.cjs');
const TranslateError = require('./TranslateError.cjs');

// istanbul ignore next
function handleError(error) {
  if (error) {
    throw error;
  }
}
/**
 * Create and return a `Translator` instance with the defined namespace.
 * A list of resource paths are required for locating translation files.
 */
function createTranslator(namespace, resourcePath, options = {}) {
  const _options$autoDetect = options.autoDetect,
    autoDetect = _options$autoDetect === void 0 ? true : _options$autoDetect,
    _options$debug = options.debug,
    debugOpt = _options$debug === void 0 ? false : _options$debug,
    _options$fallbackLoca = options.fallbackLocale,
    fallbackLocale = _options$fallbackLoca === void 0 ? 'en' : _options$fallbackLoca,
    locale = options.locale,
    _options$lookupType = options.lookupType,
    lookupType = _options$lookupType === void 0 ? 'all' : _options$lookupType,
    _options$resourceForm = options.resourceFormat,
    resourceFormat = _options$resourceForm === void 0 ? 'yaml' : _options$resourceForm;
  const namespaces = common.toArray(namespace);
  const resourcePaths = common.toArray(resourcePath).map(common.Path.create);
  if (namespaces.length === 0) {
    throw new TranslateError.TranslateError('NAMESPACE_REQUIRED');
  } else if (resourcePaths.length === 0) {
    throw new TranslateError.TranslateError('RESOURCES_REQUIRED');
  } else if (!autoDetect && !locale) {
    throw new TranslateError.TranslateError('LOCALE_REQUIRED');
  }
  debug.debug('New translator created: %s namespace(s)', namespaces.join(', '));
  const translator = i18next.createInstance().use(new FileBackend.FileBackend());
  if (autoDetect) {
    translator.use(new LocaleDetector.LocaleDetector());
  }
  void translator.init({
    backend: {
      format: resourceFormat,
      paths: resourcePaths
    },
    cleanCode: true,
    debug: debugOpt,
    defaultNS: namespaces[0],
    fallbackLng: fallbackLocale,
    initImmediate: false,
    lng: locale,
    load: lookupType,
    lowerCaseLng: false,
    ns: namespaces,
    returnEmptyString: true,
    returnNull: true
  }, handleError);
  function msg(key, params, _ref = {}) {
    let interpolation = _ref.interpolation,
      lng = _ref.locale,
      opts = _objectWithoutProperties(_ref, _excluded);
    return translator.t(key, _objectSpread(_objectSpread({
      interpolation: _objectSpread({
        escapeValue: false
      }, interpolation)
    }, opts), {}, {
      lng,
      replace: params
    }));
  }
  msg.direction = translator.dir();
  msg.locale = translator.language;
  msg.changeLocale = async lang => {
    debug.debug('Locale manually changed to "%s"', lang);
    await translator.changeLanguage(lang);
    msg.direction = translator.dir();
    msg.locale = translator.language;
  };
  if (process.env.NODE_ENV === 'test') {
    msg.i18n = translator;
  }
  return msg;
}
exports.createTranslator = createTranslator;
//# sourceMappingURL=createTranslator.cjs.map
