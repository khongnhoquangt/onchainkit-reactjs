import { Contract } from '@boost/common';
import { BailEvent, Event } from '@boost/event';
import { Context } from './Context';
import { Action, Hierarchical, Runnable } from './types';
export declare abstract class WorkUnit<Options extends object, Input = unknown, Output = Input> extends Contract<Options> implements Runnable<Input, Output>, Hierarchical {
    depth: number;
    index: number;
    output?: Output;
    input?: Input;
    startTime: number;
    statusText: string;
    stopTime: number;
    /**
     * Called when an execution fails.
     * @category Events
     */
    readonly onFail: Event<[Error | null, Input], string>;
    /**
     * Called when an execution succeeds.
     * @category Events
     */
    readonly onPass: Event<[Output, Input], string>;
    /**
     * Called before a work unit is executed. Can return `true` to skip the work unit.
     * @category Events
     */
    readonly onRun: BailEvent<[Input], string>;
    /**
     * Called when an execution is skipped.
     * @category Events
     */
    readonly onSkip: Event<[Input], string>;
    readonly title: string;
    private action;
    private status;
    constructor(title: string, action: Action<any, Input, Output>, options?: Options);
    /**
     * Return a unique hierarchical ID.
     */
    get id(): string;
    /**
     * Return true if the task failed when executing.
     */
    hasFailed(): boolean;
    /**
     * Return true if the task executed successfully.
     */
    hasPassed(): boolean;
    /**
     * Return true if the task has been completed in any form.
     */
    isComplete(): boolean;
    /**
     * Return true if the task has not been executed yet.
     */
    isPending(): boolean;
    /**
     * Return true if the task is currently running.
     */
    isRunning(): boolean;
    /**
     * Return true if the task was or will be skipped.
     */
    isSkipped(): boolean;
    /**
     * Run the current task by executing it and performing any before and after processes.
     */
    run(context: Context, value: Input): Promise<Output>;
    /**
     * Mark a task as skipped if the condition is true.
     */
    skip(condition?: boolean): this;
}
//# sourceMappingURL=WorkUnit.d.ts.map