import { Blueprint, Schemas } from '@boost/common/optimal';
import { Context } from './Context';
import { Pipeline } from './Pipeline';
import { Action, AggregatedResult } from './types';
import { WorkUnit } from './WorkUnit';
export declare abstract class ParallelPipeline<Options extends object, Ctx extends Context, Input = unknown, Output = Input> extends Pipeline<Options, Ctx, Input, Output> {
    blueprint(schemas: Schemas): Blueprint<object>;
    /**
     * Add a work unit to the list of items to process.
     */
    add(title: string, action: Action<Ctx, Input, Output>, scope?: unknown): this;
    add(workUnit: WorkUnit<{}, Input, Output>): this;
    /**
     * Aggregate and partition errors and results into separate collections.
     */
    protected aggregateResult(responses: (Error | Output)[]): AggregatedResult<Output>;
    /**
     * Run and process the work unit's asynchronously.
     */
    abstract run(): Promise<unknown>;
}
//# sourceMappingURL=ParallelPipeline.d.ts.map