import { BailEvent, Event } from '@boost/event';
import { AnyPipeline, AnyWorkUnit } from './types';
export declare class Monitor {
    /**
     * Called after a pipeline class has ran.
     * @category Events
     */
    readonly onPipelineAfterRun: Event<[AnyPipeline], string>;
    /**
     * Called before a pipeline class is ran.
     * @category Events
     */
    readonly onPipelineBeforeRun: Event<[AnyPipeline, unknown], string>;
    /**
     * Called before a pipeline's work unit is executed.
     * @category Events
     */
    readonly onPipelineRunWorkUnit: Event<[AnyPipeline, AnyWorkUnit, unknown], string>;
    /**
     * Called when any work unit has failed.
     * @category Events
     */
    readonly onWorkUnitFail: Event<[AnyWorkUnit, Error | null, unknown], string>;
    /**
     * Called when any work unit has passed.
     * @category Events
     */
    readonly onWorkUnitPass: Event<[AnyWorkUnit, unknown, unknown], string>;
    /**
     * Called when any work unit is ran.
     * @category Events
     */
    readonly onWorkUnitRun: BailEvent<[AnyWorkUnit, unknown], string>;
    /**
     * Called when any work unit is skipped.
     * @category Events
     */
    readonly onWorkUnitSkip: Event<[AnyWorkUnit, unknown], string>;
    /**
     * Monitor events for the provided pipeline, its work units, and all other
     * pipelines and work units down the hierarchical tree.
     */
    monitor(pipeline: AnyPipeline): this;
}
//# sourceMappingURL=Monitor.d.ts.map