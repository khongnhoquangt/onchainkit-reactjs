import { Contract } from '@boost/common';
import { Debugger } from '@boost/debug';
import { Event } from '@boost/event';
import { Context } from './Context';
import { Monitor } from './Monitor';
import { Hierarchical } from './types';
import { WorkUnit } from './WorkUnit';
export declare abstract class Pipeline<Options extends object, Ctx extends Context, Input, Output> extends Contract<Options> implements Hierarchical {
    depth: number;
    index: number;
    readonly context: Ctx;
    readonly debug: Debugger;
    readonly value: Input;
    /**
     * Called after the pipeline executes work units.
     * @category Events
     */
    readonly onAfterRun: Event<unknown[], string>;
    /**
     * Called before the pipeline executes work units.
     * @category Events
     */
    readonly onBeforeRun: Event<[Input], string>;
    /**
     * Called before a single work unit is executed.
     * @category Events
     */
    readonly onRunWorkUnit: Event<[WorkUnit<{}, Input, Output>, Input], string>;
    protected monitorInstance: Monitor | null;
    protected work: WorkUnit<{}, Input, Output>[];
    constructor(context: Ctx, value?: Input, options?: Options);
    /**
     * Return a unique hierarchical ID.
     */
    get id(): string;
    /**
     * Return a list of registered work units for the current pipeline.
     */
    getWorkUnits(): WorkUnit<{}, Input, Output>[];
    /**
     * Monitor all hierarchical pipelines, routines, and tasks being executed,
     * by listening to all applicable events.
     */
    monitor(monitor: Monitor): this;
}
//# sourceMappingURL=Pipeline.d.ts.map