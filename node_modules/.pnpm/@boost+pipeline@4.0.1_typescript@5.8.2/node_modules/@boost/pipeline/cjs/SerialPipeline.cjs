'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const createWorkUnit = require('./createWorkUnit.cjs');
const Pipeline = require('./Pipeline.cjs');
class SerialPipeline extends Pipeline.Pipeline {
  constructor(...args) {
    super(...args);
    // Unknown does not work here as the output type changes for each
    // node in the linked list chain.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.root = this;
  }
  // Empty blueprint so that sub-classes may type correctly
  blueprint(schemas) {
    return {};
  }

  /**
   * Pipe a work unit to be ran with the return value of the previous work unit.
   */

  pipe(titleOrWorkUnit, action, scope) {
    const workUnit = createWorkUnit.createWorkUnit(titleOrWorkUnit, action, scope);
    workUnit.depth = this.depth;
    workUnit.index = this.getWorkUnits().length;
    this.root.work.push(workUnit);

    // @ts-expect-error How to type this?
    const next = new this.constructor(this.context, this.value, this.options);
    next.depth = this.depth;
    next.root = this.root;
    if (this.monitorInstance) {
      next.monitor(this.monitorInstance);
    }
    return next;
  }

  /**
   * Traverse the linked list to return a list of work units in defined order.
   */
  getWorkUnits() {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return this.root.work;
  }

  /**
   * Run and process the work units synchronously.
   */
}

exports.SerialPipeline = SerialPipeline;
//# sourceMappingURL=SerialPipeline.cjs.map
