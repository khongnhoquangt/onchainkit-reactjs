'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const kebabCase = require('lodash/kebabCase');
const common = require('@boost/common');
const debug = require('@boost/debug');
const event = require('@boost/event');
const debug$1 = require('./debug.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const kebabCase__default = /*#__PURE__*/_interopDefault(kebabCase);
class Pipeline extends common.Contract {
  constructor(context, value, options) {
    super(options);
    this.depth = 0;
    this.index = 0;
    this.context = void 0;
    this.debug = void 0;
    this.value = void 0;
    /**
     * Called after the pipeline executes work units.
     * @category Events
     */
    this.onAfterRun = new event.Event('after-run');
    /**
     * Called before the pipeline executes work units.
     * @category Events
     */
    this.onBeforeRun = new event.Event('before-run');
    /**
     * Called before a single work unit is executed.
     * @category Events
     */
    this.onRunWorkUnit = new event.Event('run-work-unit');
    this.monitorInstance = null;
    this.work = [];
    const name = this.constructor.name;
    this.context = context;
    this.debug = debug.createDebugger(kebabCase__default.default(name));

    // This is technically invalid, but we want to allow optional values.
    // Luckily the input type defaults to `unknown`, so it forces consumers to validate.
    // @ts-expect-error Allow
    this.value = value;
    debug$1.debug('New %S created', name);
  }

  /**
   * Return a unique hierarchical ID.
   */
  get id() {
    return `pipeline[${this.depth}:${this.index}]`;
  }

  /**
   * Return a list of registered work units for the current pipeline.
   */
  getWorkUnits() {
    return this.work;
  }

  /**
   * Monitor all hierarchical pipelines, routines, and tasks being executed,
   * by listening to all applicable events.
   */
  monitor(monitor) {
    this.monitorInstance = monitor.monitor(this);
    return this;
  }
}
exports.Pipeline = Pipeline;
//# sourceMappingURL=Pipeline.cjs.map
