'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const common = require('@boost/common');
const createWorkUnit = require('./createWorkUnit.cjs');
const Pipeline = require('./Pipeline.cjs');
class ParallelPipeline extends Pipeline.Pipeline {
  // Empty blueprint so that sub-classes may type correctly
  blueprint(schemas) {
    return {};
  }

  /**
   * Add a work unit to the list of items to process.
   */

  add(titleOrWorkUnit, action, scope) {
    const workUnit = createWorkUnit.createWorkUnit(titleOrWorkUnit, action, scope);
    workUnit.depth = this.depth;
    workUnit.index = this.work.length;
    this.work.push(workUnit);
    return this;
  }

  /**
   * Aggregate and partition errors and results into separate collections.
   */
  aggregateResult(responses) {
    const errors = [];
    const results = [];
    responses.forEach(response => {
      if (common.instanceOf(response, Error)) {
        errors.push(response);
      } else {
        results.push(response);
      }
    });
    return {
      errors,
      results
    };
  }

  /**
   * Run and process the work unit's asynchronously.
   */
}

exports.ParallelPipeline = ParallelPipeline;
//# sourceMappingURL=ParallelPipeline.cjs.map
