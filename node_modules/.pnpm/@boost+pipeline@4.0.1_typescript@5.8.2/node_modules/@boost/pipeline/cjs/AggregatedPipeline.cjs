'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const debug = require('./debug.cjs');
const ParallelPipeline = require('./ParallelPipeline.cjs');
class AggregatedPipeline extends ParallelPipeline.ParallelPipeline {
  /**
   * Execute all work units in parallel with a value being passed to each work unit.
   * Work units will synchronize regardless of race conditions and errors.
   */
  async run() {
    const context = this.context,
      value = this.value;
    const work = this.getWorkUnits();
    debug.debug('Running %d as an aggregate', work.length);
    this.onBeforeRun.emit([value]);
    const result = await Promise.all(work.map(async unit => {
      this.onRunWorkUnit.emit([unit, value]);
      try {
        return await unit.run(context, value);
      } catch (error) {
        return error;
      }
    })).then(responses => this.aggregateResult(responses));
    this.onAfterRun.emit([]);
    return result;
  }
}
exports.AggregatedPipeline = AggregatedPipeline;
//# sourceMappingURL=AggregatedPipeline.cjs.map
