'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const React = require('react');
const ink = require('ink');
const args = require('@boost/args');
const common = require('@boost/common');
const terminal = require('@boost/terminal');
const CLIError = require('../CLIError.cjs');
const constants = require('../constants.cjs');
const applyStyle = require('../helpers/applyStyle.cjs');
const translate = require('../translate.cjs');
const Header = require('./Header.cjs');
const Style = require('./Style.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);

/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
/**
 * A React component that renders a failure state for errors and warnings.
 */
class Failure extends React__default.default.Component {
  shouldHideStackTrace() {
    const _this$props = this.props,
      error = _this$props.error,
      hideStackTrace = _this$props.hideStackTrace;
    return hideStackTrace || !error.stack || error instanceof common.ExitError || error instanceof args.ParseError || error instanceof args.ValidationError || error instanceof CLIError.CLIError || process.env.NODE_ENV === 'test';
  }
  renderCodeFrame() {
    const _this$props2 = this.props,
      binName = _this$props2.binName,
      commandLine = _this$props2.commandLine,
      _this$props2$delimite = _this$props2.delimiter,
      delimiter = _this$props2$delimite === void 0 ? constants.DELIMITER : _this$props2$delimite,
      error = _this$props2.error;
    if (!binName || !commandLine) {
      return null;
    }
    const width = terminal.screen.size().columns;
    let type = 'failure';
    let cmd = `${delimiter}${binName} ${commandLine}`;
    let arg = '';
    if (error instanceof args.ParseError) {
      arg = error.arg;
    } else if (error instanceof args.ValidationError) {
      type = 'warning';
      arg = `--${error.option}`;
    } else {
      return null;
    }
    let idx = cmd.indexOf(arg);
    if (idx < 0) {
      return null;
    }
    while (idx + arg.length > width) {
      const half = Math.round(width / 2);
      cmd = `… ${cmd.slice(half + 2)}`;
      idx -= half;
    }
    if (cmd.length > width) {
      cmd = `${cmd.slice(0, width - 2)} …`;
    }
    return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(ink.Box, {
      marginTop: constants.SPACING_ROW
    }, /*#__PURE__*/React__default.default.createElement(Style.Style, {
      type: "muted"
    }, cmd.replace(arg, applyStyle.applyStyle(arg, type)))), /*#__PURE__*/React__default.default.createElement(ink.Box, null, /*#__PURE__*/React__default.default.createElement(Style.Style, {
      type: type
    }, '└'.padStart(idx + 1, ' '), '─'.repeat(arg.length - 2), '┘')));
  }
  renderStackTrace() {
    const error = this.props.error;
    if (this.shouldHideStackTrace()) {
      return null;
    }

    // Stack traces are not deterministic so we cannot snapshot this
    // istanbul ignore next
    return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Header.Header, {
      label: translate.msg('cli:labelStackTrace'),
      type: "muted"
    }), /*#__PURE__*/React__default.default.createElement(ink.Box, {
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(Style.Style, {
      type: "muted"
    }, error.stack.replace(`${error.constructor.name}: ${error.message}\n`, ''))));
  }
  renderWarnings() {
    const _this$props$warnings = this.props.warnings,
      warnings = _this$props$warnings === void 0 ? [] : _this$props$warnings;
    if (warnings.length === 0) {
      return null;
    }
    return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Header.Header, {
      label: translate.msg('cli:labelWarnings'),
      type: "warning"
    }), warnings.map(warn => /*#__PURE__*/React__default.default.createElement(ink.Box, {
      key: warn.message,
      flexDirection: "row",
      paddingLeft: constants.SPACING_COL
    }, /*#__PURE__*/React__default.default.createElement(ink.Box, {
      width: 2
    }, /*#__PURE__*/React__default.default.createElement(ink.Text, null, '–')), /*#__PURE__*/React__default.default.createElement(ink.Box, {
      flexGrow: 1
    }, /*#__PURE__*/React__default.default.createElement(ink.Text, null, warn.message)))));
  }
  render() {
    const error = this.props.error;
    return /*#__PURE__*/React__default.default.createElement(ink.Box, {
      flexDirection: "column",
      marginBottom: 1
    }, /*#__PURE__*/React__default.default.createElement(Header.Header, {
      label: translate.msg('cli:labelError'),
      type: "failure"
    }), /*#__PURE__*/React__default.default.createElement(ink.Box, {
      flexDirection: "column",
      paddingLeft: constants.SPACING_COL
    }, /*#__PURE__*/React__default.default.createElement(ink.Box, null, /*#__PURE__*/React__default.default.createElement(ink.Text, null, error.message)), this.renderCodeFrame()), this.renderWarnings(), this.renderStackTrace());
  }
}
exports.Failure = Failure;
//# sourceMappingURL=Failure.cjs.map
