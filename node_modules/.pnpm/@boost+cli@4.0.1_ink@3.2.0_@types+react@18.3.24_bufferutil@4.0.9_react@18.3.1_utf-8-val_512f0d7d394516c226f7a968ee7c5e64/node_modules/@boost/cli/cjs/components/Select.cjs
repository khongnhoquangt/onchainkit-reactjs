'use strict';

const _excluded = ["defaultSelected", "limit", "onSubmit", "options", "overflowAfterLabel", "overflowBeforeLabel", "scrollType"],
  _excluded2 = ["highlightedIndex"];
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const React = require('react');
const ink = require('ink');
const common = require('@boost/common');
const terminal = require('@boost/terminal');
require('../hooks/index.cjs');
const DividerRow = require('./internal/DividerRow.cjs');
const OptionRow = require('./internal/OptionRow.cjs');
const Prompt = require('./internal/Prompt.cjs');
const ScrollableList = require('./internal/ScrollableList.cjs');
const Selected = require('./internal/Selected.cjs');
const useListNavigation = require('../hooks/useListNavigation.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);
function normalizeOptions(options) {
  return options.map((option, index) => {
    if (common.isObject(option)) {
      return _objectSpread({
        divider: false,
        index,
        label: '',
        value: null
      }, option);
    }
    return {
      divider: false,
      index,
      label: String(option),
      value: option
    };
  });
}

/**
 * A React component that renders a select menu with options, where a single option can be seleted.
 * Options can be navigated with arrow keys, selected with "space", and submitted with "enter".
 */
function Select(props) {
  const defaultSelected = props.defaultSelected,
    limit = props.limit,
    onSubmit = props.onSubmit,
    baseOptions = props.options,
    overflowAfterLabel = props.overflowAfterLabel,
    overflowBeforeLabel = props.overflowBeforeLabel,
    scrollType = props.scrollType,
    restProps = _objectWithoutProperties(props, _excluded);
  const options = React.useMemo(() => normalizeOptions(baseOptions), [baseOptions]);
  const _React$useState = React.useState(defaultSelected ?? null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    selectedValue = _React$useState2[0],
    setSelectedValue = _React$useState2[1];
  const _useListNavigation$us = useListNavigation.useListNavigation(options),
    highlightedIndex = _useListNavigation$us.highlightedIndex,
    arrowKeyProps = _objectWithoutProperties(_useListNavigation$us, _excluded2);
  const _ink$useFocus = ink.useFocus({
      autoFocus: true
    }),
    isFocused = _ink$useFocus.isFocused;
  const handleSpace = React.useCallback(() => {
    const value = options[highlightedIndex].value;
    if (value !== null) {
      if (value === selectedValue) {
        setSelectedValue(null);
      } else {
        setSelectedValue(value);
      }
    }
  }, [highlightedIndex, options, selectedValue]);
  const handleReturn = React.useCallback(() => {
    let value = selectedValue;
    if (value === null) {
      value = options[highlightedIndex].value;
      setSelectedValue(value);
    }
    onSubmit?.(value);

    // Trigger submit
    return true;
  }, [selectedValue, onSubmit, options, highlightedIndex]);
  const renderItem = React.useCallback(option => {
    if (option.divider) {
      return /*#__PURE__*/React__default.default.createElement(DividerRow.DividerRow, {
        key: option.index,
        label: option.label
      });
    }
    return /*#__PURE__*/React__default.default.createElement(OptionRow.OptionRow, {
      key: option.index,
      highlighted: highlightedIndex === option.index,
      icon: terminal.figures.pointerSmall,
      iconActive: terminal.figures.pointer,
      label: option.label,
      selected: selectedValue === option.value
    });
  }, [highlightedIndex, selectedValue]);
  return /*#__PURE__*/React__default.default.createElement(Prompt.Prompt, _rollupPluginBabelHelpers.extends({}, restProps, arrowKeyProps, {
    afterLabel: selectedValue !== null && /*#__PURE__*/React__default.default.createElement(Selected.Selected, {
      value: selectedValue
    }),
    focused: isFocused,
    value: selectedValue,
    onReturn: handleReturn,
    onSpace: handleSpace
  }), /*#__PURE__*/React__default.default.createElement(ScrollableList.ScrollableList, {
    currentIndex: highlightedIndex,
    items: options,
    limit: limit,
    overflowAfterLabel: overflowAfterLabel,
    overflowBeforeLabel: overflowBeforeLabel,
    renderItem: renderItem,
    scrollType: scrollType
  }));
}
exports.Select = Select;
exports.normalizeOptions = normalizeOptions;
//# sourceMappingURL=Select.cjs.map
