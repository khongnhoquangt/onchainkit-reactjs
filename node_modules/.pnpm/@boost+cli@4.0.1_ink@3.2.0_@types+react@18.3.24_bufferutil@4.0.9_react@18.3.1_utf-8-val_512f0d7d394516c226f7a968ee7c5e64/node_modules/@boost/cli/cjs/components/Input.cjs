'use strict';

const _excluded = ["defaultValue", "hideCursor", "mask", "onChange", "onSubmit", "placeholder"];
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const React = require('react');
const ink = require('ink');
const Cursor = require('./internal/Cursor.cjs');
const Prompt = require('./internal/Prompt.cjs');
const Style = require('./Style.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);

/**
 * A React component that renders an input field, allowing the user to enter information.
 */
function Input(props) {
  const _props$defaultValue = props.defaultValue,
    defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
    hideCursor = props.hideCursor,
    mask = props.mask,
    onChange = props.onChange,
    onSubmit = props.onSubmit,
    placeholder = props.placeholder,
    restProps = _objectWithoutProperties(props, _excluded);
  const _React$useState = React.useState(defaultValue),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  const _React$useState3 = React.useState(0),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    cursorPosition = _React$useState4[0],
    setCursorPosition = _React$useState4[1];
  const _React$useState5 = React.useState(false),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    isDirty = _React$useState6[0],
    setDirty = _React$useState6[1];
  const _ink$useFocus = ink.useFocus({
      autoFocus: true
    }),
    isFocused = _ink$useFocus.isFocused;
  const handleReturn = React.useCallback(() => {
    onSubmit(value.trim());

    // Trigger submit
    return true;
  }, [onSubmit, value]);

  // Remove characters
  const handleBackspace = React.useCallback(() => {
    if (!cursorPosition || !value) {
      return;
    }
    const nextValue = cursorPosition >= value.length ? value.slice(0, -1) : value.slice(0, cursorPosition - 1) + value.slice(cursorPosition);
    setCursorPosition(cursorPosition - 1);
    setValue(nextValue);
    onChange?.(nextValue);
  }, [cursorPosition, onChange, value]);

  // Add characters
  const handleInput = React.useCallback(input => {
    const nextValue = cursorPosition >= value.length ? value + input : value.slice(0, cursorPosition) + input + value.slice(cursorPosition);
    setCursorPosition(cursorPosition + input.length);
    setValue(nextValue);
    setDirty(true);
    onChange?.(nextValue);
  }, [cursorPosition, onChange, value]);

  // Navigation
  const handleKeyUp = React.useCallback(() => {
    setCursorPosition(0);
  }, []);
  const handleKeyDown = React.useCallback(() => {
    setCursorPosition(value.length);
  }, [value]);
  const handleKeyLeft = React.useCallback(() => {
    setCursorPosition(prev => Math.max(prev - 1, 0));
  }, []);
  const handleKeyRight = React.useCallback(() => {
    setCursorPosition(prev => Math.min(prev + 1, value.length));
  }, [value]);
  return /*#__PURE__*/React__default.default.createElement(Prompt.Prompt, _rollupPluginBabelHelpers.extends({}, restProps, {
    afterLabel: value === '' && !isDirty && placeholder ? /*#__PURE__*/React__default.default.createElement(Style.Style, {
      type: "muted"
    }, placeholder) : /*#__PURE__*/React__default.default.createElement(Cursor.Cursor, {
      focused: isFocused,
      hideCursor: hideCursor,
      position: cursorPosition,
      value: mask === undefined ? value : mask.repeat(value.length)
    }),
    focused: isFocused,
    value: value,
    onBackspace: handleBackspace,
    onDelete: handleBackspace,
    onInput: handleInput,
    onKeyDown: handleKeyDown,
    onKeyLeft: handleKeyLeft,
    onKeyRight: handleKeyRight,
    onKeyUp: handleKeyUp,
    onReturn: handleReturn
  }));
}
exports.Input = Input;
//# sourceMappingURL=Input.cjs.map
