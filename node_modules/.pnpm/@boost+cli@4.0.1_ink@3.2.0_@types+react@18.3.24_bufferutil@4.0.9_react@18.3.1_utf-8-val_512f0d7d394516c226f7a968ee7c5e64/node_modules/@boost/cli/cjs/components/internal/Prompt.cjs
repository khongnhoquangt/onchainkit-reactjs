'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const React = require('react');
const ink = require('ink');
const terminal = require('@boost/terminal');
const useIsMounted = require('../../hooks/useIsMounted.cjs');
const Style = require('../Style.cjs');
const Label = require('./Label.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);
function Prompt({
  afterLabel,
  beforeLabel,
  children,
  focused,
  label,
  onBackspace,
  onDelete,
  onEscape,
  onInput,
  onKeyDown,
  onKeyLeft,
  onKeyRight,
  onKeyUp,
  onPageDown,
  onPageUp,
  onReturn,
  onSpace,
  onTab,
  prefix = '?',
  validate,
  value
}) {
  const _ink$useFocusManager = ink.useFocusManager(),
    focusNext = _ink$useFocusManager.focusNext;
  const _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    error = _React$useState2[0],
    setError = _React$useState2[1];
  const _React$useState3 = React.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    submitted = _React$useState4[0],
    setSubmitted = _React$useState4[1];
  const mounted = useIsMounted.useIsMounted();
  const attemptSubmit = React.useCallback(commit => {
    let doSubmit = false;
    try {
      setError(null);
      doSubmit = !!commit();
    } catch (error_) {
      doSubmit = false;
      if (error_ instanceof Error) {
        setError(error_);
      }
    }
    if (!mounted.current) {
      return;
    }
    setSubmitted(doSubmit);
    if (doSubmit) {
      focusNext();
    }
  }, [focusNext, mounted]);
  ink.useInput(
  // eslint-disable-next-line complexity
  (input, key) => {
    if (!mounted.current) {
      return;
    }
    if (key.upArrow) {
      onKeyUp?.(key);
    } else if (key.downArrow) {
      onKeyDown?.(key);
    } else if (key.leftArrow) {
      onKeyLeft?.(key);
    } else if (key.rightArrow) {
      onKeyRight?.(key);
    } else if (key.pageUp) {
      onPageUp?.(key);
    } else if (key.pageDown) {
      onPageDown?.(key);
    } else if (key.return) {
      // Only run if we want validation or to submit,
      // otherwise we trigger an unwanted submitted state
      if (onReturn || validate) {
        attemptSubmit(() => {
          if (value !== null) {
            validate?.(value);
          }
          return onReturn?.();
        });
      }
    } else if (key.tab) {
      onTab?.(key);
    } else if (key.backspace) {
      onBackspace?.(key);
      setSubmitted(false);
    } else if (key.delete) {
      onDelete?.(key);
      setSubmitted(false);
    } else if (key.escape) {
      onEscape?.(key);
    } else if (input === ' ' && onSpace) {
      onSpace(key);
      setSubmitted(false);
    } else {
      attemptSubmit(() => onInput?.(input, key));
    }
  }, {
    isActive: focused
  });
  return /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React__default.default.createElement(ink.Box, null, submitted && !error && /*#__PURE__*/React__default.default.createElement(Style.Style, {
    type: "success"
  }, terminal.figures.tick), !submitted && error && /*#__PURE__*/React__default.default.createElement(Style.Style, {
    type: "failure"
  }, terminal.figures.cross), !submitted && !error && /*#__PURE__*/React__default.default.createElement(Style.Style, {
    type: "info"
  }, prefix)), beforeLabel, /*#__PURE__*/React__default.default.createElement(ink.Box, {
    marginLeft: 1,
    marginRight: 1
  }, /*#__PURE__*/React__default.default.createElement(Label.Label, null, label)), afterLabel), error && /*#__PURE__*/React__default.default.createElement(ink.Box, {
    marginLeft: 2
  }, /*#__PURE__*/React__default.default.createElement(Style.Style, {
    type: "failure"
  }, error.message)), children && focused && /*#__PURE__*/React__default.default.createElement(ink.Box, {
    flexDirection: "column",
    marginLeft: 2
  }, children));
}
exports.Prompt = Prompt;
//# sourceMappingURL=Prompt.cjs.map
