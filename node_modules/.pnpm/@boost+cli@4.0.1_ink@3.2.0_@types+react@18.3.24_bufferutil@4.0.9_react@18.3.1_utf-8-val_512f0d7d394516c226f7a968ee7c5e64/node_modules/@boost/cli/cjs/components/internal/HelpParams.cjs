'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const React = require('react');
const ink = require('ink');
const constants = require('../../constants.cjs');
require('../../helpers/index.cjs');
const translate = require('../../translate.cjs');
const Header = require('../Header.cjs');
const formatType = require('../../helpers/formatType.cjs');
const getLongestWidth = require('../../helpers/getLongestWidth.cjs');
const formatDescription = require('../../helpers/formatDescription.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);
function gatherParamTags(config) {
  const tags = [];
  if (config.required) {
    tags.push(translate.msg('cli:tagRequired'));
  }
  return tags;
}
function HelpParams({
  config,
  params
}) {
  const labels = React.useMemo(() => params.map((p, index) => `${p.label ?? index} ${formatType.formatType(p)}`), [params]);
  const labelWidth = getLongestWidth.getLongestWidth(labels);
  const allowVariadic = config?.allowVariadicParams;
  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Header.Header, {
    label: translate.msg('cli:labelParams')
  }), params.map((param, index) => {
    if (param.hidden) {
      return null;
    }
    const desc = param ? formatDescription.formatDescription(param, gatherParamTags(param)) : '';
    return /*#__PURE__*/React__default.default.createElement(ink.Box, {
      key: `${labels[index]}-${index}`,
      flexDirection: "row",
      paddingLeft: constants.SPACING_COL
    }, /*#__PURE__*/React__default.default.createElement(ink.Box, {
      flexGrow: 0,
      width: labelWidth + constants.SPACING_COL_WIDE
    }, /*#__PURE__*/React__default.default.createElement(ink.Text, null, labels[index])), /*#__PURE__*/React__default.default.createElement(ink.Box, {
      flexGrow: 1
    }, /*#__PURE__*/React__default.default.createElement(ink.Text, {
      wrap: "wrap"
    }, desc)));
  }), allowVariadic && /*#__PURE__*/React__default.default.createElement(ink.Box, {
    paddingLeft: constants.SPACING_COL
  }, /*#__PURE__*/React__default.default.createElement(ink.Text, null, `â€¦${typeof allowVariadic === 'string' ? allowVariadic : ''}`, ' ', formatType.formatType({
    multiple: true,
    type: 'string'
  }))));
}
exports.HelpParams = HelpParams;
//# sourceMappingURL=HelpParams.cjs.map
