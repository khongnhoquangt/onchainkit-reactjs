'use strict';

const _excluded = ["children", "inverted", "type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const React = require('react');
const ink = require('ink');
const loadTheme = require('../helpers/loadTheme.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);

/**
 * A React component that styles text and backgrounds based on the current Boost theme.
 */
function Style(props) {
  const children = props.children,
    _props$inverted = props.inverted,
    inverted = _props$inverted === void 0 ? false : _props$inverted,
    _props$type = props.type,
    type = _props$type === void 0 ? 'none' : _props$type,
    restProps = _objectWithoutProperties(props, _excluded);
  const theme = loadTheme.loadTheme();
  const nextProps = {};
  if (type !== 'none') {
    if (inverted) {
      nextProps.backgroundColor = theme[type];
      nextProps.color = theme.inverted;
    } else {
      nextProps.color = theme[type];
    }
  }
  return /*#__PURE__*/React__default.default.createElement(ink.Text, _rollupPluginBabelHelpers.extends({}, restProps, nextProps), children);
}
exports.Style = Style;
//# sourceMappingURL=Style.cjs.map
