'use strict';

const _excluded = ["invalidError", "onSubmit", "no", "yes"];
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const React = require('react');
const ink = require('ink');
const translate = require('../translate.cjs');
const Prompt = require('./internal/Prompt.cjs');
const Selected = require('./internal/Selected.cjs');
const Style = require('./Style.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const React__default = /*#__PURE__*/_interopDefault(React);

/**
 * A React component that renders a yes/no confirmation prompt.
 */
function Confirm(props) {
  const invalidError = props.invalidError,
    onSubmit = props.onSubmit,
    _props$no = props.no,
    no = _props$no === void 0 ? 'N' : _props$no,
    _props$yes = props.yes,
    yes = _props$yes === void 0 ? 'y' : _props$yes,
    restProps = _objectWithoutProperties(props, _excluded);
  const _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  const _ink$useFocus = ink.useFocus({
      autoFocus: true
    }),
    isFocused = _ink$useFocus.isFocused;
  React.useEffect(() => {
    if (no.length !== 1) {
      console.error(`Prop "no" must be a single character.`);
    } else if (yes.length !== 1) {
      console.error(`Prop "yes" must be a single character.`);
    }
  }, [no, yes]);
  const handleInput = React.useCallback(input => {
    if (input === no) {
      setValue(false);
      onSubmit(false);
    } else if (input === yes) {
      setValue(true);
      onSubmit(true);
    } else {
      setValue(null);
      throw new Error(invalidError ?? translate.msg('prompt:confirmInvalidValue', {
        no,
        yes
      }));
    }

    // Trigger submit
    return true;
  }, [invalidError, no, onSubmit, yes]);
  return /*#__PURE__*/React__default.default.createElement(Prompt.Prompt, _rollupPluginBabelHelpers.extends({}, restProps, {
    afterLabel: value === null ? /*#__PURE__*/React__default.default.createElement(Style.Style, {
      type: "muted"
    }, `(${yes}/${no})`) : /*#__PURE__*/React__default.default.createElement(Selected.Selected, {
      value: value
    }),
    focused: isFocused,
    value: value,
    onInput: handleInput
  }));
}
exports.Confirm = Confirm;
//# sourceMappingURL=Confirm.cjs.map
