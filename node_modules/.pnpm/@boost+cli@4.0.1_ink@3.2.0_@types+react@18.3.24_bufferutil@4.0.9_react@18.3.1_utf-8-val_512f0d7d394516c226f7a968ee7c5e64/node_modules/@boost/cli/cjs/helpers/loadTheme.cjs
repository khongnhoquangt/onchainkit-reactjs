'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const internal = require('@boost/internal');
const terminal = require('@boost/terminal');
const CLIError = require('../CLIError.cjs');
const loadedThemes = new Map();
function loadTheme() {
  const theme = internal.env('CLI_THEME') ?? '';
  let palette = loadedThemes.get(theme);
  if (terminal.style.level > 0 && !palette && !!theme) {
    try {
      palette = require(`@boost/theme-${theme}`);
    } catch {
      try {
        palette = require(`boost-theme-${theme}`);
      } catch {
        throw new CLIError.CLIError('THEME_UNKNOWN', [theme]);
      }
    }
    if (palette) {
      loadedThemes.set(theme, palette);
    }
  }

  // ANSI escapes + hexcodes dont work too well with snapshots
  const isTest = process.env.NODE_ENV === 'test';
  return _objectSpread({
    default: 'white',
    failure: 'red',
    info: 'cyan',
    // Use a hexcode since it sometimes renders as gray
    inverted: isTest ? 'black' : '#000',
    muted: 'gray',
    notice: 'magenta',
    success: 'green',
    warning: 'yellow'
  }, palette);
}
exports.loadTheme = loadTheme;
//# sourceMappingURL=loadTheme.cjs.map
