'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const CLIError = require('../CLIError.cjs');
const constants = require('../constants.cjs');
const getConstructor = require('./getConstructor.cjs');
function registerOption(target, property, config) {
  const ctor = getConstructor.getConstructor(target);
  const name = ctor.name;
  const key = String(property);

  // Without this check we would mutate the prototype chain,
  // resulting in *all* sub-classes inheriting the same options.
  // We use the constructor name so that deep inheritance still works.
  if (ctor.hasRegisteredOptions !== name) {
    ctor.options = {};
    ctor.hasRegisteredOptions = name;
  }
  if (constants.RESERVED_OPTIONS.includes(key)) {
    throw new CLIError.CLIError('OPTION_RESERVED', [key]);
  }
  ctor.options[key] = config;
}
exports.registerOption = registerOption;
//# sourceMappingURL=registerOption.cjs.map
