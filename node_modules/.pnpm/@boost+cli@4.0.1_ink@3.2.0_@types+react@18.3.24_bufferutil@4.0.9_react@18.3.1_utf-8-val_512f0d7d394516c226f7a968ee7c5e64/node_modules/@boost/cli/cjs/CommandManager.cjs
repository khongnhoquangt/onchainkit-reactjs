'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const common = require('@boost/common');
const event = require('@boost/event');
const CLIError = require('./CLIError.cjs');
class CommandManager extends common.Contract {
  constructor(...args) {
    super(...args);
    /**
     * Called after a command has been registered.
     * @category Events
     */
    this.onAfterRegister = new event.Event('after-register');
    /**
     * Called before a command has been registered.
     * @category Events
     */
    this.onBeforeRegister = new event.Event('before-register');
    this.commands = {};
    this.commandAliases = {};
  }
  /**
   * Return a command by registered path, or `null` if not found.
   */
  getCommand(path) {
    if (!path) {
      return null;
    }
    const alias = this.commandAliases[path];
    return alias && this.commands[alias] || this.commands[path] || null;
  }

  /**
   * Return a list of all registered command paths (including aliases).
   */
  getCommandPaths() {
    return [...Object.keys(this.commands), ...Object.keys(this.commandAliases)];
  }

  /**
   * Register a command and its canonical path (must be unique),
   * otherwise an error is thrown.
   */
  register(command) {
    if (!common.isObject(command) || typeof command.run !== 'function') {
      throw new CLIError.CLIError('COMMAND_INVALID_REGISTER');
    }
    const _command$getMetadata = command.getMetadata(),
      aliases = _command$getMetadata.aliases,
      path = _command$getMetadata.path;
    this.onBeforeRegister.emit([path, command]);
    this.checkPath(path);
    this.commands[path] = command;
    aliases.forEach(alias => {
      this.checkPath(alias);
      this.commandAliases[alias] = path;
    });
    this.onAfterRegister.emit([path, command]);
    return this;
  }

  /**
   * Check that a command path is valid.
   */
  checkPath(path) {
    if (this.commands[path]) {
      throw new CLIError.CLIError('COMMAND_DEFINED', [path]);
    }
  }
}
exports.CommandManager = CommandManager;
//# sourceMappingURL=CommandManager.cjs.map
