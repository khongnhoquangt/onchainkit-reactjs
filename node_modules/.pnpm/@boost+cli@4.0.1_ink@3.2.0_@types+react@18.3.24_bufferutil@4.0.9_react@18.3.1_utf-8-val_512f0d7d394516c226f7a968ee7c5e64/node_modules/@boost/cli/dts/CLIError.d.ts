declare const errors: {
    COMMAND_DEFINED: string;
    COMMAND_INVALID_REGISTER: string;
    COMMAND_INVALID_RUN: string;
    COMMAND_INVALID_SUBPATH: string;
    COMMAND_MIXED_DEFAULT: string;
    COMMAND_MIXED_NONDEFAULT: string;
    COMMAND_NO_PROGRAM: string;
    COMMAND_NONE_REGISTERED: string;
    COMMAND_UNKNOWN: string;
    MIDDLEWARE_INVALID: string;
    OPTION_RESERVED: string;
    PARAMS_RUN_ONLY: string;
    REACT_RENDER_NO_NESTED: string;
    THEME_UNKNOWN: string;
};
export type CLIErrorCode = keyof typeof errors;
export declare const CLIError: new (code: "COMMAND_DEFINED" | "COMMAND_INVALID_REGISTER" | "COMMAND_INVALID_RUN" | "COMMAND_INVALID_SUBPATH" | "COMMAND_MIXED_DEFAULT" | "COMMAND_MIXED_NONDEFAULT" | "COMMAND_NO_PROGRAM" | "COMMAND_NONE_REGISTERED" | "COMMAND_UNKNOWN" | "MIDDLEWARE_INVALID" | "OPTION_RESERVED" | "PARAMS_RUN_ONLY" | "REACT_RENDER_NO_NESTED" | "THEME_UNKNOWN", params?: unknown[] | undefined) => Error & import("@boost/internal").ScopedError<"COMMAND_DEFINED" | "COMMAND_INVALID_REGISTER" | "COMMAND_INVALID_RUN" | "COMMAND_INVALID_SUBPATH" | "COMMAND_MIXED_DEFAULT" | "COMMAND_MIXED_NONDEFAULT" | "COMMAND_NO_PROGRAM" | "COMMAND_NONE_REGISTERED" | "COMMAND_UNKNOWN" | "MIDDLEWARE_INVALID" | "OPTION_RESERVED" | "PARAMS_RUN_ONLY" | "REACT_RENDER_NO_NESTED" | "THEME_UNKNOWN">;
export {};
//# sourceMappingURL=CLIError.d.ts.map