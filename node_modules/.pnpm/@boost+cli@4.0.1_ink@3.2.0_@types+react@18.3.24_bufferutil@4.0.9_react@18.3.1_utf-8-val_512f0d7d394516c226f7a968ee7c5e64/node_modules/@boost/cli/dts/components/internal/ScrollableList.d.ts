import React from 'react';
export type OverflowLabel = string | ((count: number) => string);
export interface ScrollableItem {
    disabled?: boolean;
    divider?: boolean;
}
export interface ScrollableListProps {
    /** Number of options to display before scrolling. Defaults to console height. */
    limit?: number;
    /** Label to display above scrollable options with the number of overflowing options. */
    overflowAfterLabel?: OverflowLabel;
    /** Label to display below scrollable options with the number of overflowing options. */
    overflowBeforeLabel?: OverflowLabel;
    /**
     * The pattern in which to limit options when scrolling. Defaults to `overflow`.
     * - `cycle` - Will continously cycle through options, even when navigating to and past edges.
     * - `overflow` - Will display options bound to an edge, with the number of options hidden above and below.
     */
    scrollType?: 'cycle' | 'overflow';
}
export interface InternalScrollableListProps<T extends ScrollableItem> extends ScrollableListProps {
    currentIndex: number;
    items: T[];
    renderItem: (item: T) => React.ReactElement;
    rowHeight?: number;
}
export declare function calculateIndexes(maxIndex: number, currentIndex: number, limit: number, scrollType: string): {
    endIndex: number;
    startIndex: number;
};
export declare function truncateList<T>(items: T[], startIndex: number, endIndex: number): {
    list: T[];
    leading: T[];
    trailing: T[];
};
export declare function ScrollableList<T extends ScrollableItem>({ currentIndex, items, limit, overflowAfterLabel, overflowBeforeLabel, renderItem, rowHeight, scrollType, }: InternalScrollableListProps<T>): JSX.Element;
//# sourceMappingURL=ScrollableList.d.ts.map