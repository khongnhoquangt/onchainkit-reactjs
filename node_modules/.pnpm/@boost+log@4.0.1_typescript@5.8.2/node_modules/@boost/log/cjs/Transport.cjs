'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const os = require('os');
const common = require('@boost/common');
const constants = require('./constants.cjs');
const formats = require('./formats.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const os__default = /*#__PURE__*/_interopDefault(os);
class Transport extends common.Contract {
  constructor(options) {
    super(options);
    this.levels = [];
    this.levels = this.options.levels;
  }
  blueprint(schemas) {
    const array = schemas.array,
      func = schemas.func,
      string = schemas.string;
    return {
      eol: string(os__default.default.EOL),
      format: func(),
      levels: array().of(string().oneOf(constants.LOG_LEVELS))
    };
  }

  /**
   * Format the log item into a message string, and append a trailing newline if missing.
   */
  format(item) {
    const _this$options = this.options,
      eol = _this$options.eol,
      format = _this$options.format;
    let output = typeof format === 'function' ? format(item) : formats.debug(item);
    if (eol && !output.endsWith(eol)) {
      output += String(eol);
    }
    return output;
  }

  /**
   * Write the formatted message according to the transport.
   */
}

exports.Transport = Transport;
//# sourceMappingURL=Transport.cjs.map
