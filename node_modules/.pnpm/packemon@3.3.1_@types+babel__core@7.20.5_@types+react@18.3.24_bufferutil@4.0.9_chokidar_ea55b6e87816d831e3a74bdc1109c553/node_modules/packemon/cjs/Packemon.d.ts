import { Path, PortablePath } from '@boost/common';
import { Debugger } from '@boost/debug';
import { Config } from './Config';
import { Package } from './Package';
import { PackageValidator } from './PackageValidator';
import type { BuildOptions, FilterOptions, ValidateOptions } from './types';
export declare class Packemon {
    readonly config: Config;
    readonly debug: Debugger;
    readonly workingDir: Path;
    constructor(cwd?: PortablePath);
    build(pkg: Package, baseOptions: BuildOptions): Promise<void>;
    clean(pkg: Package): Promise<void>;
    validate(pkg: Package, baseOptions: Partial<ValidateOptions>): Promise<PackageValidator>;
    /**
     * Find and load the package that has been configured with a `packemon`
     * block in the `package.json`. Once loaded, validate the configuration.
     */
    findPackage({ skipPrivate }?: FilterOptions): Promise<Package | null>;
    /**
     * Find all packages within a project. If using workspaces, return a list of packages
     * from each workspace glob. If not using workspaces, assume project is a package.
     */
    findPackages({ filter, skipPrivate }?: FilterOptions): Promise<Package[]>;
    /**
     * Determine the workspace root when running in a monorepo.
     * This is necessary as it changes functionality.
     */
    findWorkspaceRoot(startingDir?: Path): Path;
}
//# sourceMappingURL=Packemon.d.ts.map