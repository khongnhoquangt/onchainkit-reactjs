'use strict';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const constants = require('../constants.cjs');
const shouldKeepDynamicImport = require('../helpers/shouldKeepDynamicImport.cjs');
const resolve = require('./resolve.cjs');

// https://babeljs.io/docs/en/babel-preset-env

function getPlatformEnvOptions(platform, support, format) {
  let modules = false;
  if (format === 'umd') {
    modules = 'umd';
  } else if (format === 'cjs' || format === 'lib') {
    modules = 'cjs'; // Babel CommonJS
  }
  const exclude = [
  // https://caniuse.com/async-functions
  '@babel/plugin-transform-regenerator', '@babel/plugin-transform-async-to-generator'];

  // https://caniuse.com/es6-module-dynamic-import
  if (shouldKeepDynamicImport.shouldKeepDynamicImport(platform, support)) {
    exclude.push('@babel/plugin-proposal-dynamic-import');
  }
  switch (platform) {
    case 'browser':
      return {
        exclude,
        modules,
        targets: {
          browsers: constants.BROWSER_TARGETS[support]
        }
      };
    case 'electron':
      return {
        exclude,
        modules,
        targets: {
          electron: constants.ELECTRON_TARGETS[support]
        }
      };
    case 'native':
      return {
        exclude,
        modules,
        targets: {
          browsers: constants.NATIVE_TARGETS[support]
        }
      };
    case 'node':
      return {
        exclude,
        modules,
        targets: {
          node: constants.NODE_SUPPORTED_VERSIONS[support]
        }
      };
    default:
      throw new Error(`Unknown platform "${platform}".`);
  }
}
function injectHelperPlugins(plugins, babelHelpers, isESM) {
  if (babelHelpers === 'runtime') {
    plugins.push([resolve.resolve('@babel/plugin-transform-runtime'), {
      corejs: false,
      helpers: true,
      regenerator: false,
      useESModules: isESM
    }]);
  } else if (babelHelpers === 'external') {
    plugins.push(resolve.resolve('@babel/plugin-external-helpers'));
  }
}
function getSharedConfig(plugins, presets, features) {
  return {
    caller: {
      name: 'packemon'
    },
    comments: true,
    parserOpts: {
      sourceType: 'unambiguous',
      strictMode: features.strict
    },
    plugins,
    presets,
    // Do NOT load root `babel.config.js` or `.babelrc` as we need full control
    configFile: false,
    babelrc: false
  };
}

// The input config should only parse special syntax, not transform and downlevel.
// This applies to all formats within a build target.
function getBabelInputConfig(artifact, features, packemonConfig = {}) {
  const plugins = [];
  const presets = [];
  const tsOptions = {
    allowDeclareFields: true,
    onlyRemoveTypeImports: false,
    optimizeConstEnums: true
  };
  if (features.flow) {
    presets.push([resolve.resolve('@babel/preset-flow'), {
      allowDeclareFields: true
    }]);
  }
  if (features.typescript) {
    presets.push([resolve.resolve('@babel/preset-typescript'), tsOptions]);

    // When decorators are used, class properties must be loose
    if (features.decorators) {
      plugins.push([resolve.resolve('@babel/plugin-transform-typescript'), tsOptions], [resolve.resolve('@babel/plugin-proposal-decorators'), {
        legacy: true
      }], [resolve.resolveFromBabel('@babel/plugin-transform-class-properties'), {
        loose: true
      }], [resolve.resolveFromBabel('@babel/plugin-transform-private-methods'), {
        loose: true
      }], [resolve.resolveFromBabel('@babel/plugin-transform-private-property-in-object'), {
        loose: true
      }]);
    }
  }
  if (features.react) {
    presets.push([resolve.resolve('@babel/preset-react'), {
      // development: __DEV__,
      runtime: features.react,
      throwIfNamespace: true,
      useBuiltIns: true
    }]);
  }
  if (features.solid) {
    presets.push(resolve.resolve('babel-preset-solid'));
  }
  injectHelperPlugins(plugins, artifact.features.helpers, true);
  const config = getSharedConfig(plugins, presets, features);

  // Allow consumers to mutate
  packemonConfig.babelInput?.(config);
  return config;
}

// The output config does all the transformation and downleveling through the preset-env.
// This is handled per output since we need to configure based on target + format combinations.
function getBabelOutputConfig(platform, support, format, features, packemonConfig = {}, babelHelpers) {
  const plugins = [];
  const presets = [];
  const isESM = format === 'esm' || format === 'mjs';

  // PRESETS

  const envOptions = _objectSpread({
    // Prefer spec compliance in development
    spec: process.env.NODE_ENV !== "production",
    loose: false,
    // Consumers must polyfill accordingly
    useBuiltIns: false,
    // Transform features accordingly
    bugfixes: true,
    shippedProposals: true
  }, getPlatformEnvOptions(platform, support, format));
  presets.push([resolve.resolve('@babel/preset-env'), envOptions]);

  // PLUGINS

  plugins.push(
  // Use `Object.assign` when available
  [resolve.resolveFromBabel('@babel/plugin-transform-destructuring'), {
    useBuiltIns: true
  }], [resolve.resolveFromBabel('@babel/plugin-transform-object-rest-spread'), {
    useBuiltIns: true
  }]);
  if (platform === 'node') {
    plugins.push([resolve.resolve('babel-plugin-cjs-esm-interop'), {
      format: isESM ? 'mjs' : 'cjs'
    }]);

    // Node 14 does not support ??=, etc
    if (support === 'legacy') {
      plugins.push(resolve.resolveFromBabel('@babel/plugin-transform-logical-assignment-operators'), resolve.resolveFromBabel('@babel/plugin-transform-nullish-coalescing-operator'));
    }
  }
  plugins.push(resolve.resolve('babel-plugin-conditional-invariant'), resolve.resolve('babel-plugin-env-constants'));
  injectHelperPlugins(plugins, babelHelpers, isESM);
  const config = getSharedConfig(plugins, presets, features);

  // Allow consumers to mutate
  packemonConfig.babelOutput?.(config, {
    features,
    format,
    platform,
    support
  });
  return config;
}
exports.getBabelInputConfig = getBabelInputConfig;
exports.getBabelOutputConfig = getBabelOutputConfig;
//# sourceMappingURL=config.cjs.map
