'use strict';

const fs = require('node:fs');
const common = require('@boost/common');
const loadModule = require('./loadModule.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const fs__default = /*#__PURE__*/_interopDefault(fs);
const CACHE = new Map();
function loadTsconfigJson(path) {
  const tsconfigJsonPath = common.Path.create(path);
  const tsconfig = CACHE.get(tsconfigJsonPath);
  if (tsconfig) {
    return tsconfig;
  }
  if (!tsconfigJsonPath.exists()) {
    return undefined;
  }
  const ts = loadModule.loadModule('typescript', 'TypeScript is required for config loading.');

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const _ts$readConfigFile = ts.readConfigFile(tsconfigJsonPath.path(), name => fs__default.default.readFileSync(name, 'utf8')),
    config = _ts$readConfigFile.config,
    error = _ts$readConfigFile.error;
  const host = {
    getCanonicalFileName: fileName => fileName,
    getCurrentDirectory: () => ts.sys.getCurrentDirectory(),
    getNewLine: () => ts.sys.newLine
  };

  // istanbul ignore next
  if (error) {
    throw new Error(ts.formatDiagnostic(error, host));
  }
  const result = ts.parseJsonConfigFileContent(config, ts.sys, tsconfigJsonPath.parent().path(), {}, tsconfigJsonPath.path());

  // istanbul ignore next
  if (result.errors.length > 0) {
    throw new Error(ts.formatDiagnostics(result.errors, host));
  }
  CACHE.set(tsconfigJsonPath, result);
  return result;
}
exports.loadTsconfigJson = loadTsconfigJson;
//# sourceMappingURL=loadTsconfigJson.cjs.map
