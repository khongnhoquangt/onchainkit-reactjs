#!/usr/bin/env node
'use strict';

const debug = require('debug');
const cli = require('@boost/cli');
const getVersion = require('./helpers/getVersion.cjs');
require('./index.cjs');
const Build = require('./commands/Build.cjs');
const BuildWorkspace = require('./commands/BuildWorkspace.cjs');
const Clean = require('./commands/Clean.cjs');
const Files = require('./commands/Files.cjs');
const Init = require('./commands/Init.cjs');
const Pack = require('./commands/Pack.cjs');
const PackWorkspace = require('./commands/PackWorkspace.cjs');
const Scaffold = require('./commands/Scaffold.cjs');
const Validate = require('./commands/Validate.cjs');
const Watch = require('./commands/Watch.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const debug__default = /*#__PURE__*/_interopDefault(debug);
let version = '0.0.0-internal';
try {
  version = getVersion.getVersion();
} catch {
  // Ignore
}
if (process.argv.includes('--debug')) {
  debug__default.default.enable('packemon:*');
}
async function run() {
  const program = new cli.Program({
    bin: 'packemon',
    footer: 'Documentation: https://packemon.dev',
    name: 'Packemon',
    version
  });
  program.categories({
    filter: 'Filtering'
  }).register(new Build.BuildCommand()).register(new BuildWorkspace.BuildWorkspaceCommand()).register(new Clean.CleanCommand()).register(new Files.FilesCommand()).register(new Init.InitCommand()).register(new Pack.PackCommand()).register(new PackWorkspace.PackWorkspaceCommand()).register(new Scaffold.ScaffoldCommand()).register(new Validate.ValidateCommand()).register(new Watch.WatchCommand());
  if (!process.env.CI && !process.argv.includes('--quiet')) {
    program.middleware(cli.checkPackageOutdated('packemon', version));
  }
  await program.runAndExit(process.argv);
}

// We need to be using modules first!
// eslint-disable-next-line unicorn/prefer-top-level-await
void run();
//# sourceMappingURL=bin.cjs.map
