'use strict';

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const cli = require('@boost/cli');
const terminal = require('@boost/terminal');
const Packemon = require('../Packemon.cjs');
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
let BaseCommand = (_dec = cli.Arg.String('Current working directory to run in', {
  category: 'global'
}), _dec2 = cli.Arg.Flag('Enable debug logs', {
  category: 'global'
}), _dec3 = cli.Arg.String('Only generate specific output formats', {
  category: 'filter',
  short: 'f'
}), _dec4 = cli.Arg.Flag('Search and load local config files', {
  category: 'global'
}), _dec5 = cli.Arg.String('Only target specific platforms', {
  category: 'filter',
  short: 'p'
}), _dec6 = cli.Arg.Flag('Display less or no output while running', {
  category: 'global'
}), _dec7 = cli.Arg.Flag('Skip `private` packages', {
  category: 'filter'
}), (_class = class BaseCommand extends cli.Command {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "cwd", _descriptor, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "debug", _descriptor2, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "formats", _descriptor3, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "loadConfigs", _descriptor4, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "platforms", _descriptor5, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "quiet", _descriptor6, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "skipPrivate", _descriptor7, this);
  }
  get packemon() {
    return new Packemon.Packemon(this.cwd || process.cwd());
  }
  async getPackage() {
    const pkg = await this.packemon.findPackage({
      skipPrivate: this.skipPrivate
    });
    if (!pkg) {
      throw new Error(`No \`packemon\` configured package found in ${cli.applyStyle(this.packemon.workingDir.path(), 'info')}!`);
    }
    return pkg;
  }
  renderValidator(validator) {
    if (validator.hasErrors()) {
      validator.errors.forEach(error => {
        this.log.error(cli.applyStyle(` ${terminal.figures.bullet} ${error}`, 'failure'));
      });
    }
    if (validator.hasWarnings()) {
      validator.warnings.forEach(warning => {
        this.log.warn(cli.applyStyle(` ${terminal.figures.bullet} ${warning}`, 'warning'));
      });
    }
    if (validator.hasErrors()) {
      this.exit(`Found errors in ${validator.package.getName()} package!`);
    }
  }
}, (_descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "cwd", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return '';
  }
}), _descriptor2 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "debug", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor3 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "formats", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return '';
  }
}), _descriptor4 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "loadConfigs", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor5 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "platforms", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return '';
  }
}), _descriptor6 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "quiet", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return !!process.env.CI;
  }
}), _descriptor7 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class.prototype, "skipPrivate", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
})), _class));
exports.BaseCommand = BaseCommand;
//# sourceMappingURL=Base.cjs.map
