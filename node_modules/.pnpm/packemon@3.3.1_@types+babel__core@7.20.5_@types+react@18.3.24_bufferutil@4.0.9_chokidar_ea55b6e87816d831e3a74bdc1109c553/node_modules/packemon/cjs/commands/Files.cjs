'use strict';

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const cli = require('@boost/cli');
const Base = require('./Base.cjs');
const jsxRuntime = require('react/jsx-runtime');
var _dec, _dec2, _class, _class2, _descriptor;
let FilesCommand = (_dec = cli.Config('files', 'List all files that will be distributed within a package'), _dec2 = cli.Arg.String('Format to display files in', {
  choices: ['list', 'tree']
}), _dec(_class = (_class2 = class FilesCommand extends Base.BaseCommand {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "format", _descriptor, this);
  }
  async run() {
    const pkg = await this.getPackage();
    const files = await pkg.findDistributableFiles();
    const tree = this.convertFilesToTree(files);

    // eslint-disable-next-line import/no-useless-path-segments
    const _await$import = await import('../components/Files/index.cjs'),
      Files = _await$import.Files;
    return /*#__PURE__*/jsxRuntime.jsx(Files, {
      format: this.format,
      list: files,
      name: pkg.getName(),
      tree: tree
    });
  }
  convertFilesToTree(files) {
    const root = {
      files: [],
      folders: {}
    };
    const convert = (file, tree) => {
      let slashIndex = file.indexOf('/');
      if (slashIndex === -1) {
        slashIndex = file.indexOf('\\');
      }
      if (slashIndex === -1) {
        (tree.files ||= []).push(file);
      } else {
        const folder = file.slice(0, slashIndex);
        tree.folders ||= {};
        tree.folders[folder] ||= {};
        convert(file.slice(slashIndex + 1), tree.folders[folder]);
      }
    };
    files.forEach(file => {
      convert(file, root);
    });
    return root;
  }
}, _descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "format", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 'tree';
  }
}), _class2)) || _class);
exports.FilesCommand = FilesCommand;
//# sourceMappingURL=Files.cjs.map
