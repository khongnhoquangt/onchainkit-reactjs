'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const cli = require('@boost/cli');
const constants = require('../constants.cjs');
const Base = require('./Base.cjs');
const jsxRuntime = require('react/jsx-runtime');
var _dec, _dec2, _class, _class2, _descriptor;
let InitCommand = (_dec = cli.Config('init', 'Initialize and configure a package for Packemon'), _dec2 = cli.Arg.Flag('Override existing configuration'), _dec(_class = (_class2 = class InitCommand extends Base.BaseCommand {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "force", _descriptor, this);
  }
  async run() {
    // Dont use `getPackage` so we dont throw an error
    const pkg = await this.packemon.findPackage();
    if (!pkg) {
      this.log.error('No package found in current directory.');
      return undefined;
    }
    const name = pkg.getName();
    if (pkg.json.packemon && !this.force) {
      this.log.info(`Package ${name} has already been configured. Pass --force to override.`);
      return undefined;
    }

    // eslint-disable-next-line import/no-useless-path-segments
    const _await$import = await import('../components/Init/index.cjs'),
      Init = _await$import.Init;
    return /*#__PURE__*/jsxRuntime.jsx(Init, {
      packageName: name,
      onComplete: config => this.writeConfigToPackageJson(pkg, config)
    });
  }

  // eslint-disable-next-line complexity
  formatConfigObject({
    format,
    inputs,
    namespace,
    platform,
    support
  }) {
    const config = {};
    if (format) {
      if (Array.isArray(format) && format.length === 1) {
        var _format = _slicedToArray(format, 1);
        config.format = _format[0];
      } else {
        config.format = format;
      }
    }
    if (inputs && !(Object.keys(inputs).length === 1 && inputs.index === constants.DEFAULT_INPUT)) {
      config.inputs = inputs;
    }
    if (namespace) {
      config.namespace = namespace;
    }
    if (platform) {
      if (Array.isArray(platform) && platform.length === 1) {
        var _platform = _slicedToArray(platform, 1);
        config.platform = _platform[0];
      } else {
        config.platform = platform;
      }
    }
    if (support && support !== constants.DEFAULT_SUPPORT) {
      config.support = support;
    }
    return config;
  }
  async writeConfigToPackageJson(pkg, config) {
    // eslint-disable-next-line no-param-reassign
    pkg.json.packemon = this.formatConfigObject(config);
    return pkg.syncJson();
  }
}, _descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "force", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _class2)) || _class);
exports.InitCommand = InitCommand;
//# sourceMappingURL=Init.cjs.map
