'use strict';

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const cli = require('@boost/cli');
const pipeline = require('@boost/pipeline');
const Build = require('./Build.cjs');
var _dec, _dec2, _class, _class2, _descriptor;
let BuildWorkspaceCommand = (_dec = cli.Config('build-workspace', 'Build all packages across the workspace'), _dec2 = cli.Arg.String('Filter packages to build', {
  category: 'filter'
}), _dec(_class = (_class2 = class BuildWorkspaceCommand extends Build.BuildCommand {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "filter", _descriptor, this);
  }
  async run() {
    await this.runPipeline(this.build.bind(this));
  }
  async runPipeline(run) {
    const pipeline$1 = new pipeline.PooledPipeline(new pipeline.Context());
    const packages = await this.packemon.findPackages({
      filter: this.filter,
      skipPrivate: this.skipPrivate
    });
    pipeline$1.configure({
      concurrency: this.concurrency,
      timeout: this.timeout
    });
    packages.forEach(pkg => {
      pipeline$1.add(pkg.getName(), async () => {
        await run(pkg);
      });
    });
    const _await$pipeline$1$run = await pipeline$1.run(),
      errors = _await$pipeline$1$run.errors;
    if (errors.length > 0) {
      throw errors[0];
    }
  }
}, _descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "filter", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return '';
  }
}), _class2)) || _class);
exports.BuildWorkspaceCommand = BuildWorkspaceCommand;
//# sourceMappingURL=BuildWorkspace.cjs.map
