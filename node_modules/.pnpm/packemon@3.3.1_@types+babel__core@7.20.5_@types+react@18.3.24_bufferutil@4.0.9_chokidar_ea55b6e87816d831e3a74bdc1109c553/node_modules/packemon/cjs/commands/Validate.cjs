'use strict';

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const cli = require('@boost/cli');
const Base = require('./Base.cjs');
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
let ValidateCommand = (_dec = cli.Config('validate', 'Validate package metadata and configuration'), _dec2 = cli.Arg.Flag('Check that dependencies have valid versions and constraints'), _dec3 = cli.Arg.Flag('Check that the current runtime satisfies `engines` constraint'), _dec4 = cli.Arg.Flag('Check that `main`, `module`, and other entry points are valid paths'), _dec5 = cli.Arg.Flag('Check that a SPDX license is provided'), _dec6 = cli.Arg.Flag('Check that `homepage` and `bugs` links are valid URLs'), _dec7 = cli.Arg.Flag('Check that `name`, `version`, `description`, and `keywords` are valid'), _dec8 = cli.Arg.Flag('Check that `author` and `contributors` contain a name and optional URL'), _dec9 = cli.Arg.Flag('Check that `repository` exists and is a valid URL'), _dec(_class = (_class2 = class ValidateCommand extends Base.BaseCommand {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "deps", _descriptor, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "engines", _descriptor2, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "entries", _descriptor3, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "license", _descriptor4, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "links", _descriptor5, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "meta", _descriptor6, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "people", _descriptor7, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "repo", _descriptor8, this);
  }
  async run() {
    const pkg = await this.getPackage();
    const validator = await this.packemon.validate(pkg, {
      deps: this.deps,
      engines: this.engines,
      entries: this.engines,
      license: this.license,
      links: this.links,
      meta: this.meta,
      people: this.people,
      quiet: this.quiet,
      repo: this.repo,
      skipPrivate: this.skipPrivate
    });
    this.renderValidator(validator);
  }
}, (_descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "deps", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor2 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "engines", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor3 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "entries", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor4 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "license", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor5 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "links", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor6 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "meta", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor7 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "people", [_dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor8 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "repo", [_dec9], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
})), _class2)) || _class);
exports.ValidateCommand = ValidateCommand;
//# sourceMappingURL=Validate.cjs.map
