'use strict';

const _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
const os = require('node:os');
const cli = require('@boost/cli');
const common = require('@boost/common');
const terminal = require('@boost/terminal');
const constants = require('../constants.cjs');
const Base = require('./Base.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const os__default = /*#__PURE__*/_interopDefault(os);
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
let BuildCommand = (_dec = cli.Config('build', 'Build a standardized package for distribution'), _dec2 = cli.Arg.Flag('Add `engine` versions to each `package.json`'), _dec3 = cli.Arg.Flag('Add `exports` fields to each `package.json`'), _dec4 = cli.Arg.Flag('Add `files` whitelist to each `package.json`'), _dec5 = cli.Arg.Number('Number of builds to run in parallel'), _dec6 = cli.Arg.Flag('Generate TypeScript declarations for each package'), _dec7 = cli.Arg.Number('Timeout in milliseconds before a build is cancelled'), _dec8 = cli.Arg.Flag('Stamp all `package.json`s with a release timestamp'), _dec(_class = (_class2 = class BuildCommand extends Base.BaseCommand {
  constructor(...args) {
    super(...args);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "addEngines", _descriptor, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "addExports", _descriptor2, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "addFiles", _descriptor3, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "concurrency", _descriptor4, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "declaration", _descriptor5, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "timeout", _descriptor6, this);
    _rollupPluginBabelHelpers.initializerDefineProperty(this, "stamp", _descriptor7, this);
  }
  async run() {
    return this.build(await this.getPackage());
  }
  async build(pkg) {
    await this.packemon.build(pkg, {
      addEngines: this.addEngines,
      addExports: this.addExports,
      addFiles: this.addFiles,
      concurrency: this.concurrency,
      declaration: this.declaration,
      filterFormats: this.formats,
      filterPlatforms: this.platforms,
      loadConfigs: this.loadConfigs,
      quiet: this.quiet,
      skipPrivate: this.skipPrivate,
      stamp: this.stamp,
      timeout: this.timeout
    });
    const output = [cli.applyMarkdown(`**${pkg.getName()}**`)];
    const _await$import = await import('filesize'),
      filesize = _await$import.filesize;
    pkg.artifacts.forEach(artifact => {
      const row = [' '];
      artifact.builds.forEach((build, index) => {
        const icon = artifact.state === 'failed' ? terminal.figures.cross : terminal.figures.squareSmallFilled;
        const create = tag => cli.applyStyle(cli.applyMarkdown(`**${icon} ${tag}**`), constants.STATE_COLORS[artifact.state] ?? 'default');
        row.push(create(build.format));
        const stats = artifact.builds[index].stats;
        if (stats) {
          row.push(cli.applyStyle(`(${String(filesize(stats.size))})`, 'muted'));
        }
        if (build.declaration) {
          row.push(create('dts'));
        }
      });
      if (artifact.buildResult.time <= 100) {
        row.push(cli.applyStyle('~', 'muted'));
      } else {
        row.push(common.formatMs(artifact.buildResult.time));
      }
      output.push(row.join(' '));
    });
    output.push('\n');
    this.log(output.join('\n').trim());
  }
  async pack(pkg) {
    await this.packemon.clean(pkg);
    await this.build(pkg);
    const validator = await this.packemon.validate(pkg, {});
    this.renderValidator(validator);
  }
}, (_descriptor = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "addEngines", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor2 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "addExports", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor3 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "addFiles", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor4 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "concurrency", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return os__default.default.cpus().length;
  }
}), _descriptor5 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "declaration", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor6 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "timeout", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor7 = _rollupPluginBabelHelpers.applyDecoratedDescriptor(_class2.prototype, "stamp", [_dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
})), _class2)) || _class);
exports.BuildCommand = BuildCommand;
//# sourceMappingURL=Build.cjs.map
