'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
const react = require('react');
const cli = require('@boost/cli');
const react$1 = require('@boost/cli/react');
const common = require('@boost/common');
const constants = require('../../constants.cjs');
const jsxRuntime = require('react/jsx-runtime');
function getVersionsCombo(platforms, support) {
  const versions = new Set();
  platforms.forEach(platform => {
    switch (platform) {
      case 'native':
        versions.add(`Native (${constants.NATIVE_TARGETS[support]}+)`);
        break;
      case 'node':
        versions.add(`Node v${constants.NODE_SUPPORTED_VERSIONS[support]}+`);
        break;
      case 'electron':
        versions.add(`Electron v${constants.ELECTRON_TARGETS[support]}+`);
        break;
      case 'browser':
        {
          const targets = support === 'experimental' ? ['last 2 versions'] : common.toArray(constants.BROWSER_TARGETS[support]);
          versions.add(`Browser (${targets[0]})`);
          break;
        }

      // no default
    }
  });
  return versions;
}
function getSupportVersions(platforms, support) {
  return cli.applyStyle([...getVersionsCombo(platforms, support)].sort().join(', '), 'muted');
}
function PackageForm({
  onSubmit
}) {
  const _react$useState = react.useState([]),
    _react$useState2 = _slicedToArray(_react$useState, 2),
    platform = _react$useState2[0],
    setPlatform = _react$useState2[1];
  const _react$useState3 = react.useState(constants.DEFAULT_SUPPORT),
    _react$useState4 = _slicedToArray(_react$useState3, 2),
    support = _react$useState4[0],
    setSupport = _react$useState4[1];
  const _react$useState5 = react.useState('lib'),
    _react$useState6 = _slicedToArray(_react$useState5, 2),
    format = _react$useState6[0],
    setFormat = _react$useState6[1];
  const _react$useState7 = react.useState(''),
    _react$useState8 = _slicedToArray(_react$useState7, 2),
    input = _react$useState8[0],
    setInput = _react$useState8[1];
  const _react$useState9 = react.useState(''),
    _react$useState10 = _slicedToArray(_react$useState9, 2),
    namespace = _react$useState10[0],
    setNamespace = _react$useState10[1];

  // Submit once all values are acceptable
  react.useEffect(() => {
    const hasUMD = format.includes('umd');
    if (platform.length > 0 && format && support && input && (hasUMD && namespace || !hasUMD && !namespace)) {
      const result = {
        format,
        inputs: {
          index: input
        },
        namespace,
        platform,
        support
      };

      // Delay submission or focus API crashes
      // https://github.com/vadimdemedes/ink/pull/404
      setTimeout(() => {
        onSubmit(result);
      }, 100);

      // Reset state for the next package
      setPlatform([]);
      setSupport(constants.DEFAULT_SUPPORT);
      setFormat('lib');
      setInput('');
      setNamespace('');
    }
  }, [format, input, namespace, onSubmit, platform, support]);

  // PLATFORM

  const platformOptions = react.useMemo(() => [{
    label: 'Browsers',
    value: 'browser'
  }, {
    label: 'Electron',
    value: 'electron'
  }, {
    label: 'Node',
    value: 'node'
  }, {
    label: 'React Native',
    value: 'native'
  }], []);
  const validatePlatform = react.useCallback(value => {
    if (value.length === 0) {
      throw new Error('Please select at least 1 platform');
    }
  }, []);

  // SUPPORT

  const supportOptions = react.useMemo(() => [{
    label: `Legacy ${getSupportVersions(platform, 'legacy')}`,
    value: 'legacy'
  }, {
    label: `Stable ${getSupportVersions(platform, 'stable')}`,
    value: 'stable'
  }, {
    label: `Current ${getSupportVersions(platform, 'current')}`,
    value: 'current'
  }, {
    label: `Experimental ${getSupportVersions(platform, 'experimental')}`,
    value: 'experimental'
  }], [platform]);
  const validateSupport = react.useCallback(value => {
    if (!value) {
      throw new Error('Please select a supported environment');
    }
  }, []);

  // FORMAT

  const formatOptions = react.useMemo(() => {
    const options = [{
      label: 'Shared CommonJS',
      value: 'lib'
    }];
    if (platform.includes('node')) {
      options.push({
        label: `Node - CommonJS ${cli.applyStyle('(.cjs)', 'muted')}`,
        value: 'cjs'
      }, {
        label: `Node - ECMAScript ${cli.applyStyle('(.mjs)', 'muted')}`,
        value: 'mjs'
      });
    }
    if (platform.includes('electron')) {
      options.push({
        label: 'Electron - ECMAScript',
        value: 'esm'
      });
    }
    if (platform.includes('browser')) {
      options.push({
        label: 'Browser - ECMAScript',
        value: 'esm'
      }, {
        label: 'Browser - UMD',
        value: 'umd'
      });
    }
    return options;
  }, [platform]);
  const validateFormat = react.useCallback(value => {
    if (!value) {
      throw new Error('Please select a format');
    }
  }, []);

  // INPUT

  const validateInput = react.useCallback(value => {
    if (!value?.match(/[-_a-z\d./\\]+/iu)) {
      throw new Error('Must be a valid file path');
    }
  }, []);

  // NAMESPACE

  const validateNamespace = react.useCallback(value => {
    if (!value?.match(/[a-z]\w+/iu)) {
      throw new Error('Must be in pascal-case or camel-case and start with an alpha character');
    }
  }, []);
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(react$1.MultiSelect, {
      label: "Platforms to target?",
      options: platformOptions,
      validate: validatePlatform,
      onSubmit: setPlatform
    }), /*#__PURE__*/jsxRuntime.jsx(react$1.Select, {
      defaultSelected: constants.DEFAULT_SUPPORT,
      label: "Environment to support?",
      options: supportOptions,
      validate: validateSupport,
      onSubmit: setSupport
    }), /*#__PURE__*/jsxRuntime.jsx(react$1.Select, {
      defaultSelected: constants.DEFAULT_FORMATS[platform[0]],
      label: "Format to build?",
      options: formatOptions,
      validate: validateFormat,
      onSubmit: setFormat
    }), /*#__PURE__*/jsxRuntime.jsx(react$1.Input, {
      defaultValue: constants.DEFAULT_INPUT,
      label: "Main entry point?",
      validate: validateInput,
      onSubmit: setInput
    }), format.includes('umd') && /*#__PURE__*/jsxRuntime.jsx(react$1.Input, {
      label: "UMD namespace?",
      validate: validateNamespace,
      onSubmit: setNamespace
    })]
  });
}
exports.PackageForm = PackageForm;
exports.getVersionsCombo = getVersionsCombo;
//# sourceMappingURL=PackageForm.cjs.map
