'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
const react$1 = require('react');
const ink = require('ink');
const react = require('@boost/cli/react');
const common = require('@boost/common');
const TemplateSelect = require('./TemplateSelect.cjs');
const jsxRuntime = require('react/jsx-runtime');

/* eslint-disable react/jsx-no-literals */

function Scaffold({
  defaultTemplate,
  onComplete
}) {
  const _react$useProgram = react.useProgram(),
    exit = _react$useProgram.exit;
  const _react$1$useState = react$1.useState(),
    _react$1$useState2 = _slicedToArray(_react$1$useState, 2),
    template = _react$1$useState2[0],
    setTemplate = _react$1$useState2[1];
  const _react$1$useState3 = react$1.useState(''),
    _react$1$useState4 = _slicedToArray(_react$1$useState3, 2),
    packageName = _react$1$useState4[0],
    setPackageName = _react$1$useState4[1];
  const _react$1$useState5 = react$1.useState(''),
    _react$1$useState6 = _slicedToArray(_react$1$useState5, 2),
    projectName = _react$1$useState6[0],
    setProjectName = _react$1$useState6[1];
  const _react$1$useState7 = react$1.useState(''),
    _react$1$useState8 = _slicedToArray(_react$1$useState7, 2),
    repoUrl = _react$1$useState8[0],
    setRepoUrl = _react$1$useState8[1];
  const _react$1$useState9 = react$1.useState(''),
    _react$1$useState10 = _slicedToArray(_react$1$useState9, 2),
    author = _react$1$useState10[0],
    setAuthor = _react$1$useState10[1];
  const _react$1$useState11 = react$1.useState(false),
    _react$1$useState12 = _slicedToArray(_react$1$useState11, 2),
    running = _react$1$useState12[0],
    setRunning = _react$1$useState12[1];
  react$1.useEffect(() => {
    // eslint-disable-next-line complexity
    async function complete() {
      if (!template) {
        return;
      }

      // Project validation
      if ((template === 'monorepo' || template === 'polyrepo') && (!projectName || !author)) {
        return;
      }

      // Package validation
      if ((template === 'monorepo-package' || template === 'polyrepo-package') && (!packageName || !author || !repoUrl)) {
        return;
      }
      try {
        setRunning(true);
        await onComplete({
          author,
          template,
          repoUrl,
          packageName: packageName || projectName,
          projectName: projectName || `${packageName}-root`,
          year: new Date().getFullYear()
        });
      } catch (error) {
        exit(error);
      } finally {
        setRunning(false);
        exit();
      }
    }
    void complete();
  }, [author, template, packageName, projectName, repoUrl, onComplete, exit]);
  const validatePackageName = react$1.useCallback(value => {
    if (!value?.trim() || !common.isModuleName(value)) {
      throw new Error('Please provide a valid npm package name');
    }
  }, []);
  const validateProjectName = react$1.useCallback(value => {
    if (!value?.trim() || !common.isModuleName(value)) {
      throw new Error('Please provide a valid project name (alphanumeric characters and dashes)');
    }
  }, []);
  const validateRepoUrl = react$1.useCallback(value => {
    if (!value?.trim() || !value.startsWith('http') && !value.startsWith('git@')) {
      throw new Error('Please provide a valid repository URL (https or git)');
    }
  }, []);
  const validateAuthor = react$1.useCallback(value => {
    if (!value?.trim()) {
      throw new Error('Please provide an author or company name');
    }
  }, []);
  if (running) {
    return /*#__PURE__*/jsxRuntime.jsx(ink.Box, {
      flexDirection: "column",
      children: /*#__PURE__*/jsxRuntime.jsxs(ink.Text, {
        children: ["Scaffolding ", template, "..."]
      })
    });
  }
  const isPackage = template === 'monorepo-package' || template === 'polyrepo-package';
  return /*#__PURE__*/jsxRuntime.jsxs(ink.Box, {
    flexDirection: "column",
    children: [/*#__PURE__*/jsxRuntime.jsx(TemplateSelect.TemplateSelect, {
      defaultTemplate: defaultTemplate,
      onSelect: setTemplate
    }), /*#__PURE__*/jsxRuntime.jsx(react.Input, {
      label: "Author?",
      placeholder: "Your name, company name, ...",
      validate: validateAuthor,
      onSubmit: setAuthor
    }), isPackage ? /*#__PURE__*/jsxRuntime.jsx(react.Input, {
      label: "Package name?",
      validate: validatePackageName,
      onSubmit: setPackageName
    }) : /*#__PURE__*/jsxRuntime.jsx(react.Input, {
      label: "Project name?",
      validate: validateProjectName,
      onSubmit: setProjectName
    }), isPackage && /*#__PURE__*/jsxRuntime.jsx(react.Input, {
      label: "Repository URL?",
      validate: validateRepoUrl,
      onSubmit: setRepoUrl
    })]
  });
}
exports.Scaffold = Scaffold;
//# sourceMappingURL=index.cjs.map
