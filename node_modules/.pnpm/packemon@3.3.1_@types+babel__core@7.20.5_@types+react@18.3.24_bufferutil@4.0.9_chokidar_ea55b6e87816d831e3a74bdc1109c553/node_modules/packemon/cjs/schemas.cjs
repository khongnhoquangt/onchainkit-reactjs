'use strict';

const common = require('@boost/common');
const optimal = require('@boost/common/optimal');
const constants = require('./constants.cjs');
const _optimal$schemas = optimal.schemas,
  array = _optimal$schemas.array,
  bool = _optimal$schemas.bool,
  number = _optimal$schemas.number,
  object = _optimal$schemas.object,
  shape = _optimal$schemas.shape,
  string = _optimal$schemas.string,
  union = _optimal$schemas.union;

// PLATFORMS

const platform = string(constants.DEFAULT_PLATFORM).oneOf(constants.PLATFORMS);

// FORMATS

const nativeFormat = string('lib').oneOf(constants.FORMATS_NATIVE);
const nodeFormat = string('mjs').oneOf(constants.FORMATS_NODE);
const browserFormat = string('esm').oneOf(constants.FORMATS_BROWSER);
const electronFormat = string('esm').oneOf(constants.FORMATS_ELECTRON);
const format = string().custom((value, path, options) => {
  if (!value) {
    // Fallback to defaults
    return;
  }
  const config = options.rootObject;
  const platforms = new Set(common.toArray(config.platform));
  if (platforms.has('browser') && platforms.size === 1) {
    browserFormat.validate(value, path, options);
  } else if (platforms.has('native') && platforms.size === 1) {
    nativeFormat.validate(value, path, options);
  } else if (platforms.has('node') && platforms.size === 1) {
    nodeFormat.validate(value, path, options);
  } else if (platforms.has('electron') && platforms.size === 1) {
    electronFormat.validate(value, path, options);
  }
});

// SUPPORT

const support = string(constants.DEFAULT_SUPPORT).oneOf(constants.SUPPORTS);

// BLUEPRINTS

const packemonFeaturesBlueprint = {
  cjsTypesCompat: bool(),
  helpers: string('bundled').oneOf(['bundled', 'external', 'inline', 'runtime']),
  swc: bool()
};
const packemonBlueprint = {
  api: string('private').oneOf(['public', 'private']),
  bundle: bool(true),
  externals: union([]).of([string(), array().of(string())]),
  features: shape(packemonFeaturesBlueprint),
  format: union(undefined).of([format, array().of(format)]).undefinable(),
  inputs: object({
    index: constants.DEFAULT_INPUT
  }).of(string()).keysOf(string().match(/^[a-zA-Z0-9-_]+$/u)),
  namespace: string(),
  platform: union(constants.DEFAULT_PLATFORM).of([array().of(platform), platform]),
  support
};
const buildBlueprint = {
  addEngines: bool(),
  addExports: bool(),
  addFiles: bool(),
  concurrency: number(1).gte(1),
  declaration: bool(),
  filter: string(),
  filterFormats: string(),
  filterPlatforms: string(),
  loadConfigs: bool(),
  quiet: bool(),
  skipPrivate: bool(),
  stamp: bool(),
  timeout: number().gte(0)
};
const validateBlueprint = {
  deps: bool(true),
  engines: bool(true),
  entries: bool(true),
  license: bool(true),
  links: bool(true),
  meta: bool(true),
  people: bool(true),
  quiet: bool(false),
  skipPrivate: bool(false),
  repo: bool(true)
};
exports.buildBlueprint = buildBlueprint;
exports.packemonBlueprint = packemonBlueprint;
exports.packemonFeaturesBlueprint = packemonFeaturesBlueprint;
exports.validateBlueprint = validateBlueprint;
//# sourceMappingURL=schemas.cjs.map
