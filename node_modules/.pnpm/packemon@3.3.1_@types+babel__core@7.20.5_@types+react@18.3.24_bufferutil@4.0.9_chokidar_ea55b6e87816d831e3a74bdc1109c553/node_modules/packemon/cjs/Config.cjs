'use strict';

const config = require('@boost/config');
class Config extends config.Configuration {
  blueprint({
    bool,
    func
  }) {
    return {
      babelInput: func(),
      babelOutput: func(),
      rollupInput: func(),
      rollupOutput: func(),
      swc: bool(),
      swcInput: func(),
      swcOutput: func()
    };
  }
  bootstrap() {
    this.configureFinder({
      errorIfNoRootFound: false,
      extensions: ['js', 'ts']
    });
    this.addProcessHandler('babelInput', this.wrapMutator);
    this.addProcessHandler('babelOutput', this.wrapBuildMutator);
    this.addProcessHandler('rollupInput', this.wrapMutator);
    this.addProcessHandler('rollupOutput', this.wrapBuildMutator);
  }
  wrapMutator(prev, next) {
    return options => {
      prev?.(options);
      next?.(options);
    };
  }
  wrapBuildMutator(prev, next) {
    return (options, build) => {
      prev?.(options, build);
      next?.(options, build);
    };
  }
}
exports.Config = Config;
//# sourceMappingURL=Config.cjs.map
