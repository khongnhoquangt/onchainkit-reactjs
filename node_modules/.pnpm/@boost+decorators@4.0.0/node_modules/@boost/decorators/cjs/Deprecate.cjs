'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

const isClass = require('./helpers/isClass.cjs');

const isMethod = require('./helpers/isMethod.cjs');

const isParam = require('./helpers/isParam.cjs');

const isProperty = require('./helpers/isProperty.cjs');
/* eslint-disable no-console */

/**
 * A decorator that marks a class declaration, class method,
 * class property, or method parameter as deprecated by
 * logging a deprecation message to the console.
 */


function Deprecate(message) {
  return (target, property, descriptor) => {
    const isProtoOrStatic = typeof target === 'function';
    const className = isProtoOrStatic ? target.name : target.constructor.name;
    const accessSymbol = isProtoOrStatic ? `.${String(property)}` : `#${String(property)}`; // Class

    if (isClass.isClass(target, property, descriptor)) {
      console.debug(message ?? `Class \`${className}\` has been deprecated.`); // Method
    } else if (isMethod.isMethod(target, property, descriptor)) {
      console.debug(message ?? `Method \`${className + accessSymbol}()\` has been deprecated.`); // Property
    } else if (isProperty.isProperty(target, property, descriptor)) {
      console.debug(message ?? `Property \`${className + accessSymbol}\` has been deprecated.`); // Param (Babel/Jest doesnt support them)
    }
    /* istanbul ignore next */
    else if (isParam.isParam(target, property, descriptor)) {
      console.debug(message ?? `Parameter ${descriptor} for \`${className + accessSymbol}()\` has been deprecated.`);
    }
  };
}

exports.Deprecate = Deprecate;
//# sourceMappingURL=Deprecate.cjs.map
