import { Blueprint, DeepPartial, OptimalOptions, SchemaValidateOptions } from './types';
export interface Optimal<T extends object> {
    /** Modify optimal options after instantiation. */
    configure: (options: OptimalOptions) => void;
    /**
     * Validate an object with the defined blueprint and options,
     * and return a deeply built object with correct types and values.
     */
    validate: (object: DeepPartial<T>, options?: SchemaValidateOptions) => Required<T>;
}
export declare function optimal<Schemas extends object>(blueprint: Blueprint<Schemas>, baseOpts?: OptimalOptions): Optimal<Schemas>;
//# sourceMappingURL=optimal.d.ts.map