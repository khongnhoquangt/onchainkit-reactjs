import { CommonCriterias, DefaultValue, InferNullable, NotNull, NotUndefined, Options, Schema, StringCriterias } from '../types';
export interface StringSchema<T = string> extends Schema<T>, StringCriterias<StringSchema<T>>, CommonCriterias<StringSchema<T>> {
    /** Mark that this field should never be used. */
    never: (options?: Options) => StringSchema<never>;
    /** Disallow null values. */
    notNullable: (options?: Options) => StringSchema<NotNull<T>>;
    /** Disallow undefined values. Will fallback to the default value. */
    notUndefinable: () => StringSchema<NotUndefined<T>>;
    /** Allow and return null values. */
    nullable: () => StringSchema<T | null>;
    /** Require field value to be one of the provided strings. */
    oneOf: <I extends string = string>(list: I[], options?: Options) => StringSchema<InferNullable<T, I>>;
    /** Allow and return undefined values. Will NOT fallback to the default value. */
    undefinable: () => StringSchema<T | undefined>;
}
/**
 * Create a schema that validates a value is a string.
 */
export declare function string<T extends string = string>(defaultValue?: DefaultValue<string>): StringSchema<T>;
/**
 * Create a schema that validates a value is a UUID (universally unique identifier).
 */
export declare function uuid(version?: 1 | 2 | 3 | 4 | 5): StringSchema<string>;
//# sourceMappingURL=string.d.ts.map