import { ArrayCriterias, CommonCriterias, DefaultValue, InferNullable, NotNull, NotUndefined, Options, Schema } from '../types';
export interface ArraySchema<T = unknown[]> extends Schema<T>, ArrayCriterias<ArraySchema<T>>, CommonCriterias<ArraySchema<T>> {
    /** Mark that this field should never be used. */
    never: (options?: Options) => ArraySchema<never>;
    /** Disallow null values. */
    notNullable: (options?: Options) => ArraySchema<NotNull<T>>;
    /** Disallow undefined values. Will fallback to the default value. */
    notUndefinable: () => ArraySchema<NotUndefined<T>>;
    /** Allow and return null values. */
    nullable: () => ArraySchema<T | null>;
    /**
     * Require field array items to be of a specific schema type.
     * Will rebuild the array and type cast values.
     */
    of: <V>(schema: Schema<V>) => ArraySchema<InferNullable<T, V[]>>;
    /** Allow and return undefined values. Will NOT fallback to the default value. */
    undefinable: () => ArraySchema<T | undefined>;
}
/**
 * Create a schema that validates a value is an array, and optionally validate its items.
 */
export declare function array<T = unknown>(defaultValue?: DefaultValue<T[]>): ArraySchema<T[]>;
//# sourceMappingURL=array.d.ts.map