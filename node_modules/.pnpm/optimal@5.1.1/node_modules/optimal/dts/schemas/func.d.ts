import { AnyFunction, CommonCriterias, DefaultValueInitializer, NotNull, NotUndefined, Options, Schema } from '../types';
export interface FunctionSchema<T = AnyFunction> extends Schema<T>, CommonCriterias<FunctionSchema<T>> {
    /** Mark that this field should never be used. */
    never: (options?: Options) => FunctionSchema<never>;
    /** Disallow null values. */
    notNullable: (options?: Options) => FunctionSchema<NotNull<T>>;
    /** Disallow undefined values. Will fallback to the default value. */
    notUndefinable: () => FunctionSchema<NotUndefined<T>>;
    /** Allow and return null values. */
    nullable: () => FunctionSchema<T | null>;
    /** Allow and return undefined values. Will NOT fallback to the default value. */
    undefinable: () => FunctionSchema<T | undefined>;
}
/**
 * Create a schema that validates a value is a function.
 */
export declare function func<T extends AnyFunction = AnyFunction>(defaultValue?: DefaultValueInitializer<T>): FunctionSchema<T>;
//# sourceMappingURL=func.d.ts.map