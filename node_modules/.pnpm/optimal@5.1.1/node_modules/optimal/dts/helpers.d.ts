import { Constructor, DefaultValue, Schema, SchemaValidateOptions, UnknownObject } from './types';
export declare function isObject(value: unknown): value is object;
export declare function isSchema<T>(value: unknown): value is Schema<T>;
export declare function isValidDate(value: Date): value is Date;
export declare function isValidNumber(value: unknown): value is number;
export declare function isValidString(value: unknown): value is string;
export declare function createArray(value: unknown): unknown[];
export declare function createDate(value: unknown): Date;
export declare function createObject<T = UnknownObject>(value: unknown): T;
/**
 * Native `instanceof` checks are problematic, as cross realm checks fail.
 * They will also fail when comparing against source and compiled files.
 * So emulate an `instanceof` check by comparing constructor names.
 */
export declare function instanceOf<T = unknown>(object: unknown, contract: Constructor<T>): object is T;
export declare function invalid(condition: boolean, message: unknown, path?: string, value?: unknown): void;
export declare function invariant(condition: boolean, message: string): void;
export declare function logUnknown(unknownFields: object, pathPrefix?: string): void;
export declare function pathKey(path: string): string;
export declare function prettyValue(value: unknown): string | null;
export declare function extractDefaultValue<T>(defaultValue: DefaultValue<T>, path: string, { currentObject, rootObject }: SchemaValidateOptions): T;
export declare function typeOf(value: unknown): string;
//# sourceMappingURL=helpers.d.ts.map