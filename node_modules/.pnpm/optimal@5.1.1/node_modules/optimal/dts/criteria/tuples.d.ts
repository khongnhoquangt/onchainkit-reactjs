import { AnySchema, Criteria, Schema, SchemaState } from '../types';
export declare type InferTupleItems<T> = T extends [infer A, infer B, infer C, infer D, infer E] ? [Schema<A>, Schema<B>, Schema<C>, Schema<D>, Schema<E>] : T extends [infer A, infer B, infer C, infer D] ? [Schema<A>, Schema<B>, Schema<C>, Schema<D>] : T extends [infer A, infer B, infer C] ? [Schema<A>, Schema<B>, Schema<C>] : T extends [infer A, infer B] ? [Schema<A>, Schema<B>] : T extends [infer A] ? [Schema<A>] : AnySchema[];
/**
 * Require field array items to be of a specific schema type.
 * Will rebuild the array and type cast values.
 * @internal
 */
export declare function of<T extends unknown[]>(state: SchemaState<T>, itemsSchemas: InferTupleItems<T>): Criteria<T>;
//# sourceMappingURL=tuples.d.ts.map