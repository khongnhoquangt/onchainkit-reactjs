import { Criteria, CriteriaValidator, Options, Schema, SchemaState, Transformer, ValueComparator } from '../types';
/**
 * Map a list of field names that must be defined alongside this field when in a shape/object.
 */
export declare function and<T>(state: SchemaState<T>, keys: string[], options?: Options): Criteria<T>;
/**
 * Set a callback to run custom validation logic.
 */
export declare function custom<T>(state: SchemaState<T>, validator: CriteriaValidator<T>): Criteria<T>;
/**
 * Set a message to log when this field is present.
 */
export declare function deprecate<T>(state: SchemaState<T>, message: string): void;
/**
 * Mark that this field should never be used.
 */
export declare function never<T>(state: SchemaState<T>, options?: Options): void;
/**
 * Require this field to be explicitly defined when in a shape/object.
 */
export declare function required<T>(state: SchemaState<T>, options?: Options): void;
/**
 * Dont require this field to be explicitly defined when in a shape/object.
 */
export declare function optional<T>(state: SchemaState<T>): void;
/**
 * Disallow null values.
 */
export declare function notNullable<T>(state: SchemaState<T>, options?: Options): void;
/**
 * Allow null values.
 */
export declare function nullable<T>(state: SchemaState<T>): void;
/**
 * Mark that this field can ONLY use a value that matches the default value.
 */
export declare function only<T>(state: SchemaState<T>, options?: Options): Criteria<T>;
/**
 * Map a list of field names that must have at least 1 defined when in a shape/object.
 */
export declare function or<T>(state: SchemaState<T>, keys: string[], options?: Options): Criteria<T>;
/**
 * Allow undefined values.
 */
export declare function undefinable<T>(state: SchemaState<T>): void;
/**
 * Disallow undefined values.
 */
export declare function notUndefinable<T>(state: SchemaState<T>): void;
/**
 * Transform a value before it's passed to the next criteria.
 */
export declare function transform<T>(state: SchemaState<T>, transformer: Transformer<T>): Criteria<T>;
/**
 * Validate with another schema when a condition is met.
 */
export declare function when<T>(state: SchemaState<T>, condition: T | ValueComparator<T>, pass: Schema<T>, fail?: Schema<T>): Criteria<T>;
/**
 * Map a list of field names that must not be defined alongside this field when in a shape/object.
 */
export declare function xor<T>(state: SchemaState<T>, keys: string[], options?: Options): Criteria<T>;
//# sourceMappingURL=common.d.ts.map