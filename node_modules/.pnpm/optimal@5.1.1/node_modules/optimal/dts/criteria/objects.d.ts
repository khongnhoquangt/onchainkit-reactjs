import { StringSchema } from '../schemas/string';
import { Criteria, Options, Schema, SchemaState } from '../types';
/**
 * Require field object keys to be of a string schema type.
 */
export declare function keysOf<T>(state: SchemaState<Record<string, T>>, keysSchema: StringSchema, options?: Options): Criteria<Record<string, T>>;
/**
 * Require field object to not be empty.
 */
export declare function notEmpty<T>(state: SchemaState<Record<string, T>>, options?: Options): Criteria<Record<string, T>>;
/**
 * Require field object values to be of a specific schema type.
 * Will rebuild the object and type cast values.
 */
export declare function of<T>(state: SchemaState<Record<string, T>>, valuesSchema: Schema<T>): Criteria<Record<string, T>>;
/**
 * Require field object to be of a specific size.
 */
export declare function sizeOf<T>(state: SchemaState<Record<string, T>>, size: number, options?: Options): Criteria<Record<string, T>>;
//# sourceMappingURL=objects.d.ts.map