import { Criteria, InclusiveOptions, Options, SchemaState } from '../types';
/**
 * Require field value to be between 2 numbers.
 */
export declare function between(state: SchemaState<number>, min: number, max: number, options?: InclusiveOptions): Criteria<number>;
/**
 * Require field value to be a float (requires a decimal).
 */
export declare function float(state: SchemaState<number>, options?: Options): Criteria<number>;
/**
 * Require field value to be greater than a number.
 */
export declare function gt(state: SchemaState<number>, min: number, options?: InclusiveOptions): Criteria<number>;
/**
 * Require field value to be greater than or equals to a number.
 */
export declare function gte(state: SchemaState<number>, min: number, options?: Options): Criteria<number>;
/**
 * Require field value to be an integer.
 */
export declare function int(state: SchemaState<number>, options?: Options): Criteria<number>;
/**
 * Require field value to be less than a number.
 */
export declare function lt(state: SchemaState<number>, max: number, options?: InclusiveOptions): Criteria<number>;
/**
 * Require field value to be less than or equals to a number.
 */
export declare function lte(state: SchemaState<number>, max: number, options?: Options): Criteria<number>;
/**
 * Require field value to be negative and _not_ zero.
 */
export declare function negative(state: SchemaState<number>, options?: Options): Criteria<number>;
/**
 * Require field value to be one of the provided numbers.
 */
export declare function oneOf(state: SchemaState<number>, list: number[], options?: Options): Criteria<number>;
/**
 * Require field value to be positive and _not_ zero.
 */
export declare function positive(state: SchemaState<number>, options?: Options): Criteria<number>;
//# sourceMappingURL=numbers.d.ts.map