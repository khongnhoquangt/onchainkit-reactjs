'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const fs = require('fs');
const os = require('os');
const path = require('path');
const execa = require('execa');
const glob = require('fast-glob');
const common = require('@boost/common');
const debug = require('./debug.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const fs__default = /*#__PURE__*/_interopDefault(fs);
const os__default = /*#__PURE__*/_interopDefault(os);
const path__default = /*#__PURE__*/_interopDefault(path);
const execa__default = /*#__PURE__*/_interopDefault(execa);
const glob__default = /*#__PURE__*/_interopDefault(glob);

/* eslint-disable no-magic-numbers */
function run(command, args) {
  let cmd = command;
  if (command === 'where' && os__default.default.platform() === 'win32') {
    cmd += '.exe';
  }
  return String(execa__default.default.sync(cmd, args, {
    preferLocal: true
  }).stdout);
}
function resolveHome(filePath) {
  return filePath.replace(process.env.HOME, '~');
}
function extractVersion(value) {
  const match = value.match(/\d+\.\d+\.\d+([.-a-z0-9])?/u);
  return match ? match[0] : '';
}
class CrashReporter {
  constructor() {
    this.contents = '';
  }
  /**
   * Add a label with a value, or multiple values, to the last added section.
   */
  add(label, ...messages) {
    this.contents += `${label}:\n`;
    this.contents += `  ${messages.map(String).join(' - ')}\n`;
    return this;
  }

  /**
   * Start a new section with a title.
   */
  addSection(title) {
    this.contents += `\n${title.toUpperCase()}\n`;
    this.contents += `${'='.repeat(title.length)}\n\n`;
    debug.debug('Reporting crash with %s', title);
    return this;
  }

  /**
   * Report Node.js related binary versions and paths.
   */
  reportBinaries() {
    this.addSection('Binaries');
    const bins = {
      node: 'Node',
      npm: 'npm',
      yarn: 'Yarn'
    };
    Object.keys(bins).forEach(bin => {
      try {
        this.add(bins[bin], extractVersion(run(bin, ['--version'])), resolveHome(run('where', [bin])));
      } catch {
        // Ignore
      }
    });
    return this;
  }

  /**
   * Report all environment variables.
   */
  reportEnvVars() {
    this.addSection('Environment');
    const keys = Object.keys(process.env).sort();
    keys.forEach(key => {
      this.add(key, process.env[key]);
    });
    return this;
  }

  /**
   * Report common programming language versions and paths
   */
  reportLanguages() {
    this.addSection('Languages');
    const languages = {
      bash: 'Bash',
      go: 'Go',
      javac: 'Java',
      perl: 'Perl',
      php: 'PHP',
      python: 'Python',
      ruby: 'Ruby',
      rustup: 'Rust'
    };

    // When running on OSX and Java is not installed,
    // OSX will interrupt the process with a prompt to install Java.
    // This is super annoying, so let's not disrupt consumers.
    // istanbul ignore next
    if (os__default.default.platform() === 'darwin') {
      delete languages.javac;
    }
    Object.keys(languages).forEach(bin => {
      let version;
      try {
        version = extractVersion(run(bin, ['--version']));
        if (!version) {
          version = extractVersion(run(bin, ['version']));
        }
        if (version) {
          this.add(languages[bin], version, resolveHome(run('where', [bin])));
        }
      } catch {
        // Ignore
      }
    });
    return this;
  }

  /**
   * Report information about the current `process`.
   */
  reportProcess() {
    this.addSection('Process');
    this.add('ID', process.pid);
    this.add('Title', process.title);
    this.add('Timestamp', new Date().toISOString());
    this.add('CWD', process.cwd());
    this.add('ARGV', process.argv.map(v => `- ${v}`).join('\n  '));
    return this;
  }

  /**
   * Report the stack trace for a defined `Error`.
   */
  reportStackTrace(error) {
    this.addSection('Stack Trace');
    this.contents += String(error.stack);
    this.contents += '\n';
    return this;
  }

  /**
   * Report information about the platform and operating system.
   */
  reportSystem() {
    this.addSection('System');
    this.add('OS', os__default.default.platform());
    this.add('Architecture', os__default.default.arch());
    this.add('CPUs', os__default.default.cpus().length);
    this.add('Uptime (sec)', os__default.default.uptime());
    this.add('Memory usage', `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100} MB`);

    // istanbul ignore next
    if (process.platform !== 'win32') {
      this.add('Group ID', process.getgid());
      this.add('User ID', process.getuid());
    }
    return this;
  }

  /**
   * Report npm package versions for all that match the defined pattern.
   * Only searches in the root node modules folder and _will not_ work with PnP.
   */
  reportPackageVersions(patterns, title = 'Packages') {
    this.addSection(title);
    const map = new Map();
    glob__default.default.sync(common.toArray(patterns).map(pattern => path__default.default.join('./node_modules', pattern)), {
      absolute: true,
      onlyDirectories: true,
      onlyFiles: false
    }).forEach(pkgPath => {
      const pkg = require(path__default.default.join(pkgPath, 'package.json'));
      map.set(pkg.name, pkg.version);
    });
    map.forEach((version, name) => {
      this.add(name, version);
    });
    return this;
  }

  /**
   * Write the reported content to the defined file path.
   */
  write(filePath) {
    fs__default.default.writeFileSync(String(filePath), this.contents.trim(), 'utf8');
    return this;
  }
}
exports.CrashReporter = CrashReporter;
//# sourceMappingURL=CrashReporter.cjs.map
