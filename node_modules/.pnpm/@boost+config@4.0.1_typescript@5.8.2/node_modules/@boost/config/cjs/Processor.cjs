'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
const common = require('@boost/common');
const optimal = require('@boost/common/optimal');
const debug = require('@boost/debug');
const internal = require('@boost/internal');
const mergeArray = require('./helpers/mergeArray.cjs');
const mergeObject = require('./helpers/mergeObject.cjs');

/* eslint-disable no-await-in-loop */
class Processor extends common.Contract {
  constructor(options) {
    super(options);
    this.debug = void 0;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.handlers = {};
    this.debug = debug.createDebugger(['processor', this.options.name]);
  }
  blueprint(schemas) {
    const bool = schemas.bool,
      string = schemas.string;
    return {
      defaultWhenUndefined: bool(true),
      name: string().required().camelCase(),
      validate: bool(true)
    };
  }

  /**
   * Add a handler to process a key-value setting pair.
   */
  addHandler(key, handler) {
    this.debug('Adding process handler for %s', internal.color.symbol(key));
    this.handlers[key] = handler;
    return this;
  }

  /**
   * Return a handler, or null, for the setting key.
   */
  getHandler(key) {
    return this.handlers[key] || null;
  }

  /**
   * Process a list of loaded config files into a single config object.
   * Use the defined process handlers, or the default processing rules,
   * to generate the final config object.
   */
  async process(defaults, configs, blueprint) {
    const _this$options = this.options,
      defaultWhenUndefined = _this$options.defaultWhenUndefined,
      validate = _this$options.validate;
    const config = _objectSpread({}, defaults);
    this.debug('Processing %d configs into a single and final result', configs.length);
    for (const next of configs) {
      // Validate next config object
      if (validate) {
        optimal.optimal(blueprint, {
          file: next.path.path()
        }).validate(next.config);
      }

      // Merge properties into previous object
      for (const _ref of Object.entries(next.config)) {
        var _ref2 = _slicedToArray(_ref, 2);
        const key = _ref2[0];
        const value = _ref2[1];
        const name = key;
        const nextValue = value;
        const prevValue = config[name];
        const handler = this.getHandler(name);
        if (handler) {
          config[name] = await handler(prevValue, nextValue);
        } else if (common.isObject(prevValue) && common.isObject(nextValue)) {
          config[name] = mergeObject.mergeObject(prevValue, nextValue);
        } else if (Array.isArray(prevValue) && Array.isArray(nextValue)) {
          config[name] = mergeArray.mergeArray(prevValue, nextValue);
        } else {
          config[name] = nextValue;
        }

        // Reset to default value if undefined is present
        if (config[name] === undefined && defaultWhenUndefined) {
          config[name] = defaults[name];
        }
      }
    }
    return config;
  }
}
exports.Processor = Processor;
//# sourceMappingURL=Processor.cjs.map
