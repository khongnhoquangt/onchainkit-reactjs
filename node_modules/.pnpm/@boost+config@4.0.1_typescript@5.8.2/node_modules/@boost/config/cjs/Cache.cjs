'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
const fs = require('fs');
const common = require('@boost/common');
const ConfigError = require('./ConfigError.cjs');
const _interopDefault = e => e && e.__esModule ? e : {
  default: e
};
const fs__default = /*#__PURE__*/_interopDefault(fs);
class Cache {
  constructor() {
    this.configDir = void 0;
    this.dirFilesCache = {};
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.fileContentCache = {};
    this.pkgPath = void 0;
    this.rootDir = void 0;
  }
  async cacheFileContents(path, commit) {
    const key = path.path();
    const cache = this.fileContentCache[key];
    const stats = await fs__default.default.promises.stat(path.path());
    if (cache && cache.mtime === stats.mtimeMs) {
      return cache.content;
    }
    const content = await commit();
    this.fileContentCache[key] = {
      content,
      exists: true,
      mtime: stats.mtimeMs
    };
    return content;
  }
  async cacheFilesInDir(dir, hash, commit) {
    const key = dir.path() + hash;
    if (this.dirFilesCache[key]) {
      return this.dirFilesCache[key];
    }
    const files = await commit();
    this.dirFilesCache[key] = files;
    return files;
  }
  clearFileCache() {
    this.fileContentCache = {};
  }
  clearFinderCache() {
    this.dirFilesCache = {};
  }
  getFileCache(path) {
    return this.fileContentCache[path.path()] || null;
  }
  markMissingFile(path) {
    this.fileContentCache[path.path()] = {
      content: null,
      exists: false,
      mtime: 0
    };
    return this;
  }
  setRootDir(dir) {
    const root = common.Path.resolve(dir);
    if (!root.isDirectory()) {
      throw new ConfigError.ConfigError('ROOT_INVALID_DIR');
    }
    this.rootDir = root;
    return this;
  }
}
exports.Cache = Cache;
//# sourceMappingURL=Cache.cjs.map
