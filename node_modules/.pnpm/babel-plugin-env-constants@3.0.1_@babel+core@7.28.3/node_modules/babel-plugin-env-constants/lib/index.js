'use strict';

require('./types.js');
const core = require('@babel/core');
const exprs = {
  DEV: ['!==', 'production'],
  PROD: ['===', 'production'],
  TEST: ['===', 'test']
};
function envConstantsPlugin() {
  return {
    visitor: {
      Identifier: {
        enter(path) {
          Object.entries(exprs).forEach(([expr, [op, env]]) => {
            if (!path.isIdentifier({
              name: `__${expr}__`
            })) {
              return;
            }

            // const __DEV__ = var;
            if (path.parentPath.isVariableDeclarator()) {
              return;
            }

            // { __DEV__: var }
            // { [__DEV__]: var }
            if (path.parentPath.isObjectProperty() && path.parentPath.node.value !== path.node) {
              return;
            }

            // obj.__DEV__ = var;
            if (path.parentPath.isMemberExpression()) {
              return;
            }
            path.replaceWith(core.types.binaryExpression(op, core.types.memberExpression(core.types.memberExpression(core.types.identifier('process'), core.types.identifier('env'), false), core.types.identifier('NODE_ENV'), false), core.types.stringLiteral(env)));
          });
        }
      }
    }
  };
}
module.exports = envConstantsPlugin;
//# sourceMappingURL=index.js.map
