"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => preserveUseClientDirective
});
module.exports = __toCommonJS(src_exports);
function preserveUseClientDirective() {
  const useClientFiles = /* @__PURE__ */ new Set();
  return {
    name: "preserve-use-client-directive",
    transform(code, id) {
      const firstLine = code.split("\n")[0].trim();
      if (firstLine === "'use client';" || firstLine === '"use client";') {
        useClientFiles.add(id);
      }
      return null;
    },
    generateBundle(options, bundle) {
      for (const [, fileData] of Object.entries(bundle)) {
        if (fileData.type === "chunk" && fileData.moduleIds.some((id) => useClientFiles.has(id))) {
          fileData.code = `'use client';
${fileData.code}`;
        }
      }
    }
  };
}
