{"version":3,"file":"useGetTransactionToastAction.js","sources":["../../../src/transaction/hooks/useGetTransactionToastAction.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { getChainExplorer } from '../../core/network/getChainExplorer';\nimport { cn, color, text } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionToastAction() {\n  const { chainId, errorMessage, onSubmit, transactionHash, transactionId } =\n    useTransactionContext();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const accountChainId = chainId ?? useChainId();\n\n  const { showCallsStatus } = useShowCallsStatus();\n\n  return useMemo(() => {\n    const chainExplorer = getChainExplorer(accountChainId);\n\n    let actionElement: ReactNode = null;\n\n    // EOA will have txn hash\n    if (transactionHash) {\n      actionElement = (\n        <a\n          href={`${chainExplorer}/tx/${transactionHash}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </a>\n      );\n    }\n\n    // SW will have txn id\n    if (transactionId) {\n      actionElement = (\n        <button\n          onClick={() => showCallsStatus({ id: transactionId })}\n          type=\"button\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </button>\n      );\n    }\n\n    if (errorMessage) {\n      actionElement = (\n        <button type=\"button\" onClick={onSubmit}>\n          <span className={cn(text.label1, color.primary)}>Try again</span>\n        </button>\n      );\n    }\n\n    return { actionElement };\n  }, [\n    accountChainId,\n    errorMessage,\n    onSubmit,\n    showCallsStatus,\n    transactionHash,\n    transactionId,\n  ]);\n}\n"],"names":[],"mappings":";;;;;;;AAQO,SAAS,+BAA+B;AAC7C,QAAM,EAAE,SAAS,cAAc,UAAU,iBAAiB,cAAA,IACxD,sBAAA;AAEF,QAAM,iBAAiB,WAAW,WAAA;AAElC,QAAM,EAAE,gBAAA,IAAoB,mBAAA;AAE5B,SAAO,QAAQ,MAAM;AACnB,UAAM,gBAAgB,iBAAiB,cAAc;AAErD,QAAI,gBAA2B;AAG/B,QAAI,iBAAiB;AACnB,sBACE;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,GAAG,aAAa,OAAO,eAAe;AAAA,UAC5C,QAAO;AAAA,UACP,KAAI;AAAA,UAEJ,UAAA,uBAAC,UAAK,WAAW,GAAG,KAAK,QAAQ,MAAM,OAAO,GAAG,UAAA,mBAAA,GAAjD,QAAA,OAAA;AAAA,YAAA,UAAA;AAAA,YAAA,YAAA;AAAA,YAAA,cAAA;AAAA,UAAA,GAAA,IAEA;AAAA,QAAA;AAAA,QAPF;AAAA,QAAA;AAAA,QAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAUJ;AAGA,QAAI,eAAe;AACjB,sBACE;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,SAAS,MAAM,gBAAgB,EAAE,IAAI,eAAe;AAAA,UACpD,MAAK;AAAA,UAEL,UAAA,uBAAC,UAAK,WAAW,GAAG,KAAK,QAAQ,MAAM,OAAO,GAAG,UAAA,mBAAA,GAAjD,QAAA,OAAA;AAAA,YAAA,UAAA;AAAA,YAAA,YAAA;AAAA,YAAA,cAAA;AAAA,UAAA,GAAA,IAEA;AAAA,QAAA;AAAA,QANF;AAAA,QAAA;AAAA,QAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IASJ;AAEA,QAAI,cAAc;AAChB,sBACE,uBAAC,UAAA,EAAO,MAAK,UAAS,SAAS,UAC7B,UAAA,uBAAC,QAAA,EAAK,WAAW,GAAG,KAAK,QAAQ,MAAM,OAAO,GAAG,UAAA,YAAA,GAAjD,QAAA,OAAA;AAAA,QAAA,UAAA;AAAA,QAAA,YAAA;AAAA,QAAA,cAAA;AAAA,MAAA,GAAA,IAA0D,EAAA,GAD5D,QAAA,OAAA;AAAA,QAAA,UAAA;AAAA,QAAA,YAAA;AAAA,QAAA,cAAA;AAAA,MAAA,GAAA,IAEA;AAAA,IAEJ;AAEA,WAAO,EAAE,cAAA;AAAA,EACX,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH;"}