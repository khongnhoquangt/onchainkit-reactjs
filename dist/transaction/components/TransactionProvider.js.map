{"version":3,"file":"TransactionProvider.js","sources":["../../../src/transaction/components/TransactionProvider.tsx"],"sourcesContent":["import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport type { Address } from 'viem';\nimport {\n  useAccount,\n  useConfig,\n  useSwitchChain,\n  useWaitForTransactionReceipt,\n} from 'wagmi';\nimport { waitForTransactionReceipt } from 'wagmi/actions';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport {\n  TransactionEvent,\n  type TransactionEventData,\n} from '../../core/analytics/types';\nimport { Capabilities } from '../../core/constants';\nimport { useCapabilitiesSafe } from '../../internal/hooks/useCapabilitiesSafe';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport { useCallsStatus } from '../hooks/useCallsStatus';\nimport { useSendCall } from '../hooks/useSendCall';\nimport { useSendCalls } from '../hooks/useSendCalls';\nimport { useSendWalletTransactions } from '../hooks/useSendWalletTransactions';\nimport type {\n  LifecycleStatus,\n  TransactionContextType,\n  TransactionProviderReact,\n} from '../types';\nimport { getPaymasterUrl } from '../utils/getPaymasterUrl';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\nconst emptyContext = {} as TransactionContextType;\nexport const TransactionContext =\n  createContext<TransactionContextType>(emptyContext);\n\nexport function useTransactionContext() {\n  const context = useContext(TransactionContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useTransactionContext must be used within a Transaction component',\n    );\n  }\n  return context;\n}\n\nexport function TransactionProvider({\n  calls,\n  capabilities: transactionCapabilities,\n  chainId,\n  children,\n  contracts,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n  resetAfter,\n}: TransactionProviderReact) {\n  // Core Hooks\n  const account = useAccount();\n  const config = useConfig();\n  const { config: { paymaster } = { paymaster: undefined } } = useOnchainKit();\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [errorCode, setErrorCode] = useState('');\n  const [isToastVisible, setIsToastVisible] = useState(false);\n  const [lifecycleStatus, setLifecycleStatus] = useState<LifecycleStatus>({\n    statusName: 'init',\n    statusData: null,\n  }); // Component lifecycle\n  const [transactionId, setTransactionId] = useState('');\n  const [transactionCount, setTransactionCount] = useState<\n    number | undefined\n  >();\n  const [transactionHashList, setTransactionHashList] = useState<Address[]>([]);\n  const transactions = calls || contracts;\n\n  // Retrieve wallet capabilities\n  const walletCapabilities = useCapabilitiesSafe({\n    chainId,\n  });\n\n  const { switchChainAsync } = useSwitchChain();\n\n  // Validate `calls` and `contracts` props\n  if (!contracts && !calls) {\n    throw new Error(\n      'Transaction: calls or contracts must be provided as a prop to the Transaction component.',\n    );\n  }\n\n  // Validate `calls` and `contracts` props\n  if (calls && contracts) {\n    throw new Error(\n      'Transaction: Only one of contracts or calls can be provided as a prop to the Transaction component.',\n    );\n  }\n\n  // useSendCalls or useSendCall\n  // Used for contract calls with raw calldata.\n  const {\n    status: statusSendCalls,\n    sendCallsAsync,\n    reset: resetSendCalls,\n  } = useSendCalls({\n    setLifecycleStatus,\n    setTransactionId,\n  });\n\n  const {\n    status: statusSendCall,\n    sendCallAsync,\n    data: singleTransactionHash,\n    reset: resetSendCall,\n  } = useSendCall({\n    setLifecycleStatus,\n    transactionHashList,\n  });\n\n  // Transaction Status\n  // For batched, use statusSendCalls\n  // For single, use statusSendCall\n  const transactionStatus = useMemo(() => {\n    if (walletCapabilities[Capabilities.AtomicBatch]?.supported) {\n      return statusSendCalls;\n    }\n    return statusSendCall;\n  }, [statusSendCall, statusSendCalls, walletCapabilities]);\n\n  const capabilities = useMemo(() => {\n    if (isSponsored && paymaster) {\n      return {\n        paymasterService: { url: paymaster },\n        // this needs to be below so devs can override default paymaster\n        // with their personal paymaster in production playgroundd\n        ...transactionCapabilities,\n      };\n    }\n    return transactionCapabilities;\n  }, [isSponsored, paymaster, transactionCapabilities]);\n\n  // useSendWalletTransactions\n  // Used to send transactions based on the transaction type. Can be of type calls or contracts.\n  const sendWalletTransactions = useSendWalletTransactions({\n    capabilities,\n    sendCallAsync,\n    sendCallsAsync,\n    walletCapabilities,\n  });\n\n  const { transactionHash: batchedTransactionHash, status: callStatus } =\n    useCallsStatus({\n      setLifecycleStatus,\n      transactionId,\n    });\n\n  const { data: receipt } = useWaitForTransactionReceipt({\n    hash: singleTransactionHash || batchedTransactionHash,\n  });\n\n  const { sendAnalytics } = useAnalytics();\n\n  const handleAnalytics = useCallback(\n    (event: TransactionEvent, data: TransactionEventData[TransactionEvent]) => {\n      sendAnalytics(event, data);\n    },\n    [sendAnalytics],\n  );\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    setErrorMessage('');\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      setErrorMessage(lifecycleStatus.statusData.message);\n      setErrorCode(lifecycleStatus.statusData.code);\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Transaction Legacy Executed\n    if (lifecycleStatus.statusName === 'transactionLegacyExecuted') {\n      setTransactionHashList(lifecycleStatus.statusData.transactionHashList);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.({\n        transactionReceipts: lifecycleStatus.statusData.transactionReceipts,\n      });\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n  ]);\n\n  // Set transaction pending status when writeContracts or writeContract is pending\n  useEffect(() => {\n    if (transactionStatus === 'pending') {\n      setLifecycleStatus({\n        statusName: 'transactionPending',\n        statusData: null,\n      });\n    }\n  }, [transactionStatus]);\n\n  // Trigger success status when receipt is generated by useWaitForTransactionReceipt\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: [receipt],\n      },\n    });\n    if (resetAfter) {\n      // Reset all internal state\n      const timeoutId = setTimeout(() => {\n        setErrorMessage('');\n        setErrorCode('');\n        setIsToastVisible(false);\n        setTransactionId('');\n        setTransactionHashList([]);\n        setTransactionCount(undefined);\n        resetSendCalls();\n        resetSendCall();\n      }, resetAfter);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [receipt, resetAfter, resetSendCalls, resetSendCall]);\n\n  // When all transactions are successful, get the receipts\n  const getTransactionLegacyReceipts = useCallback(async () => {\n    const receipts = [];\n    for (const hash of transactionHashList) {\n      try {\n        const txnReceipt = await waitForTransactionReceipt(config, {\n          hash,\n          chainId,\n        });\n        receipts.push(txnReceipt);\n      } catch (err) {\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmTPc01', // Transaction module TransactionProvider component 01 error\n            error: JSON.stringify(err),\n            message: GENERIC_ERROR_MESSAGE,\n          },\n        });\n      }\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: receipts,\n      },\n    });\n  }, [chainId, config, transactionHashList]);\n\n  useEffect(() => {\n    if (\n      !transactions ||\n      transactionHashList.length !== transactionCount ||\n      transactionCount < 2\n    ) {\n      return;\n    }\n    getTransactionLegacyReceipts();\n  }, [\n    transactions,\n    transactionCount,\n    transactionHashList,\n    getTransactionLegacyReceipts,\n  ]);\n\n  const switchChain = useCallback(\n    async (targetChainId: number | undefined) => {\n      if (targetChainId && account.chainId !== targetChainId) {\n        await switchChainAsync({ chainId: targetChainId });\n      }\n    },\n    [account.chainId, switchChainAsync],\n  );\n\n  const buildTransaction = useCallback(async () => {\n    setLifecycleStatus({\n      statusName: 'buildingTransaction',\n      statusData: null,\n    });\n    try {\n      handleAnalytics(TransactionEvent.TransactionInitiated, {\n        address: account.address,\n      });\n      const resolvedTransactions = await (typeof transactions === 'function'\n        ? transactions()\n        : Promise.resolve(transactions));\n      setTransactionCount(resolvedTransactions?.length);\n      return resolvedTransactions;\n    } catch (err) {\n      handleAnalytics(TransactionEvent.TransactionFailure, {\n        error: (err as Error).message,\n        metadata: {\n          code: errorCode,\n        },\n      });\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc04', // Transaction module TransactionProvider component 04 error\n          error: JSON.stringify(err),\n          message: 'Error building transactions',\n        },\n      });\n      return undefined;\n    }\n  }, [transactions, handleAnalytics, account.address, errorCode]);\n\n  const handleSubmit = useCallback(async () => {\n    setErrorMessage('');\n    setIsToastVisible(true);\n    try {\n      // Switch chain before attempting transactions\n      await switchChain(chainId);\n      const resolvedTransactions = await buildTransaction();\n      await sendWalletTransactions(resolvedTransactions);\n    } catch (err) {\n      const errorMessage = isUserRejectedRequestError(err)\n        ? 'Request denied.'\n        : GENERIC_ERROR_MESSAGE;\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc03', // Transaction module TransactionProvider component 03 error\n          error: JSON.stringify(err),\n          message: errorMessage,\n        },\n      });\n    }\n  }, [buildTransaction, chainId, sendWalletTransactions, switchChain]);\n\n  const value = useValue({\n    chainId,\n    errorCode,\n    errorMessage,\n    isLoading: callStatus === 'PENDING',\n    isToastVisible,\n    lifecycleStatus,\n    onSubmit: handleSubmit,\n    paymasterUrl: getPaymasterUrl(capabilities),\n    receipt,\n    setIsToastVisible,\n    setLifecycleStatus,\n    setTransactionId,\n    transactions,\n    transactionId,\n    transactionHash: singleTransactionHash || batchedTransactionHash,\n    transactionCount,\n  });\n\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n\n    if (receipt.status === 'success') {\n      handleAnalytics(TransactionEvent.TransactionSuccess, {\n        paymaster: Boolean(isSponsored && paymaster),\n        address: account.address,\n        transactionHash: receipt.transactionHash,\n      });\n    } else {\n      handleAnalytics(TransactionEvent.TransactionFailure, {\n        error: 'Transaction failed',\n        metadata: {\n          code: errorCode,\n        },\n      });\n    }\n  }, [\n    receipt,\n    handleAnalytics,\n    isSponsored,\n    paymaster,\n    account.address,\n    errorCode,\n  ]);\n\n  return (\n    <TransactionContext.Provider value={value}>\n      {children}\n    </TransactionContext.Provider>\n  );\n}\n"],"names":["errorMessage"],"mappings":"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"}