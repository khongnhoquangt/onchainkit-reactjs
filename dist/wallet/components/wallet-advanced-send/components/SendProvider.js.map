{"version":3,"file":"SendProvider.js","sources":["../../../../../src/wallet/components/wallet-advanced-send/components/SendProvider.tsx"],"sourcesContent":["import type { PortfolioTokenWithFiatValue } from '@/api/types';\nimport { RequestContext } from '@/core/network/constants';\nimport { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport { usePriceQuote } from '@/internal/hooks/usePriceQuote';\nimport { useValue } from '@/internal/hooks/useValue';\nimport { isApiError } from '@/internal/utils/isApiResponseError';\nimport { truncateDecimalPlaces } from '@/internal/utils/truncateDecimalPlaces';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { formatUnits } from 'viem';\nimport { useAccount } from 'wagmi';\nimport { usePortfolio } from '../../../hooks/usePortfolio';\nimport type {\n  SendContextType,\n  SendLifecycleStatus,\n  SendProviderReact,\n} from '../types';\nimport { useRecipientState } from '../hooks/useRecipientState';\n\nconst emptyContext = {} as SendContextType;\n\nconst SendContext = createContext(emptyContext);\n\nexport function useSendContext() {\n  const sendContext = useContext(SendContext);\n  if (sendContext === emptyContext) {\n    throw new Error('useSendContext must be used within a SendProvider');\n  }\n  return sendContext;\n}\n\nexport function SendProvider({ children }: SendProviderReact) {\n  // state for token selection\n  const [selectedToken, setSelectedToken] =\n    useState<PortfolioTokenWithFiatValue | null>(null);\n  const [selectedInputType, setSelectedInputType] = useState<'fiat' | 'crypto'>(\n    'crypto',\n  );\n  const [fiatAmount, setFiatAmount] = useState<string | null>(null);\n  const [cryptoAmount, setCryptoAmount] = useState<string | null>(null);\n\n  const {\n    recipientState,\n    updateRecipientInput,\n    validateRecipientInput,\n    selectRecipient,\n    deselectRecipient,\n  } = useRecipientState();\n\n  // lifecycle status\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<SendLifecycleStatus>({\n      statusName: 'init',\n      statusData: {\n        isMissingRequiredField: true,\n      },\n    });\n\n  const hasSufficientBalance = useMemo(() => {\n    if (!selectedToken) {\n      return false;\n    }\n\n    if (selectedInputType === 'fiat') {\n      return Number(fiatAmount) <= selectedToken.fiatBalance;\n    }\n\n    return (\n      Number(cryptoAmount) <=\n      Number(\n        formatUnits(\n          BigInt(selectedToken.cryptoBalance),\n          selectedToken.decimals,\n        ),\n      )\n    );\n  }, [selectedInputType, selectedToken, cryptoAmount, fiatAmount]);\n\n  // fetch & set ETH balance\n  const { address } = useAccount();\n  const { data: portfolioData } = usePortfolio(\n    { address },\n    RequestContext.Wallet,\n  );\n  const ethHolding = portfolioData?.tokenBalances?.find(\n    (token) => token.address === '',\n  );\n  const ethBalance = ethHolding\n    ? Number(formatUnits(BigInt(ethHolding.cryptoBalance), ethHolding.decimals))\n    : 0;\n  const isInitialized = ethBalance !== undefined;\n\n  useEffect(() => {\n    if (!ethBalance || ethBalance === 0) {\n      updateLifecycleStatus({\n        statusName: 'fundingWallet',\n        statusData: {\n          isMissingRequiredField: true,\n        },\n      });\n      return;\n    }\n\n    updateLifecycleStatus({\n      statusName: 'selectingAddress',\n      statusData: {\n        isMissingRequiredField: true,\n      },\n    });\n  }, [ethBalance, updateLifecycleStatus]);\n\n  // fetch & set exchange rate\n  const { isLoading: exchangeRateLoading, data: exchangeRateData } =\n    usePriceQuote(\n      {\n        token: selectedToken?.address === '' ? 'ETH' : selectedToken?.address,\n      },\n      RequestContext.Wallet,\n    );\n  const exchangeRate = useMemo(() => {\n    if (\n      !exchangeRateData ||\n      isApiError(exchangeRateData) ||\n      exchangeRateData.priceQuotes.length === 0\n    ) {\n      return 0;\n    }\n\n    return 1 / Number(exchangeRateData.priceQuotes[0].price);\n  }, [exchangeRateData]);\n\n  const handleTokenSelection = useCallback(\n    (token: PortfolioTokenWithFiatValue) => {\n      setSelectedToken(token);\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: {\n          isMissingRequiredField: true,\n          sufficientBalance: false,\n        },\n      });\n    },\n    [updateLifecycleStatus],\n  );\n\n  const handleResetTokenSelection = useCallback(() => {\n    setSelectedToken(null);\n    setFiatAmount(null);\n    setCryptoAmount(null);\n    updateLifecycleStatus({\n      statusName: 'selectingToken',\n      statusData: {\n        isMissingRequiredField: true,\n      },\n    });\n  }, [updateLifecycleStatus]);\n\n  const handleFiatAmountChange = useCallback(\n    (value: string) => {\n      setFiatAmount(value);\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: {\n          isMissingRequiredField: true,\n          sufficientBalance: hasSufficientBalance,\n        },\n      });\n    },\n    [updateLifecycleStatus, hasSufficientBalance],\n  );\n\n  const handleCryptoAmountChange = useCallback(\n    (value: string) => {\n      const truncatedValue = truncateDecimalPlaces(value, 8);\n      setCryptoAmount(truncatedValue);\n      updateLifecycleStatus({\n        statusName: 'amountChange',\n        statusData: {\n          isMissingRequiredField: true,\n          sufficientBalance: hasSufficientBalance,\n        },\n      });\n    },\n    [updateLifecycleStatus, hasSufficientBalance],\n  );\n\n  const value = useValue<SendContextType>({\n    isInitialized,\n    lifecycleStatus,\n    updateLifecycleStatus,\n    ethBalance,\n    recipientState,\n    updateRecipientInput,\n    validateRecipientInput,\n    selectRecipient,\n    deselectRecipient,\n    selectedToken,\n    handleTokenSelection,\n    handleResetTokenSelection,\n    fiatAmount,\n    handleFiatAmountChange,\n    cryptoAmount,\n    handleCryptoAmountChange,\n    exchangeRate,\n    exchangeRateLoading,\n    selectedInputType,\n    setSelectedInputType,\n  });\n\n  return <SendContext.Provider value={value}>{children}</SendContext.Provider>;\n}\n"],"names":["value"],"mappings":"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"}