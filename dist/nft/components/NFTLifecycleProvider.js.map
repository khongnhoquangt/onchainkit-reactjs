{"version":3,"file":"NFTLifecycleProvider.js","sources":["../../../src/nft/components/NFTLifecycleProvider.tsx"],"sourcesContent":["import { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport { useValue } from '@/internal/hooks/useValue';\nimport { createContext, useContext, useEffect } from 'react';\nimport type {\n  LifecycleStatus,\n  NFTLifecycleContextType,\n  NFTLifecycleProviderReact,\n} from '../types';\n\nconst emptyContext = {} as NFTLifecycleContextType;\n\nexport const NFTLifecycleContext =\n  createContext<NFTLifecycleContextType>(emptyContext);\n\nexport function useNFTLifecycleContext() {\n  const context = useContext(NFTLifecycleContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useNFTLifecycleContext must be used within an NFTView or NFTMint component',\n    );\n  }\n  return context;\n}\n\nexport function NFTLifecycleProvider({\n  type,\n  onStatus,\n  onError,\n  onSuccess,\n  children,\n}: NFTLifecycleProviderReact) {\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: 'init',\n      statusData: null,\n    }); // Component lifecycle\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.(lifecycleStatus.statusData?.transactionReceipts?.[0]);\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n  ]);\n\n  const value = useValue({\n    lifecycleStatus,\n    type,\n    updateLifecycleStatus,\n  });\n\n  return (\n    <NFTLifecycleContext.Provider value={value}>\n      {children}\n    </NFTLifecycleContext.Provider>\n  );\n}\n"],"names":[],"mappings":";;;;AASA,MAAM,eAAe,CAAA;AAEd,MAAM,sBACX,cAAuC,YAAY;AAE9C,SAAS,yBAAyB;AACvC,QAAM,UAAU,WAAW,mBAAmB;AAC9C,MAAI,YAAY,cAAc;AAC5B,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAAA,EAEJ;AACA,SAAO;AACT;AAEO,SAAS,qBAAqB;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA8B;AAC5B,QAAM,CAAC,iBAAiB,qBAAqB,IAC3C,mBAAoC;AAAA,IAClC,YAAY;AAAA,IACZ,YAAY;AAAA,EAAA,CACb;AAGH,YAAU,MAAM;;AAEd,QAAI,gBAAgB,eAAe,SAAS;AAC1C,yCAAU,gBAAgB;AAAA,IAC5B;AAEA,QAAI,gBAAgB,eAAe,WAAW;AAC5C,8CAAY,2BAAgB,eAAhB,mBAA4B,wBAA5B,mBAAkD;AAAA,IAChE;AAEA,yCAAW;AAAA,EACb,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA;AAAA,IAChB,gBAAgB;AAAA;AAAA,EAAA,CACjB;AAED,QAAM,QAAQ,SAAS;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,SACE,uBAAC,oBAAoB,UAApB,EAA6B,OAC3B,SAAA,GADH,QAAA,OAAA;AAAA,IAAA,UAAA;AAAA,IAAA,YAAA;AAAA,IAAA,cAAA;AAAA,EAAA,GAAA,IAEA;AAEJ;"}