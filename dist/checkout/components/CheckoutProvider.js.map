{"version":3,"file":"CheckoutProvider.js","sources":["../../../src/checkout/components/CheckoutProvider.tsx"],"sourcesContent":["import { useLifecycleStatus } from '@/internal/hooks/useLifecycleStatus';\nimport { openPopup } from '@/internal/utils/openPopup';\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport type { Address, ContractFunctionParameters } from 'viem';\nimport { base } from 'viem/chains';\nimport { useAccount, useConnect, useSwitchChain } from 'wagmi';\nimport { useWaitForTransactionReceipt } from 'wagmi';\nimport { coinbaseWallet } from 'wagmi/connectors';\nimport { useWriteContracts } from 'wagmi/experimental';\nimport { useCallsStatus } from 'wagmi/experimental';\nimport { useAnalytics } from '../../core/analytics/hooks/useAnalytics';\nimport {\n  type AnalyticsEventData,\n  CheckoutEvent,\n} from '../../core/analytics/types';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { isUserRejectedRequestError } from '../../transaction/utils/isUserRejectedRequestError';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { useIsWalletACoinbaseSmartWallet } from '../../wallet/hooks/useIsWalletACoinbaseSmartWallet';\nimport {\n  GENERIC_ERROR_MESSAGE,\n  NO_CONNECTED_ADDRESS_ERROR,\n  NO_CONTRACTS_ERROR,\n  USER_REJECTED_ERROR,\n} from '../constants';\nimport { CHECKOUT_LIFECYCLESTATUS, CheckoutErrorCode } from '../constants';\nimport { useCommerceContracts } from '../hooks/useCommerceContracts';\nimport type {\n  CheckoutContextType,\n  CheckoutProviderReact,\n  LifecycleStatus,\n} from '../types';\nimport { ONRAMP_POPUP_HEIGHT, ONRAMP_POPUP_WIDTH } from '@/fund/constants';\nimport {\n  normalizeStatus,\n  normalizeTransactionId,\n} from '@/internal/utils/normalizeWagmi';\n\nconst emptyContext = {} as CheckoutContextType;\nexport const CheckoutContext = createContext<CheckoutContextType>(emptyContext);\n\nexport function useCheckoutContext() {\n  const context = useContext(CheckoutContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useCheckoutContext must be used within a Checkout component',\n    );\n  }\n  return context;\n}\n\nexport function CheckoutProvider({\n  chargeHandler,\n  children,\n  isSponsored,\n  onStatus,\n  productId,\n}: CheckoutProviderReact) {\n  // Core hooks\n  const {\n    config: { appearance, paymaster } = {\n      appearance: { name: undefined, logo: undefined },\n      paymaster: undefined,\n    },\n  } = useOnchainKit();\n  const { address, chainId, isConnected } = useAccount();\n  const { connectAsync } = useConnect();\n  const { switchChainAsync } = useSwitchChain();\n  const [chargeId, setChargeId] = useState('');\n  const [transactionId, setTransactionId] = useState('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const isSmartWallet = useIsWalletACoinbaseSmartWallet();\n  const { sendAnalytics } = useAnalytics();\n\n  // Refs\n  const fetchedDataUseEffect = useRef<boolean>(false);\n  const fetchedDataHandleSubmit = useRef<boolean>(false);\n  const userRejectedRef = useRef<boolean>(false);\n  const contractsRef = useRef<ContractFunctionParameters[] | null>();\n  const insufficientBalanceRef = useRef<boolean>(false);\n  const priceInUSDCRef = useRef<string | undefined>('');\n\n  // Component lifecycle\n  const [lifecycleStatus, updateLifecycleStatus] =\n    useLifecycleStatus<LifecycleStatus>({\n      statusName: CHECKOUT_LIFECYCLESTATUS.INIT,\n      statusData: {},\n    });\n\n  // Transaction hooks\n  const fetchContracts = useCommerceContracts({\n    chargeHandler,\n    productId,\n  });\n\n  // Helper function used in both `useEffect` and `handleSubmit` to fetch data from the Commerce API and set state and refs\n  const fetchData = useCallback(\n    async (address: Address) => {\n      updateLifecycleStatus({\n        statusName: CHECKOUT_LIFECYCLESTATUS.FETCHING_DATA,\n        statusData: {},\n      });\n      const {\n        contracts,\n        chargeId: hydratedChargeId,\n        insufficientBalance,\n        priceInUSDC,\n        error,\n      } = await fetchContracts(address);\n      if (error) {\n        setErrorMessage(GENERIC_ERROR_MESSAGE);\n        updateLifecycleStatus({\n          statusName: CHECKOUT_LIFECYCLESTATUS.ERROR,\n          statusData: {\n            code: CheckoutErrorCode.UNEXPECTED_ERROR,\n            error: (error as Error).name,\n            message: (error as Error).message,\n          },\n        });\n        return;\n      }\n      setChargeId(hydratedChargeId);\n      contractsRef.current = contracts;\n      insufficientBalanceRef.current = insufficientBalance;\n      priceInUSDCRef.current = priceInUSDC;\n      updateLifecycleStatus({\n        statusName: CHECKOUT_LIFECYCLESTATUS.READY,\n        statusData: {\n          chargeId,\n          contracts: contractsRef.current || [],\n        },\n      });\n    },\n    [chargeId, fetchContracts, updateLifecycleStatus],\n  );\n\n  const { status, writeContractsAsync } = useWriteContracts({\n    /* v8 ignore start */\n    mutation: {\n      onSuccess: (data) => {\n        setTransactionId(normalizeTransactionId(data));\n      },\n    },\n    /* v8 ignore stop */\n  });\n  const { data } = useCallsStatus({\n    id: transactionId,\n    query: {\n      /* v8 ignore next 5 */\n      refetchInterval: (query) => {\n        return normalizeStatus(query.state.data?.status) === 'success'\n          ? false\n          : 1000;\n      },\n      enabled: !!transactionId,\n    },\n  });\n  const transactionHash = data?.receipts?.[0]?.transactionHash;\n  const { data: receipt } = useWaitForTransactionReceipt({\n    hash: transactionHash,\n  });\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    onStatus?.(lifecycleStatus);\n  }, [\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n    onStatus,\n  ]);\n\n  // Set transaction pending status when writeContracts is pending\n  useEffect(() => {\n    if (status === 'pending') {\n      updateLifecycleStatus({\n        statusName: CHECKOUT_LIFECYCLESTATUS.PENDING,\n        statusData: {},\n      });\n    }\n  }, [status, updateLifecycleStatus]);\n\n  // Trigger success status when receipt is generated by useWaitForTransactionReceipt\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n    updateLifecycleStatus({\n      statusName: CHECKOUT_LIFECYCLESTATUS.SUCCESS,\n      statusData: {\n        transactionReceipts: [receipt],\n        chargeId: chargeId,\n        receiptUrl: `https://commerce.coinbase.com/pay/${chargeId}/receipt`,\n      },\n    });\n  }, [chargeId, receipt, updateLifecycleStatus]);\n\n  // We need to pre-load transaction data in `useEffect` when the wallet is already connected due to a Smart Wallet popup blocking issue in Safari iOS\n  useEffect(() => {\n    if (\n      lifecycleStatus.statusName === CHECKOUT_LIFECYCLESTATUS.INIT &&\n      address &&\n      !fetchedDataHandleSubmit.current\n    ) {\n      fetchedDataUseEffect.current = true;\n      fetchData(address);\n    }\n  }, [address, fetchData, lifecycleStatus]);\n\n  const handleAnalytics = useCallback(\n    (event: CheckoutEvent, data: AnalyticsEventData[CheckoutEvent]) => {\n      sendAnalytics(event, data);\n    },\n    [sendAnalytics],\n  );\n\n  // eslint-disable-next-line complexity\n  const handleSubmit = useCallback(async () => {\n    try {\n      handleAnalytics(CheckoutEvent.CheckoutInitiated, {\n        address,\n        amount: Number(priceInUSDCRef.current),\n        productId: productId || '',\n      });\n\n      // Open Coinbase Commerce receipt\n      if (lifecycleStatus.statusName === CHECKOUT_LIFECYCLESTATUS.SUCCESS) {\n        window.open(\n          `https://commerce.coinbase.com/pay/${chargeId}/receipt`,\n          '_blank',\n          'noopener,noreferrer',\n        );\n        return;\n      }\n      if (errorMessage === USER_REJECTED_ERROR) {\n        // Reset status if previous request was a rejection\n        setErrorMessage('');\n      }\n\n      let connectedAddress = address;\n      let connectedChainId = chainId;\n      if (!isConnected || !isSmartWallet) {\n        // Prompt for wallet connection\n        // This is defaulted to Coinbase Smart Wallet\n        fetchedDataHandleSubmit.current = true; // Set this here so useEffect does not run\n        const { accounts, chainId: _connectedChainId } = await connectAsync({\n          /* v8 ignore next 5 */\n          connector: coinbaseWallet({\n            appName: appearance?.name ?? undefined,\n            appLogoUrl: appearance?.logo ?? undefined,\n            preference: 'smartWalletOnly',\n          }),\n        });\n        connectedAddress = accounts[0];\n        connectedChainId = _connectedChainId;\n      }\n\n      // This shouldn't ever happen, but to make Typescript happy\n      /* v8 ignore start */\n      if (!connectedAddress) {\n        setErrorMessage(GENERIC_ERROR_MESSAGE);\n        updateLifecycleStatus({\n          statusName: CHECKOUT_LIFECYCLESTATUS.ERROR,\n          statusData: {\n            code: CheckoutErrorCode.UNEXPECTED_ERROR,\n            error: NO_CONNECTED_ADDRESS_ERROR,\n            message: NO_CONNECTED_ADDRESS_ERROR,\n          },\n        });\n        return;\n      }\n      /* v8 ignore stop */\n\n      // Fetch contracts if not already done in useEffect\n      // Don't re-fetch contracts if the user rejected the previous request, and just use the cached data\n      /* v8 ignore next 3 */\n      if (!fetchedDataUseEffect.current && !userRejectedRef.current) {\n        await fetchData(connectedAddress);\n      }\n\n      // Switch chain, if applicable\n      if (connectedChainId !== base.id) {\n        await switchChainAsync({ chainId: base.id });\n      }\n\n      // Check for sufficient balance\n      if (insufficientBalanceRef.current && priceInUSDCRef.current) {\n        openPopup({\n          url: `https://keys.coinbase.com/fund?asset=USDC&chainId=8453&presetCryptoAmount=${priceInUSDCRef.current}`,\n          target: '_blank',\n          height: ONRAMP_POPUP_HEIGHT,\n          width: ONRAMP_POPUP_WIDTH,\n        });\n        // Reset state\n        insufficientBalanceRef.current = false;\n        priceInUSDCRef.current = undefined;\n        fetchedDataUseEffect.current = false;\n        return;\n      }\n\n      // Contracts weren't successfully fetched from `fetchContracts`\n      if (!contractsRef.current || contractsRef.current.length === 0) {\n        setErrorMessage(GENERIC_ERROR_MESSAGE);\n        updateLifecycleStatus({\n          statusName: CHECKOUT_LIFECYCLESTATUS.ERROR,\n          statusData: {\n            code: CheckoutErrorCode.UNEXPECTED_ERROR,\n            error: NO_CONTRACTS_ERROR,\n            message: NO_CONTRACTS_ERROR,\n          },\n        });\n        return;\n      }\n\n      // Open keys.coinbase.com for payment\n      await writeContractsAsync({\n        contracts: contractsRef.current,\n        capabilities:\n          isSponsored && paymaster\n            ? {\n                paymasterService: {\n                  url: paymaster,\n                },\n              }\n            : undefined,\n      });\n    } catch (error) {\n      handleAnalytics(CheckoutEvent.CheckoutFailure, {\n        error: error instanceof Error ? error.message : 'Checkout failed',\n        metadata: { error: JSON.stringify(error) },\n      });\n\n      const isUserRejectedError =\n        (error as Error).message?.includes('User denied connection request') ||\n        isUserRejectedRequestError(error);\n      const errorCode = isUserRejectedError\n        ? CheckoutErrorCode.USER_REJECTED_ERROR\n        : CheckoutErrorCode.UNEXPECTED_ERROR;\n      const errorMessage = isUserRejectedError\n        ? USER_REJECTED_ERROR\n        : GENERIC_ERROR_MESSAGE;\n      if (isUserRejectedError) {\n        // Set the ref so that we can use the cached commerce API call\n        userRejectedRef.current = true;\n      }\n\n      setErrorMessage(errorMessage);\n      updateLifecycleStatus({\n        statusName: CHECKOUT_LIFECYCLESTATUS.ERROR,\n        statusData: {\n          code: errorCode,\n          error: JSON.stringify(error),\n          message: errorMessage,\n        },\n      });\n    }\n  }, [\n    address,\n    appearance,\n    chainId,\n    chargeId,\n    connectAsync,\n    errorMessage,\n    fetchData,\n    isConnected,\n    isSmartWallet,\n    isSponsored,\n    lifecycleStatus.statusName,\n    paymaster,\n    switchChainAsync,\n    updateLifecycleStatus,\n    writeContractsAsync,\n    handleAnalytics,\n    productId,\n  ]);\n\n  const value = useValue({\n    errorMessage,\n    lifecycleStatus,\n    onSubmit: handleSubmit,\n    updateLifecycleStatus,\n  });\n  return (\n    <CheckoutContext.Provider value={value}>\n      {children}\n    </CheckoutContext.Provider>\n  );\n}\n"],"names":["address","data","_a","errorMessage"],"mappings":"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"}