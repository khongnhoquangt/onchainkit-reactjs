{"version":3,"file":"QrCodeSvg.js","sources":["../../../../src/internal/components/QrCode/QrCodeSvg.tsx"],"sourcesContent":["import { useId, useMemo } from 'react';\nimport { useTheme } from '../../hooks/useTheme';\nimport {\n  GRADIENT_END_COORDINATES,\n  GRADIENT_START_COORDINATES,\n  QR_CODE_SIZE,\n  QR_LOGO_BACKGROUND_COLOR,\n  QR_LOGO_RADIUS,\n  QR_LOGO_SIZE,\n  linearGradientStops,\n  ockThemeToLinearGradientColorMap,\n  ockThemeToRadialGradientColorMap,\n  presetGradients,\n} from './gradientConstants';\nimport { useCorners } from './useCorners';\nimport { useDotsPath } from './useDotsPath';\nimport { useLogo } from './useLogo';\nimport { useMatrix } from './useMatrix';\n\nfunction coordinateAsPercentage(coordinate: number) {\n  return `${coordinate * 100}%`;\n}\n\nexport type QRCodeSVGProps = {\n  value?: string | null;\n  size?: number;\n  backgroundColor?: string;\n  logo?: React.ReactNode;\n  logoSize?: number;\n  logoBackgroundColor?: string;\n  logoMargin?: number;\n  logoBorderRadius?: number;\n  quietZone?: number;\n  quietZoneBorderRadius?: number;\n  ecl?: 'L' | 'M' | 'Q' | 'H';\n  gradientType?: 'radial' | 'linear';\n};\n\nexport function QrCodeSvg({\n  value,\n  size = QR_CODE_SIZE,\n  backgroundColor = '#ffffff',\n  logo,\n  logoSize = QR_LOGO_SIZE,\n  logoBackgroundColor = QR_LOGO_BACKGROUND_COLOR,\n  logoMargin = 5,\n  logoBorderRadius = QR_LOGO_RADIUS,\n  quietZone = 12,\n  quietZoneBorderRadius = 10,\n  ecl = 'Q',\n  gradientType = 'radial',\n}: QRCodeSVGProps) {\n  const gradientRadius = size * 0.55;\n  const gradientCenterPoint = size / 2;\n  const uid = useId();\n\n  const theme = useTheme();\n  const themeName = theme.split('-')[0];\n\n  const isRadialGradient = gradientType === 'radial';\n  const fillColor = isRadialGradient ? `url(#radialGrad-${uid})` : '#000000';\n  const bgColor = isRadialGradient\n    ? backgroundColor\n    : `url(#linearGrad-${uid})`;\n\n  const linearGradientColor =\n    ockThemeToLinearGradientColorMap[\n      themeName as keyof typeof ockThemeToLinearGradientColorMap\n    ] ?? ockThemeToLinearGradientColorMap.default;\n  const linearColors = [\n    linearGradientStops[linearGradientColor].startColor,\n    linearGradientStops[linearGradientColor].endColor,\n  ];\n\n  const radialGradientColor =\n    ockThemeToRadialGradientColorMap[\n      themeName as keyof typeof ockThemeToLinearGradientColorMap\n    ] ?? ockThemeToRadialGradientColorMap.default;\n  const presetGradientForColor =\n    presetGradients[radialGradientColor as keyof typeof presetGradients];\n\n  const matrix = useMatrix(ecl, value);\n  const corners = useCorners(size, matrix.length, bgColor, fillColor, uid);\n  const { x: x1, y: y1 } = GRADIENT_START_COORDINATES;\n  const { x: x2, y: y2 } = GRADIENT_END_COORDINATES;\n\n  const viewBox = useMemo(() => {\n    return [\n      -quietZone,\n      -quietZone,\n      size + quietZone * 2,\n      size + quietZone * 2,\n    ].join(' ');\n  }, [quietZone, size]);\n\n  const svgLogo = useLogo({\n    size,\n    logo,\n    logoSize,\n    logoBackgroundColor,\n    logoMargin,\n    logoBorderRadius,\n  });\n\n  const path = useDotsPath({\n    matrix,\n    size,\n    logoSize,\n    logoMargin,\n    logoBorderRadius,\n    hasLogo: !!logo,\n  });\n\n  if (!path || !value) {\n    return null;\n  }\n\n  return (\n    <svg viewBox={viewBox} width={size} height={size}>\n      <title>QR Code</title>\n      <defs>\n        {isRadialGradient ? (\n          <radialGradient\n            id={`radialGrad-${uid}`}\n            data-testid=\"radialGrad\"\n            rx={gradientRadius}\n            ry={gradientRadius}\n            cx={gradientCenterPoint}\n            cy={gradientCenterPoint}\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            {presetGradientForColor.map(([gradientColor, offset]) => (\n              <stop\n                key={`${gradientColor}${offset}`}\n                offset={offset}\n                stopColor={gradientColor}\n                stopOpacity={1}\n              />\n            ))}\n          </radialGradient>\n        ) : (\n          <linearGradient\n            id={`linearGrad-${uid}`}\n            data-testid=\"linearGrad\"\n            x1={coordinateAsPercentage(x1)}\n            y1={coordinateAsPercentage(y1)}\n            x2={coordinateAsPercentage(x2)}\n            y2={coordinateAsPercentage(y2)}\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop offset=\"0\" stopColor={linearColors[0]} />\n            <stop offset=\"1\" stopColor={linearColors[1]} />\n          </linearGradient>\n        )}\n      </defs>\n      <g>\n        <rect\n          rx={quietZoneBorderRadius}\n          ry={quietZoneBorderRadius}\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n          stroke={bgColor}\n          strokeWidth={2}\n        />\n      </g>\n      <g>\n        <path\n          d={path}\n          fill={fillColor}\n          strokeLinecap=\"butt\"\n          stroke={fillColor}\n          strokeWidth={0}\n          opacity={0.6}\n        />\n        {corners}\n        {svgLogo}\n      </g>\n    </svg>\n  );\n}\n"],"names":[],"mappings":"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"}