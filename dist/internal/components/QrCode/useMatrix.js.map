{"version":3,"file":"useMatrix.js","sources":["../../../../src/internal/components/QrCode/useMatrix.ts"],"sourcesContent":["import QRCode from 'qrcode';\nimport { useMemo } from 'react';\n\n/**\n * useMatrix generates a QR code matrix from a given value.\n * @param errorCorrectionLevel QR code error correction level (L, M, Q, H)\n * @param value String value to encode in QR code. useMatrix adds an 'ethereum:' prefix to the value as we only support EVM addresseses\n * @returns 2D array representing the QR code matrix, where 1 = black pixel and 0 = white pixel\n */\nexport function useMatrix(\n  errorCorrectionLevel: 'L' | 'M' | 'Q' | 'H',\n  value?: string | null,\n) {\n  const matrix = useMemo(() => {\n    if (!value) {\n      return [];\n    }\n\n    const transformedValue = `ethereum:${value}`;\n\n    const arr = Array.from(\n      QRCode.create(transformedValue, { errorCorrectionLevel }).modules.data,\n    );\n\n    const sqrt = Math.sqrt(arr.length);\n\n    return arr.reduce<number[][]>((rows, key, index) => {\n      if (index % sqrt === 0) {\n        rows.push([key]);\n      } else {\n        rows[rows.length - 1].push(key);\n      }\n      return rows;\n    }, []);\n  }, [errorCorrectionLevel, value]);\n  return matrix;\n}\n"],"names":[],"mappings":";;AASO,SAAS,UACd,sBACA,OACA;AACA,QAAM,SAAS,QAAQ,MAAM;AAC3B,QAAI,CAAC,OAAO;AACV,aAAO,CAAA;AAAA,IACT;AAEA,UAAM,mBAAmB,YAAY,KAAK;AAE1C,UAAM,MAAM,MAAM;AAAA,MAChB,OAAO,OAAO,kBAAkB,EAAE,qBAAA,CAAsB,EAAE,QAAQ;AAAA,IAAA;AAGpE,UAAM,OAAO,KAAK,KAAK,IAAI,MAAM;AAEjC,WAAO,IAAI,OAAmB,CAAC,MAAM,KAAK,UAAU;AAClD,UAAI,QAAQ,SAAS,GAAG;AACtB,aAAK,KAAK,CAAC,GAAG,CAAC;AAAA,MACjB,OAAO;AACL,aAAK,KAAK,SAAS,CAAC,EAAE,KAAK,GAAG;AAAA,MAChC;AACA,aAAO;AAAA,IACT,GAAG,CAAA,CAAE;AAAA,EACP,GAAG,CAAC,sBAAsB,KAAK,CAAC;AAChC,SAAO;AACT;"}