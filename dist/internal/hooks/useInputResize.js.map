{"version":3,"file":"useInputResize.js","sources":["../../../src/internal/hooks/useInputResize.ts"],"sourcesContent":["import { type RefObject, useCallback, useEffect } from 'react';\n\ntype InputResizeConfig = {\n  // Font size in rem units\n  baseFontSize: number;\n  minScale: number;\n};\n\nconst defaultConfig: InputResizeConfig = {\n  baseFontSize: 3.75, // 60px = 3.75rem at default browser font size\n  minScale: 0.01,\n};\n\nexport function useInputResize(\n  containerRef: RefObject<HTMLDivElement>,\n  wrapperRef: RefObject<HTMLDivElement>,\n  inputRef: RefObject<HTMLInputElement>,\n  measureRef: RefObject<HTMLSpanElement>,\n  labelRef: RefObject<HTMLSpanElement>,\n  config: Partial<InputResizeConfig> = {},\n) {\n  const { baseFontSize, minScale } = {\n    ...defaultConfig,\n    ...config,\n  };\n\n  const updateScale = useCallback(() => {\n    const container = containerRef.current;\n    const wrapper = wrapperRef.current;\n    const input = inputRef.current;\n    const measure = measureRef.current;\n    const label = labelRef.current;\n\n    if (!container || !wrapper || !input || !measure || !label) {\n      return;\n    }\n\n    // Set base font size in rem units\n    measure.style.fontSize = `${baseFontSize}rem`;\n    input.style.fontSize = `${baseFontSize}rem`;\n\n    // Get natural content width\n    const contentWidth = measure.clientWidth;\n    const availableWidth = container.clientWidth - label.clientWidth;\n\n    // Set input width to match content\n    input.style.width = `${contentWidth}px`;\n\n    if (contentWidth > availableWidth) {\n      const scale = availableWidth / contentWidth;\n      const finalScale = Math.max(scale, minScale);\n\n      // Apply scale to wrapper instead of input\n      wrapper.style.transform = `scale(${finalScale})`;\n      wrapper.style.transformOrigin = 'left center';\n    } else {\n      wrapper.style.transform = 'scale(1)';\n    }\n  }, [\n    baseFontSize,\n    minScale,\n    containerRef,\n    wrapperRef,\n    inputRef,\n    measureRef,\n    labelRef,\n  ]);\n\n  // Update on resize and font size change\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(updateScale);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [containerRef, updateScale]);\n\n  return updateScale;\n}\n"],"names":[],"mappings":";AAQA,MAAM,gBAAmC;AAAA,EACvC,cAAc;AAAA;AAAA,EACd,UAAU;AACZ;AAEO,SAAS,eACd,cACA,YACA,UACA,YACA,UACA,SAAqC,IACrC;AACA,QAAM,EAAE,cAAc,aAAa;AAAA,IACjC,GAAG;AAAA,IACH,GAAG;AAAA,EAAA;AAGL,QAAM,cAAc,YAAY,MAAM;AACpC,UAAM,YAAY,aAAa;AAC/B,UAAM,UAAU,WAAW;AAC3B,UAAM,QAAQ,SAAS;AACvB,UAAM,UAAU,WAAW;AAC3B,UAAM,QAAQ,SAAS;AAEvB,QAAI,CAAC,aAAa,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO;AAC1D;AAAA,IACF;AAGA,YAAQ,MAAM,WAAW,GAAG,YAAY;AACxC,UAAM,MAAM,WAAW,GAAG,YAAY;AAGtC,UAAM,eAAe,QAAQ;AAC7B,UAAM,iBAAiB,UAAU,cAAc,MAAM;AAGrD,UAAM,MAAM,QAAQ,GAAG,YAAY;AAEnC,QAAI,eAAe,gBAAgB;AACjC,YAAM,QAAQ,iBAAiB;AAC/B,YAAM,aAAa,KAAK,IAAI,OAAO,QAAQ;AAG3C,cAAQ,MAAM,YAAY,SAAS,UAAU;AAC7C,cAAQ,MAAM,kBAAkB;AAAA,IAClC,OAAO;AACL,cAAQ,MAAM,YAAY;AAAA,IAC5B;AAAA,EACF,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAGD,YAAU,MAAM;AACd,UAAM,YAAY,aAAa;AAC/B,QAAI,CAAC,WAAW;AACd;AAAA,IACF;AAEA,UAAM,iBAAiB,IAAI,eAAe,WAAW;AACrD,mBAAe,QAAQ,SAAS;AAEhC,WAAO,MAAM;AACX,qBAAe,WAAA;AAAA,IACjB;AAAA,EACF,GAAG,CAAC,cAAc,WAAW,CAAC;AAE9B,SAAO;AACT;"}