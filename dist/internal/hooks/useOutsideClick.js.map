{"version":3,"file":"useOutsideClick.js","sources":["../../../src/internal/hooks/useOutsideClick.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react';\n\nexport function useOutsideClick(\n  elRef: React.RefObject<HTMLElement>,\n  callback: () => void,\n) {\n  const handleClickOutside = useCallback(\n    (e: MouseEvent) => {\n      if (!elRef.current) {\n        return;\n      }\n\n      const isOutsideClick = !elRef.current.contains(e.target as Node);\n\n      const eventPath = e.composedPath?.();\n\n      const hasPortalOrigin = eventPath?.some(\n        (el) =>\n          el instanceof HTMLElement && el.hasAttribute('data-portal-origin'),\n      );\n\n      // Check if the clicked target is outside of the referenced element\n      if (!hasPortalOrigin && isOutsideClick) {\n        callback();\n      }\n    },\n    [callback, elRef],\n  );\n\n  useEffect(() => {\n    // Add click event listener when component mounts\n    document.addEventListener('click', handleClickOutside, { capture: true });\n\n    // Cleanup function to remove event listener when component unmounts\n    // or when handleClickOutside changes\n    return () => {\n      document.removeEventListener('click', handleClickOutside, {\n        capture: true,\n      });\n    };\n  }, [handleClickOutside]);\n}\n"],"names":[],"mappings":";AAEO,SAAS,gBACd,OACA,UACA;AACA,QAAM,qBAAqB;AAAA,IACzB,CAAC,MAAkB;;AACjB,UAAI,CAAC,MAAM,SAAS;AAClB;AAAA,MACF;AAEA,YAAM,iBAAiB,CAAC,MAAM,QAAQ,SAAS,EAAE,MAAc;AAE/D,YAAM,aAAY,OAAE,iBAAF;AAElB,YAAM,kBAAkB,uCAAW;AAAA,QACjC,CAAC,OACC,cAAc,eAAe,GAAG,aAAa,oBAAoB;AAAA;AAIrE,UAAI,CAAC,mBAAmB,gBAAgB;AACtC,iBAAA;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,UAAU,KAAK;AAAA,EAAA;AAGlB,YAAU,MAAM;AAEd,aAAS,iBAAiB,SAAS,oBAAoB,EAAE,SAAS,MAAM;AAIxE,WAAO,MAAM;AACX,eAAS,oBAAoB,SAAS,oBAAoB;AAAA,QACxD,SAAS;AAAA,MAAA,CACV;AAAA,IACH;AAAA,EACF,GAAG,CAAC,kBAAkB,CAAC;AACzB;"}