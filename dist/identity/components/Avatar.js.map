{"version":3,"file":"Avatar.js","sources":["../../../src/identity/components/Avatar.tsx"],"sourcesContent":["'use client';\nimport { useIdentityContext } from '@/identity/components/IdentityProvider';\nimport { useAvatar } from '@/identity/hooks/useAvatar';\nimport { useName } from '@/identity/hooks/useName';\nimport type { AvatarReact } from '@/identity/types';\nimport { findComponent } from '@/internal/utils/findComponent';\nimport { Children, useMemo } from 'react';\nimport { defaultAvatarSVG } from '../../internal/svg/defaultAvatarSVG';\nimport { defaultLoadingSVG } from '../../internal/svg/defaultLoadingSVG';\nimport { border, cn } from '../../styles/theme';\nimport { Badge } from './Badge';\nimport { DisplayBadge } from './DisplayBadge';\n\n/**\n * Represents an Avatar component that displays either a loading indicator,\n * a default avatar, or a custom avatar based on Ethereum Name Service (ENS).\n */\nexport function Avatar({\n  address = null,\n  chain,\n  className,\n  defaultComponent,\n  loadingComponent,\n  children,\n  ...props\n}: AvatarReact) {\n  const { address: contextAddress, chain: contextChain } = useIdentityContext();\n\n  const accountAddress = address ?? contextAddress;\n  const accountChain = chain ?? contextChain;\n\n  if (!accountAddress) {\n    console.error(\n      'Avatar: an Ethereum address must be provided to the Identity or Avatar component.',\n    );\n    return null;\n  }\n\n  // The component first attempts to retrieve the ENS name and avatar for the given Ethereum address.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { data: name, isLoading: isLoadingName } = useName({\n    address: accountAddress,\n    chain: accountChain,\n  });\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { data: avatar, isLoading: isLoadingAvatar } = useAvatar(\n    { ensName: name ?? '', chain: accountChain },\n    { enabled: !!name },\n  );\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const badge = useMemo(() => {\n    return Children.toArray(children).find(findComponent(Badge));\n  }, [children]);\n\n  const defaultAvatar = defaultComponent || defaultAvatarSVG;\n  const loadingAvatar = loadingComponent || defaultLoadingSVG;\n\n  // If the data is still loading, it displays a loading SVG.\n  if (isLoadingName || isLoadingAvatar) {\n    return (\n      <div className={cn('h-8 w-8 overflow-hidden rounded-full', className)}>\n        {loadingAvatar}\n      </div>\n    );\n  }\n\n  const displayAvatarImg = name && avatar;\n\n  // Otherwise, it displays the custom avatar obtained from ENS.\n  return (\n    <div className=\"relative\">\n      <div\n        data-testid=\"ockAvatar_ImageContainer\"\n        className={cn('h-10 w-10 overflow-hidden rounded-full', className)}\n      >\n        {displayAvatarImg ? (\n          <img\n            className=\"min-h-full min-w-full object-cover\"\n            data-testid=\"ockAvatar_Image\"\n            loading=\"lazy\"\n            width=\"100%\"\n            height=\"100%\"\n            decoding=\"async\"\n            src={avatar}\n            alt={name}\n            {...props}\n          />\n        ) : (\n          <div className={cn(border.default, 'h-full w-full border')}>\n            {defaultAvatar}\n          </div>\n        )}\n      </div>\n      {badge && (\n        <DisplayBadge address={accountAddress}>\n          <div\n            data-testid=\"ockAvatar_BadgeContainer\"\n            className=\"-bottom-0.5 -right-0.5 absolute flex h-[15px] w-[15px] items-center justify-center rounded-full bg-transparent\"\n          >\n            <div className=\"flex h-3 w-3 items-center justify-center\">\n              {badge}\n            </div>\n          </div>\n        </DisplayBadge>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}