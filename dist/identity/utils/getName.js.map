{"version":3,"file":"getName.js","sources":["../../../src/identity/utils/getName.ts"],"sourcesContent":["import type { Basename, GetName, GetNameReturnType } from '@/identity/types';\nimport { base, mainnet } from 'viem/chains';\nimport { getChainPublicClient } from '../../core/network/getChainPublicClient';\nimport { isBase } from '../../core/utils/isBase';\nimport { isEthereum } from '../../core/utils/isEthereum';\nimport L2ResolverAbi from '../abis/L2ResolverAbi';\nimport { RESOLVER_ADDRESSES_BY_CHAIN_ID } from '../constants';\nimport { convertReverseNodeToBytes } from './convertReverseNodeToBytes';\nimport { getAddress } from './getAddress';\n\n/**\n * An asynchronous function to fetch the Ethereum Name Service (ENS)\n * name for a given Ethereum address. It returns the ENS name if it exists,\n * or null if it doesn't or in case of an error.\n */\nexport const getName = async ({\n  address,\n  chain = mainnet,\n}: GetName): Promise<GetNameReturnType> => {\n  const chainIsBase = isBase({ chainId: chain.id });\n  const chainIsEthereum = isEthereum({ chainId: chain.id });\n  const chainSupportsUniversalResolver = chainIsEthereum || chainIsBase;\n\n  if (!chainSupportsUniversalResolver) {\n    return Promise.reject(\n      'ChainId not supported, name resolution is only supported on Ethereum and Base.',\n    );\n  }\n\n  const client = getChainPublicClient(chain);\n\n  if (chainIsBase) {\n    const addressReverseNode = convertReverseNodeToBytes(address, base.id);\n    try {\n      const basename = (await client.readContract({\n        abi: L2ResolverAbi,\n        address: RESOLVER_ADDRESSES_BY_CHAIN_ID[chain.id],\n        functionName: 'name',\n        args: [addressReverseNode],\n      })) as Basename;\n\n      // Verify basename with forward resolution\n      if (basename) {\n        try {\n          const resolvedAddress = await getAddress({\n            name: basename,\n          });\n\n          if (\n            resolvedAddress &&\n            resolvedAddress.toLowerCase() === address.toLowerCase()\n          ) {\n            return basename;\n          }\n        } catch (error) {\n          console.error(\n            'Error during basename forward resolution verification:',\n            error,\n          );\n        }\n      }\n    } catch {\n      // This is a best effort attempt, so we don't need to do anything here.\n    }\n  }\n\n  // Default fallback to mainnet\n  // ENS resolution is not well-supported on Base, so want to ensure that we fall back to mainnet\n  const fallbackClient = getChainPublicClient(mainnet);\n\n  try {\n    // ENS username\n    const ensName = await fallbackClient.getEnsName({\n      address,\n    });\n\n    // Verify ENS name with forward resolution\n    if (ensName) {\n      try {\n        const resolvedAddress = await getAddress({\n          name: ensName,\n        });\n\n        if (\n          resolvedAddress &&\n          resolvedAddress.toLowerCase() === address.toLowerCase()\n        ) {\n          return ensName;\n        }\n      } catch (error) {\n        console.error(\n          'Error during ENS forward resolution verification:',\n          error,\n        );\n      }\n    }\n  } catch {\n    // This is a best effort attempt, so we don't need to do anything here.\n  }\n\n  return null;\n};\n"],"names":[],"mappings":";;;;;;;;AAeO,MAAM,UAAU,OAAO;AAAA,EAC5B;AAAA,EACA,QAAQ;AACV,MAA2C;AACzC,QAAM,cAAc,OAAO,EAAE,SAAS,MAAM,IAAI;AAChD,QAAM,kBAAkB,WAAW,EAAE,SAAS,MAAM,IAAI;AACxD,QAAM,iCAAiC,mBAAmB;AAE1D,MAAI,CAAC,gCAAgC;AACnC,WAAO,QAAQ;AAAA,MACb;AAAA,IAAA;AAAA,EAEJ;AAEA,QAAM,SAAS,qBAAqB,KAAK;AAEzC,MAAI,aAAa;AACf,UAAM,qBAAqB,0BAA0B,SAAS,KAAK,EAAE;AACrE,QAAI;AACF,YAAM,WAAY,MAAM,OAAO,aAAa;AAAA,QAC1C,KAAK;AAAA,QACL,SAAS,+BAA+B,MAAM,EAAE;AAAA,QAChD,cAAc;AAAA,QACd,MAAM,CAAC,kBAAkB;AAAA,MAAA,CAC1B;AAGD,UAAI,UAAU;AACZ,YAAI;AACF,gBAAM,kBAAkB,MAAM,WAAW;AAAA,YACvC,MAAM;AAAA,UAAA,CACP;AAED,cACE,mBACA,gBAAgB,YAAA,MAAkB,QAAQ,eAC1C;AACA,mBAAO;AAAA,UACT;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ;AAAA,YACN;AAAA,YACA;AAAA,UAAA;AAAA,QAEJ;AAAA,MACF;AAAA,IACF,QAAQ;AAAA,IAER;AAAA,EACF;AAIA,QAAM,iBAAiB,qBAAqB,OAAO;AAEnD,MAAI;AAEF,UAAM,UAAU,MAAM,eAAe,WAAW;AAAA,MAC9C;AAAA,IAAA,CACD;AAGD,QAAI,SAAS;AACX,UAAI;AACF,cAAM,kBAAkB,MAAM,WAAW;AAAA,UACvC,MAAM;AAAA,QAAA,CACP;AAED,YACE,mBACA,gBAAgB,YAAA,MAAkB,QAAQ,eAC1C;AACA,iBAAO;AAAA,QACT;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ;AAAA,UACN;AAAA,UACA;AAAA,QAAA;AAAA,MAEJ;AAAA,IACF;AAAA,EACF,QAAQ;AAAA,EAER;AAEA,SAAO;AACT;"}