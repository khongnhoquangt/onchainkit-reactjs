{"version":3,"file":"DepositBalance.js","sources":["../../../src/earn/components/DepositBalance.tsx"],"sourcesContent":["'use client';\nimport { getTruncatedAmount } from '@/earn/utils/getTruncatedAmount';\nimport { Skeleton } from '@/internal/components/Skeleton';\nimport { cn } from '@/styles/theme';\nimport { useCallback, useMemo } from 'react';\nimport { useAccount } from 'wagmi';\nimport type { DepositBalanceReact } from '../types';\nimport { EarnBalance } from './EarnBalance';\nimport { useEarnContext } from './EarnProvider';\n\nexport function DepositBalance({ className }: DepositBalanceReact) {\n  const { address } = useAccount();\n  const {\n    setDepositAmount,\n    vaultToken,\n    walletBalance,\n    walletBalanceStatus: status,\n  } = useEarnContext();\n\n  const handleMaxPress = useCallback(() => {\n    if (walletBalance) {\n      setDepositAmount(walletBalance);\n    }\n  }, [walletBalance, setDepositAmount]);\n\n  const balance = useMemo(() => {\n    if (!walletBalance) {\n      return '0';\n    }\n    return getTruncatedAmount(walletBalance.toString(), 6);\n  }, [walletBalance]);\n\n  const title = useMemo(() => {\n    if (!address) {\n      return 'Wallet not connected';\n    }\n    // Fetching vault token, but user is connected\n    if (!vaultToken) {\n      return (\n        <Skeleton\n          className={cn('!bg-[var(--ock-bg-alternate-active)] h-6 w-24')}\n        />\n      );\n    }\n    if (status === 'pending') {\n      return (\n        <div className=\"flex gap-1\">\n          <Skeleton className=\"!bg-[var(--ock-bg-alternate-active)] h-6 w-12\" />\n          <span>{vaultToken?.symbol}</span>\n        </div>\n      );\n    }\n    return `${balance} ${vaultToken?.symbol}`;\n  }, [balance, vaultToken, address, status]);\n\n  const subtitle = useMemo(() => {\n    if (!address) {\n      return 'Connect wallet to deposit';\n    }\n    return 'Available to deposit';\n  }, [address]);\n\n  return (\n    <EarnBalance\n      className={className}\n      title={title}\n      subtitle={subtitle}\n      onActionPress={handleMaxPress}\n      showAction={!!walletBalance}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAUO,SAAS,eAAe,EAAE,aAAkC;AACjE,QAAM,EAAE,QAAA,IAAY,WAAA;AACpB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,qBAAqB;AAAA,EAAA,IACnB,eAAA;AAEJ,QAAM,iBAAiB,YAAY,MAAM;AACvC,QAAI,eAAe;AACjB,uBAAiB,aAAa;AAAA,IAChC;AAAA,EACF,GAAG,CAAC,eAAe,gBAAgB,CAAC;AAEpC,QAAM,UAAU,QAAQ,MAAM;AAC5B,QAAI,CAAC,eAAe;AAClB,aAAO;AAAA,IACT;AACA,WAAO,mBAAmB,cAAc,SAAA,GAAY,CAAC;AAAA,EACvD,GAAG,CAAC,aAAa,CAAC;AAElB,QAAM,QAAQ,QAAQ,MAAM;AAC1B,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,YAAY;AACf,aACE;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW,GAAG,+CAA+C;AAAA,QAAA;AAAA,QAD/D;AAAA,QAAA;AAAA,QAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAIJ;AACA,QAAI,WAAW,WAAW;AACxB,aACE,uBAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,uBAAC,UAAA,EAAS,WAAU,gDAAA,GAApB,QAAA,OAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA,GAAA,IAAoE;AAAA,QACpE,uBAAC,QAAA,EAAM,UAAA,yCAAY,OAAA,GAAnB,QAAA,OAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA,GAAA,IAA0B;AAAA,MAAA,EAAA,GAF5B,QAAA,MAAA;AAAA,QAAA,UAAA;AAAA,QAAA,YAAA;AAAA,QAAA,cAAA;AAAA,MAAA,GAAA,IAGA;AAAA,IAEJ;AACA,WAAO,GAAG,OAAO,IAAI,yCAAY,MAAM;AAAA,EACzC,GAAG,CAAC,SAAS,YAAY,SAAS,MAAM,CAAC;AAEzC,QAAM,WAAW,QAAQ,MAAM;AAC7B,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,GAAG,CAAC,OAAO,CAAC;AAEZ,SACE;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAe;AAAA,MACf,YAAY,CAAC,CAAC;AAAA,IAAA;AAAA,IALhB;AAAA,IAAA;AAAA,IAAA;AAAA,MAAA,UAAA;AAAA,MAAA,YAAA;AAAA,MAAA,cAAA;AAAA,IAAA;AAAA,IAAA;AAAA,EAAA;AAQJ;"}