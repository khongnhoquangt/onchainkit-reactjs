{"version":3,"file":"buildPaymentMethods.js","sources":["../../../src/fund/utils/buildPaymentMethods.ts"],"sourcesContent":["import type {\n  OnrampOptionsResponseData,\n  OnrampPaymentCurrency,\n  PaymentMethod,\n} from '../types';\n\nconst DEFAULT_MIN_AMOUNT = 2;\nconst DEFAULT_MAX_AMOUNT = 500;\n\n/**\n * Coinbase payment method description is built using the available payment methods and adding Cash and Crypto Balance to the end of the array.\n * i.e. If the API returns Card and ACH, the description will be \"Card, ACH, Cash, Crypto Balance\".\n */\nexport const buildCoinbasePaymentMethodDescription = (\n  paymentMethodLimits: Array<{ id: string }>,\n) => {\n  const availableMethods = [\n    // Check API-provided methods\n    paymentMethodLimits.some((limit) => limit.id === 'ACH_BANK_ACCOUNT') &&\n      'ACH',\n    paymentMethodLimits.some((limit) => limit.id === 'CARD') && 'debit',\n    // Always include these methods\n    'cash',\n    'crypto balance',\n  ].filter(Boolean); // Remove falsy values\n\n  return availableMethods.join(', ');\n};\n\nconst buildCoinbasePaymentMethod = ({\n  limits,\n}: OnrampPaymentCurrency): PaymentMethod => ({\n  id: '',\n  name: 'Coinbase',\n  description: buildCoinbasePaymentMethodDescription(limits),\n  icon: 'coinbaseLogo',\n  minAmount: Math.min(...limits.map((l) => Number(l.min))),\n  maxAmount: Math.max(...limits.map((l) => Number(l.max))),\n});\n\nconst buildUSPaymentMethods = (\n  paymentCurrency: OnrampPaymentCurrency,\n): PaymentMethod[] => {\n  const paymentMethodConfigs = [\n    {\n      id: 'APPLE_PAY',\n      name: 'Apple Pay',\n      icon: 'apple',\n    },\n    {\n      id: 'CARD',\n      name: 'Debit card',\n      icon: 'creditCard',\n    },\n  ];\n\n  return paymentMethodConfigs.map((config) => {\n    const limit = paymentCurrency.limits.find(\n      (limit) => limit.id === config.id,\n    );\n\n    return {\n      ...config,\n      description: 'Up to $500/week. No sign up required.',\n      minAmount: Number(limit?.min) || DEFAULT_MIN_AMOUNT,\n      maxAmount: Number(limit?.max) || DEFAULT_MAX_AMOUNT,\n    };\n  });\n};\n\nexport const buildPaymentMethods = (\n  paymentOptions: OnrampOptionsResponseData,\n  currency: string,\n  country: string,\n) => {\n  const paymentCurrency = paymentOptions.paymentCurrencies.find(\n    (paymentCurrency) => paymentCurrency.id === currency,\n  );\n\n  if (!paymentCurrency) {\n    return [];\n  }\n\n  const coinbasePaymentMethod = buildCoinbasePaymentMethod(paymentCurrency);\n\n  let usPaymentMethods: PaymentMethod[] = [];\n  if (country === 'US' && currency === 'USD') {\n    usPaymentMethods = buildUSPaymentMethods(paymentCurrency);\n  }\n\n  return [coinbasePaymentMethod, ...usPaymentMethods];\n};\n"],"names":["limit","paymentCurrency"],"mappings":"AAMA,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAMpB,MAAM,wCAAwC,CACnD,wBACG;AACH,QAAM,mBAAmB;AAAA;AAAA,IAEvB,oBAAoB,KAAK,CAAC,UAAU,MAAM,OAAO,kBAAkB,KACjE;AAAA,IACF,oBAAoB,KAAK,CAAC,UAAU,MAAM,OAAO,MAAM,KAAK;AAAA;AAAA,IAE5D;AAAA,IACA;AAAA,EAAA,EACA,OAAO,OAAO;AAEhB,SAAO,iBAAiB,KAAK,IAAI;AACnC;AAEA,MAAM,6BAA6B,CAAC;AAAA,EAClC;AACF,OAA6C;AAAA,EAC3C,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,aAAa,sCAAsC,MAAM;AAAA,EACzD,MAAM;AAAA,EACN,WAAW,KAAK,IAAI,GAAG,OAAO,IAAI,CAAC,MAAM,OAAO,EAAE,GAAG,CAAC,CAAC;AAAA,EACvD,WAAW,KAAK,IAAI,GAAG,OAAO,IAAI,CAAC,MAAM,OAAO,EAAE,GAAG,CAAC,CAAC;AACzD;AAEA,MAAM,wBAAwB,CAC5B,oBACoB;AACpB,QAAM,uBAAuB;AAAA,IAC3B;AAAA,MACE,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,IAAA;AAAA,IAER;AAAA,MACE,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,IAAA;AAAA,EACR;AAGF,SAAO,qBAAqB,IAAI,CAAC,WAAW;AAC1C,UAAM,QAAQ,gBAAgB,OAAO;AAAA,MACnC,CAACA,WAAUA,OAAM,OAAO,OAAO;AAAA,IAAA;AAGjC,WAAO;AAAA,MACL,GAAG;AAAA,MACH,aAAa;AAAA,MACb,WAAW,OAAO,+BAAO,GAAG,KAAK;AAAA,MACjC,WAAW,OAAO,+BAAO,GAAG,KAAK;AAAA,IAAA;AAAA,EAErC,CAAC;AACH;AAEO,MAAM,sBAAsB,CACjC,gBACA,UACA,YACG;AACH,QAAM,kBAAkB,eAAe,kBAAkB;AAAA,IACvD,CAACC,qBAAoBA,iBAAgB,OAAO;AAAA,EAAA;AAG9C,MAAI,CAAC,iBAAiB;AACpB,WAAO,CAAA;AAAA,EACT;AAEA,QAAM,wBAAwB,2BAA2B,eAAe;AAExE,MAAI,mBAAoC,CAAA;AACxC,MAAI,YAAY,QAAQ,aAAa,OAAO;AAC1C,uBAAmB,sBAAsB,eAAe;AAAA,EAC1D;AAEA,SAAO,CAAC,uBAAuB,GAAG,gBAAgB;AACpD;"}