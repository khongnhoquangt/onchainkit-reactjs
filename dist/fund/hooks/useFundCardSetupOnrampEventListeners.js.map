{"version":3,"file":"useFundCardSetupOnrampEventListeners.js","sources":["../../../src/fund/hooks/useFundCardSetupOnrampEventListeners.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useFundContext } from '../components/FundCardProvider';\nimport { FUND_BUTTON_RESET_TIMEOUT } from '../constants';\nimport type { EventMetadata, SuccessEventData } from '../types';\nimport { setupOnrampEventListeners } from '../utils/setupOnrampEventListeners';\n\nexport const useFundCardSetupOnrampEventListeners = () => {\n  const { setSubmitButtonState, updateLifecycleStatus } = useFundContext();\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const scheduleFundButtonReset = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      setSubmitButtonState('default');\n    }, FUND_BUTTON_RESET_TIMEOUT);\n  }, [setSubmitButtonState]);\n\n  const handleOnrampEvent = useCallback(\n    (data: EventMetadata) => {\n      if (data.eventName === 'transition_view') {\n        updateLifecycleStatus({\n          statusName: 'transactionPending',\n          statusData: undefined,\n        });\n      } else if (data.eventName === 'error') {\n        updateLifecycleStatus({\n          statusName: 'error',\n          statusData: data.error,\n        });\n\n        setSubmitButtonState('error');\n        scheduleFundButtonReset();\n      }\n    },\n    [updateLifecycleStatus, setSubmitButtonState, scheduleFundButtonReset],\n  );\n\n  const handleOnrampSuccess = useCallback(\n    (data?: SuccessEventData) => {\n      updateLifecycleStatus({\n        statusName: 'transactionSuccess',\n        statusData: data,\n      });\n\n      setSubmitButtonState('success');\n      scheduleFundButtonReset();\n    },\n    [updateLifecycleStatus, setSubmitButtonState, scheduleFundButtonReset],\n  );\n\n  const handleOnrampExit = useCallback(() => {\n    setSubmitButtonState('default');\n\n    updateLifecycleStatus({\n      statusName: 'exit',\n      statusData: undefined,\n    });\n  }, [updateLifecycleStatus, setSubmitButtonState]);\n\n  useEffect(() => {\n    const unsubscribe = setupOnrampEventListeners({\n      onEvent: handleOnrampEvent,\n      onExit: handleOnrampExit,\n      onSuccess: handleOnrampSuccess,\n    });\n\n    return () => {\n      unsubscribe();\n\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n"],"names":[],"mappings":";;;;AAMO,MAAM,uCAAuC,MAAM;AACxD,QAAM,EAAE,sBAAsB,sBAAA,IAA0B,eAAA;AACxD,QAAM,aAAa,OAA8B,IAAI;AAErD,QAAM,0BAA0B,YAAY,MAAM;AAChD,QAAI,WAAW,SAAS;AACtB,mBAAa,WAAW,OAAO;AAAA,IACjC;AAEA,eAAW,UAAU,WAAW,MAAM;AACpC,2BAAqB,SAAS;AAAA,IAChC,GAAG,yBAAyB;AAAA,EAC9B,GAAG,CAAC,oBAAoB,CAAC;AAEzB,QAAM,oBAAoB;AAAA,IACxB,CAAC,SAAwB;AACvB,UAAI,KAAK,cAAc,mBAAmB;AACxC,8BAAsB;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY;AAAA,QAAA,CACb;AAAA,MACH,WAAW,KAAK,cAAc,SAAS;AACrC,8BAAsB;AAAA,UACpB,YAAY;AAAA,UACZ,YAAY,KAAK;AAAA,QAAA,CAClB;AAED,6BAAqB,OAAO;AAC5B,gCAAA;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC,uBAAuB,sBAAsB,uBAAuB;AAAA,EAAA;AAGvE,QAAM,sBAAsB;AAAA,IAC1B,CAAC,SAA4B;AAC3B,4BAAsB;AAAA,QACpB,YAAY;AAAA,QACZ,YAAY;AAAA,MAAA,CACb;AAED,2BAAqB,SAAS;AAC9B,8BAAA;AAAA,IACF;AAAA,IACA,CAAC,uBAAuB,sBAAsB,uBAAuB;AAAA,EAAA;AAGvE,QAAM,mBAAmB,YAAY,MAAM;AACzC,yBAAqB,SAAS;AAE9B,0BAAsB;AAAA,MACpB,YAAY;AAAA,MACZ,YAAY;AAAA,IAAA,CACb;AAAA,EACH,GAAG,CAAC,uBAAuB,oBAAoB,CAAC;AAEhD,YAAU,MAAM;AACd,UAAM,cAAc,0BAA0B;AAAA,MAC5C,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,WAAW;AAAA,IAAA,CACZ;AAED,WAAO,MAAM;AACX,kBAAA;AAEA,UAAI,WAAW,SAAS;AACtB,qBAAa,WAAW,OAAO;AAAA,MACjC;AAAA,IACF;AAAA,EAEF,GAAG,CAAA,CAAE;AACP;"}