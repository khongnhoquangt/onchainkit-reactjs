{"version":3,"file":"usePaymentMethods.js","sources":["../../../src/fund/hooks/usePaymentMethods.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport type { OnrampError, PaymentMethod } from '../types';\nimport { buildPaymentMethods } from '../utils/buildPaymentMethods';\nimport { fetchOnrampOptions } from '../utils/fetchOnrampOptions';\n\nexport const usePaymentMethods = ({\n  country,\n  subdivision,\n  currency,\n  setPaymentMethods,\n  setIsPaymentMethodsLoading,\n  onError,\n}: {\n  country: string;\n  subdivision?: string;\n  currency: string;\n  setPaymentMethods: (paymentMethods: PaymentMethod[]) => void;\n  setIsPaymentMethodsLoading: (loading: boolean) => void;\n  onError?: (e: OnrampError | undefined) => void;\n}) => {\n  const handleFetchPaymentMethods = useCallback(async () => {\n    setIsPaymentMethodsLoading(true);\n\n    try {\n      const paymentOptions = await fetchOnrampOptions({\n        country,\n        subdivision,\n      });\n\n      const paymentMethods = buildPaymentMethods(\n        paymentOptions,\n        currency,\n        country,\n      );\n\n      if (paymentMethods.length === 0) {\n        console.error(\n          'No payment methods found for the selected country and currency. See docs for more information: https://docs.cdp.coinbase.com/onramp/docs/api-configurations',\n        );\n        onError?.({\n          errorType: 'handled_error',\n          code: 'NO_PAYMENT_METHODS',\n          debugMessage:\n            'No payment methods found for the selected country and currency. See docs for more information: https://docs.cdp.coinbase.com/onramp/docs/api-configurations',\n        });\n      }\n\n      setPaymentMethods(paymentMethods);\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error('Error fetching payment options:', error);\n        onError?.({\n          errorType: 'handled_error',\n          code: 'PAYMENT_METHODS_ERROR',\n          debugMessage: error.message,\n        });\n      }\n    } finally {\n      setIsPaymentMethodsLoading(false);\n    }\n  }, [\n    country,\n    subdivision,\n    currency,\n    setPaymentMethods,\n    setIsPaymentMethodsLoading,\n    onError,\n  ]);\n\n  useEffect(() => {\n    handleFetchPaymentMethods();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n"],"names":[],"mappings":";;;AAKO,MAAM,oBAAoB,CAAC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAOM;AACJ,QAAM,4BAA4B,YAAY,YAAY;AACxD,+BAA2B,IAAI;AAE/B,QAAI;AACF,YAAM,iBAAiB,MAAM,mBAAmB;AAAA,QAC9C;AAAA,QACA;AAAA,MAAA,CACD;AAED,YAAM,iBAAiB;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAGF,UAAI,eAAe,WAAW,GAAG;AAC/B,gBAAQ;AAAA,UACN;AAAA,QAAA;AAEF,2CAAU;AAAA,UACR,WAAW;AAAA,UACX,MAAM;AAAA,UACN,cACE;AAAA,QAAA;AAAA,MAEN;AAEA,wBAAkB,cAAc;AAAA,IAClC,SAAS,OAAO;AACd,UAAI,iBAAiB,OAAO;AAC1B,gBAAQ,MAAM,mCAAmC,KAAK;AACtD,2CAAU;AAAA,UACR,WAAW;AAAA,UACX,MAAM;AAAA,UACN,cAAc,MAAM;AAAA,QAAA;AAAA,MAExB;AAAA,IACF,UAAA;AACE,iCAA2B,KAAK;AAAA,IAClC;AAAA,EACF,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,YAAU,MAAM;AACd,8BAAA;AAAA,EAEF,GAAG,CAAA,CAAE;AACP;"}