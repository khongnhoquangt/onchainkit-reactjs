{"version":3,"file":"AppchainBridgeNetwork.js","sources":["../../../../src/appchain/bridge/components/AppchainBridgeNetwork.tsx"],"sourcesContent":["'use client';\nimport { background, border, cn, text } from '@/styles/theme';\nimport { useAppchainBridgeContext } from './AppchainBridgeProvider';\n\ninterface AppchainBridgeNetworkReact {\n  type: 'from' | 'to';\n  label: string;\n}\n\nexport const AppchainBridgeNetwork = ({\n  type,\n  label,\n}: AppchainBridgeNetworkReact) => {\n  const { from, to } = useAppchainBridgeContext();\n\n  const displayNetwork = type === 'from' ? from.name : to.name;\n  const displayIcon = type === 'from' ? from.icon : to.icon;\n\n  return (\n    <div\n      className={cn(\n        background.secondary,\n        border.radius,\n        'box-border flex h-[80px] w-full flex-col items-start justify-center p-4',\n      )}\n      data-testid=\"ockAppchainBridgeNetwork_Container\"\n    >\n      <div className=\"flex w-full items-center justify-between\">\n        <div\n          className={cn(\n            'flex-col items-center gap-2 p-3',\n            border.radius,\n            'w-full',\n            {\n              'items-start': type === 'from',\n              'items-end': type === 'to',\n            },\n          )}\n        >\n          <div\n            className={cn('flex w-full items-center', {\n              'justify-start': type === 'from',\n              'justify-end': type === 'to',\n            })}\n          >\n            <span className={cn(text.label2, 'text-[#8A919E]')}>{label}</span>\n          </div>\n          <div\n            className={cn('flex items-center gap-2', {\n              'justify-start': type === 'from',\n              'justify-end': type === 'to',\n            })}\n          >\n            <div className=\"flex h-4 w-4 items-center justify-center\">\n              {displayIcon}\n            </div>\n            <span className={cn(text.headline)}>{displayNetwork}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["this"],"mappings":";;;AASO,MAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA;AACF,MAAkC;AAChC,QAAM,EAAE,MAAM,GAAA,IAAO,yBAAA;AAErB,QAAM,iBAAiB,SAAS,SAAS,KAAK,OAAO,GAAG;AACxD,QAAM,cAAc,SAAS,SAAS,KAAK,OAAO,GAAG;AAErD,SACE;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW;AAAA,QACT,WAAW;AAAA,QACX,OAAO;AAAA,QACP;AAAA,MAAA;AAAA,MAEF,eAAY;AAAA,MAEZ,UAAA,uBAAC,OAAA,EAAI,WAAU,4CACb,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW;AAAA,YACT;AAAA,YACA,OAAO;AAAA,YACP;AAAA,YACA;AAAA,cACE,eAAe,SAAS;AAAA,cACxB,aAAa,SAAS;AAAA,YAAA;AAAA,UACxB;AAAA,UAGF,UAAA;AAAA,YAAA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,WAAW,GAAG,4BAA4B;AAAA,kBACxC,iBAAiB,SAAS;AAAA,kBAC1B,eAAe,SAAS;AAAA,gBAAA,CACzB;AAAA,gBAED,UAAA,uBAAC,UAAK,WAAW,GAAG,KAAK,QAAQ,gBAAgB,GAAI,UAAA,MAAA,GAArD,QAAA,OAAA;AAAA,kBAAA,UAAA;AAAA,kBAAA,YAAA;AAAA,kBAAA,cAAA;AAAA,gBAAA,GAAAA,MAA2D;AAAA,cAAA;AAAA,cAN7D;AAAA,cAAA;AAAA,cAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA,YAAA;AAAA,gBAAA,cAAA;AAAA,cAAA;AAAA,cAAAA;AAAAA,YAAA;AAAA,YAQA;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,WAAW,GAAG,2BAA2B;AAAA,kBACvC,iBAAiB,SAAS;AAAA,kBAC1B,eAAe,SAAS;AAAA,gBAAA,CACzB;AAAA,gBAED,UAAA;AAAA,kBAAA,uBAAC,OAAA,EAAI,WAAU,4CACZ,UAAA,YAAA,GADH,QAAA,OAAA;AAAA,oBAAA,UAAA;AAAA,oBAAA,YAAA;AAAA,oBAAA,cAAA;AAAA,kBAAA,GAAAA,MAEA;AAAA,yCACC,QAAA,EAAK,WAAW,GAAG,KAAK,QAAQ,GAAI,UAAA,kBAArC,QAAA,OAAA;AAAA,oBAAA,UAAA;AAAA,oBAAA,YAAA;AAAA,oBAAA,cAAA;AAAA,kBAAA,GAAAA,MAAoD;AAAA,gBAAA;AAAA,cAAA;AAAA,cATtD;AAAA,cAAA;AAAA,cAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA,YAAA;AAAA,gBAAA,cAAA;AAAA,cAAA;AAAA,cAAAA;AAAAA,YAAA;AAAA,UAUA;AAAA,QAAA;AAAA,QA7BF;AAAA,QAAA;AAAA,QAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAA;AAAA,QAAAA;AAAAA,MAAA,EA8BA,GA/BF,QAAA,OAAA;AAAA,QAAA,UAAA;AAAA,QAAA,YAAA;AAAA,QAAA,cAAA;AAAA,MAAA,GAAAA,MAgCA;AAAA,IAAA;AAAA,IAxCF;AAAA,IAAA;AAAA,IAAA;AAAA,MAAA,UAAA;AAAA,MAAA,YAAA;AAAA,MAAA,cAAA;AAAA,IAAA;AAAA,IAAAA;AAAAA,EAAA;AA2CJ;"}