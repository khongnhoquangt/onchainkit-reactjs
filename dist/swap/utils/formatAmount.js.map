{"version":3,"file":"formatAmount.js","sources":["../../../src/swap/utils/formatAmount.ts"],"sourcesContent":["export function formatAmount(num: string): string {\n  // If the number is not in scientific notation return it as it is\n  if (!/\\d+\\.?\\d*e[+-]*\\d+/i.test(num)) {\n    return num;\n  }\n\n  // Parse into coefficient and exponent\n  const [coefficient, exponent] = num.toLowerCase().split('e');\n  const exp = Number.parseInt(exponent);\n\n  // Split coefficient into integer and decimal parts\n  const [intPart, decPart = ''] = coefficient.split('.');\n\n  // Combine integer and decimal parts\n  const fullNumber = intPart + decPart;\n\n  // Calculate the new decimal point position\n  const newPosition = intPart.length + exp;\n\n  if (newPosition <= 0) {\n    // If the new position is less than or equal to 0, we need to add leading zeros\n    return `0.${'0'.repeat(Math.abs(newPosition))}${fullNumber}`;\n  }\n\n  if (newPosition >= fullNumber.length) {\n    // If the new position is greater than the number length, we need to add trailing zeros\n    return fullNumber + '0'.repeat(newPosition - fullNumber.length);\n  }\n\n  // Otherwise, we insert the decimal point at the new position\n  return `${fullNumber.slice(0, newPosition)}.${fullNumber.slice(newPosition)}`;\n}\n"],"names":[],"mappings":"AAAO,SAAS,aAAa,KAAqB;AAEhD,MAAI,CAAC,sBAAsB,KAAK,GAAG,GAAG;AACpC,WAAO;AAAA,EACT;AAGA,QAAM,CAAC,aAAa,QAAQ,IAAI,IAAI,YAAA,EAAc,MAAM,GAAG;AAC3D,QAAM,MAAM,OAAO,SAAS,QAAQ;AAGpC,QAAM,CAAC,SAAS,UAAU,EAAE,IAAI,YAAY,MAAM,GAAG;AAGrD,QAAM,aAAa,UAAU;AAG7B,QAAM,cAAc,QAAQ,SAAS;AAErC,MAAI,eAAe,GAAG;AAEpB,WAAO,KAAK,IAAI,OAAO,KAAK,IAAI,WAAW,CAAC,CAAC,GAAG,UAAU;AAAA,EAC5D;AAEA,MAAI,eAAe,WAAW,QAAQ;AAEpC,WAAO,aAAa,IAAI,OAAO,cAAc,WAAW,MAAM;AAAA,EAChE;AAGA,SAAO,GAAG,WAAW,MAAM,GAAG,WAAW,CAAC,IAAI,WAAW,MAAM,WAAW,CAAC;AAC7E;"}